difficulty,frontendQuestionId,title,category,acceptance_rate,topics
Easy,1,Two Sum,Algorithms,55.57669029,"['Array', 'Hash Table']"
Medium,2,Add Two Numbers,Algorithms,45.97311918,"['Linked List', 'Math', 'Recursion']"
Medium,3,Longest Substring Without Repeating Characters,Algorithms,36.73624411,"['Hash Table', 'String', 'Sliding Window']"
Hard,4,Median of Two Sorted Arrays,Algorithms,43.52290179,"['Array', 'Binary Search', 'Divide and Conquer']"
Medium,5,Longest Palindromic Substring,Algorithms,35.66839764,"['Two Pointers', 'String', 'Dynamic Programming']"
Medium,6,Zigzag Conversion,Algorithms,51.35722144,['String']
Medium,7,Reverse Integer,Algorithms,30.16157662,['Math']
Medium,8,String to Integer (atoi),Algorithms,19.04709548,['String']
Easy,9,Palindrome Number,Algorithms,59.06786657,['Math']
Hard,10,Regular Expression Matching,Algorithms,29.19329333,"['String', 'Dynamic Programming', 'Recursion']"
Medium,11,Container With Most Water,Algorithms,57.59990758,"['Array', 'Two Pointers', 'Greedy']"
Medium,12,Integer to Roman,Algorithms,68.36468066,"['Hash Table', 'Math', 'String']"
Easy,13,Roman to Integer,Algorithms,64.65175361,"['Hash Table', 'Math', 'String']"
Easy,14,Longest Common Prefix,Algorithms,45.29039528,"['String', 'Trie']"
Medium,15,3Sum,Algorithms,36.86367258,"['Array', 'Two Pointers', 'Sorting']"
Medium,16,3Sum Closest,Algorithms,46.81082265,"['Array', 'Two Pointers', 'Sorting']"
Medium,17,Letter Combinations of a Phone Number,Algorithms,63.62485818,"['Hash Table', 'String', 'Backtracking']"
Medium,18,4Sum,Algorithms,38.00106368,"['Array', 'Two Pointers', 'Sorting']"
Medium,19,Remove Nth Node From End of List,Algorithms,48.6671321,"['Linked List', 'Two Pointers']"
Easy,20,Valid Parentheses,Algorithms,42.17887507,"['String', 'Stack']"
Easy,21,Merge Two Sorted Lists,Algorithms,66.67446899,"['Linked List', 'Recursion']"
Medium,22,Generate Parentheses,Algorithms,76.93766655,"['String', 'Dynamic Programming', 'Backtracking']"
Hard,23,Merge k Sorted Lists,Algorithms,56.47701821,"['Linked List', 'Divide and Conquer', 'Heap (Priority Queue)', 'Merge Sort']"
Medium,24,Swap Nodes in Pairs,Algorithms,66.97877312,"['Linked List', 'Recursion']"
Hard,25,Reverse Nodes in k-Group,Algorithms,62.71432275,"['Linked List', 'Recursion']"
Easy,26,Remove Duplicates from Sorted Array,Algorithms,60.08456769,"['Array', 'Two Pointers']"
Easy,27,Remove Element,Algorithms,59.86020878,"['Array', 'Two Pointers']"
Easy,28,Find the Index of the First Occurrence in a String,Algorithms,44.8130514,"['Two Pointers', 'String', 'String Matching']"
Medium,29,Divide Two Integers,Algorithms,18.31899318,"['Math', 'Bit Manipulation']"
Hard,30,Substring with Concatenation of All Words,Algorithms,32.94825753,"['Hash Table', 'String', 'Sliding Window']"
Medium,31,Next Permutation,Algorithms,42.81940122,"['Array', 'Two Pointers']"
Hard,32,Longest Valid Parentheses,Algorithms,36.12647916,"['String', 'Dynamic Programming', 'Stack']"
Medium,33,Search in Rotated Sorted Array,Algorithms,42.6673204,"['Array', 'Binary Search']"
Medium,34,Find First and Last Position of Element in Sorted Array,Algorithms,46.5927721,"['Array', 'Binary Search']"
Easy,35,Search Insert Position,Algorithms,48.78678339,"['Array', 'Binary Search']"
Medium,36,Valid Sudoku,Algorithms,62.0859509,"['Array', 'Hash Table', 'Matrix']"
Hard,37,Sudoku Solver,Algorithms,63.76410818,"['Array', 'Hash Table', 'Backtracking', 'Matrix']"
Medium,38,Count and Say,Algorithms,60.26618084,['String']
Medium,39,Combination Sum,Algorithms,74.42300237,"['Array', 'Backtracking']"
Medium,40,Combination Sum II,Algorithms,57.50024604,"['Array', 'Backtracking']"
Hard,41,First Missing Positive,Algorithms,40.9490707,"['Array', 'Hash Table']"
Hard,42,Trapping Rain Water,Algorithms,64.83931521,"['Array', 'Two Pointers', 'Dynamic Programming', 'Stack', 'Monotonic Stack']"
Medium,43,Multiply Strings,Algorithms,42.16570974,"['Math', 'String', 'Simulation']"
Hard,44,Wildcard Matching,Algorithms,29.70288475,"['String', 'Dynamic Programming', 'Greedy', 'Recursion']"
Medium,45,Jump Game II,Algorithms,41.36600598,"['Array', 'Dynamic Programming', 'Greedy']"
Medium,46,Permutations,Algorithms,80.50343814,"['Array', 'Backtracking']"
Medium,47,Permutations II,Algorithms,61.40725137,"['Array', 'Backtracking', 'Sorting']"
Medium,48,Rotate Image,Algorithms,77.64814723,"['Array', 'Math', 'Matrix']"
Medium,49,Group Anagrams,Algorithms,70.74386047,"['Array', 'Hash Table', 'String', 'Sorting']"
Medium,50,"Pow(x, n)",Algorithms,36.87246878,"['Math', 'Recursion']"
Hard,51,N-Queens,Algorithms,72.40869047,"['Array', 'Backtracking']"
Hard,52,N-Queens II,Algorithms,76.50912105,['Backtracking']
Medium,53,Maximum Subarray,Algorithms,51.98742459,"['Array', 'Divide and Conquer', 'Dynamic Programming']"
Medium,54,Spiral Matrix,Algorithms,53.61208262,"['Array', 'Matrix', 'Simulation']"
Medium,55,Jump Game,Algorithms,39.34269964,"['Array', 'Dynamic Programming', 'Greedy']"
Medium,56,Merge Intervals,Algorithms,49.21381211,"['Array', 'Sorting']"
Medium,57,Insert Interval,Algorithms,43.29028139,['Array']
Easy,58,Length of Last Word,Algorithms,56.06293612,['String']
Medium,59,Spiral Matrix II,Algorithms,73.2952392,"['Array', 'Matrix', 'Simulation']"
Hard,60,Permutation Sequence,Algorithms,49.69660875,"['Math', 'Recursion']"
Medium,61,Rotate List,Algorithms,39.78052654,"['Linked List', 'Two Pointers']"
Medium,62,Unique Paths,Algorithms,65.65148,"['Math', 'Dynamic Programming', 'Combinatorics']"
Medium,63,Unique Paths II,Algorithms,43.01597866,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,64,Minimum Path Sum,Algorithms,66.26856022,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,65,Valid Number,Algorithms,21.42665373,['String']
Easy,66,Plus One,Algorithms,47.40197753,"['Array', 'Math']"
Easy,67,Add Binary,Algorithms,55.54233034,"['Math', 'String', 'Bit Manipulation', 'Simulation']"
Hard,68,Text Justification,Algorithms,47.84849041,"['Array', 'String', 'Simulation']"
Easy,69,Sqrt(x),Algorithms,40.27495566,"['Math', 'Binary Search']"
Easy,70,Climbing Stairs,Algorithms,53.48226047,"['Math', 'Dynamic Programming', 'Memoization']"
Medium,71,Simplify Path,Algorithms,47.48451341,"['String', 'Stack']"
Medium,72,Edit Distance,Algorithms,58.59239066,"['String', 'Dynamic Programming']"
Medium,73,Set Matrix Zeroes,Algorithms,59.53583267,"['Array', 'Hash Table', 'Matrix']"
Medium,74,Search a 2D Matrix,Algorithms,52.10603926,"['Array', 'Binary Search', 'Matrix']"
Medium,75,Sort Colors,Algorithms,67.03235482,"['Array', 'Two Pointers', 'Sorting']"
Hard,76,Minimum Window Substring,Algorithms,45.12248942,"['Hash Table', 'String', 'Sliding Window']"
Medium,77,Combinations,Algorithms,72.69733743,['Backtracking']
Medium,78,Subsets,Algorithms,80.66235761,"['Array', 'Backtracking', 'Bit Manipulation']"
Medium,79,Word Search,Algorithms,45.04898534,"['Array', 'String', 'Backtracking', 'Depth-First Search', 'Matrix']"
Medium,80,Remove Duplicates from Sorted Array II,Algorithms,62.71870316,"['Array', 'Two Pointers']"
Medium,81,Search in Rotated Sorted Array II,Algorithms,38.79111912,"['Array', 'Binary Search']"
Medium,82,Remove Duplicates from Sorted List II,Algorithms,49.70581249,"['Linked List', 'Two Pointers']"
Easy,83,Remove Duplicates from Sorted List,Algorithms,54.70971395,['Linked List']
Hard,84,Largest Rectangle in Histogram,Algorithms,47.09459099,"['Array', 'Stack', 'Monotonic Stack']"
Hard,85,Maximal Rectangle,Algorithms,53.37823764,"['Array', 'Dynamic Programming', 'Stack', 'Matrix', 'Monotonic Stack']"
Medium,86,Partition List,Algorithms,58.78315405,"['Linked List', 'Two Pointers']"
Hard,87,Scramble String,Algorithms,42.03945932,"['String', 'Dynamic Programming']"
Easy,88,Merge Sorted Array,Algorithms,52.70439545,"['Array', 'Two Pointers', 'Sorting']"
Medium,89,Gray Code,Algorithms,61.65189276,"['Math', 'Backtracking', 'Bit Manipulation']"
Medium,90,Subsets II,Algorithms,59.28917657,"['Array', 'Backtracking', 'Bit Manipulation']"
Medium,91,Decode Ways,Algorithms,36.39558361,"['String', 'Dynamic Programming']"
Medium,92,Reverse Linked List II,Algorithms,49.43273758,['Linked List']
Medium,93,Restore IP Addresses,Algorithms,52.89732573,"['String', 'Backtracking']"
Easy,94,Binary Tree Inorder Traversal,Algorithms,78.39254127,"['Stack', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,95,Unique Binary Search Trees II,Algorithms,60.20474174,"['Dynamic Programming', 'Backtracking', 'Tree', 'Binary Search Tree', 'Binary Tree']"
Medium,96,Unique Binary Search Trees,Algorithms,62.35452794,"['Math', 'Dynamic Programming', 'Tree', 'Binary Search Tree', 'Binary Tree']"
Medium,97,Interleaving String,Algorithms,42.0289527,"['String', 'Dynamic Programming']"
Medium,98,Validate Binary Search Tree,Algorithms,34.25135635,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,99,Recover Binary Search Tree,Algorithms,55.99619523,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Easy,100,Same Tree,Algorithms,64.89753287,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,101,Symmetric Tree,Algorithms,59.06521613,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,102,Binary Tree Level Order Traversal,Algorithms,70.33556427,"['Tree', 'Breadth-First Search', 'Binary Tree']"
Medium,103,Binary Tree Zigzag Level Order Traversal,Algorithms,61.44612378,"['Tree', 'Breadth-First Search', 'Binary Tree']"
Easy,104,Maximum Depth of Binary Tree,Algorithms,77.01293798,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,105,Construct Binary Tree from Preorder and Inorder Traversal,Algorithms,66.59871436,"['Array', 'Hash Table', 'Divide and Conquer', 'Tree', 'Binary Tree']"
Medium,106,Construct Binary Tree from Inorder and Postorder Traversal,Algorithms,65.76414283,"['Array', 'Hash Table', 'Divide and Conquer', 'Tree', 'Binary Tree']"
Medium,107,Binary Tree Level Order Traversal II,Algorithms,65.80389821,"['Tree', 'Breadth-First Search', 'Binary Tree']"
Easy,108,Convert Sorted Array to Binary Search Tree,Algorithms,73.91816343,"['Array', 'Divide and Conquer', 'Tree', 'Binary Search Tree', 'Binary Tree']"
Medium,109,Convert Sorted List to Binary Search Tree,Algorithms,64.2828494,"['Linked List', 'Divide and Conquer', 'Tree', 'Binary Search Tree', 'Binary Tree']"
Easy,110,Balanced Binary Tree,Algorithms,55.08700639,"['Tree', 'Depth-First Search', 'Binary Tree']"
Easy,111,Minimum Depth of Binary Tree,Algorithms,50.45012218,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,112,Path Sum,Algorithms,52.80950275,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,113,Path Sum II,Algorithms,60.33447592,"['Backtracking', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,114,Flatten Binary Tree to Linked List,Algorithms,68.23024388,"['Linked List', 'Stack', 'Tree', 'Depth-First Search', 'Binary Tree']"
Hard,115,Distinct Subsequences,Algorithms,49.87629697,"['String', 'Dynamic Programming']"
Medium,116,Populating Next Right Pointers in Each Node,Algorithms,65.26072031,"['Linked List', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,117,Populating Next Right Pointers in Each Node II,Algorithms,55.36332951,"['Linked List', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,118,Pascal's Triangle,Algorithms,76.82287855,"['Array', 'Dynamic Programming']"
Easy,119,Pascal's Triangle II,Algorithms,65.80036742,"['Array', 'Dynamic Programming']"
Medium,120,Triangle,Algorithms,59.02941335,"['Array', 'Dynamic Programming']"
Easy,121,Best Time to Buy and Sell Stock,Algorithms,55.08560088,"['Array', 'Dynamic Programming']"
Medium,122,Best Time to Buy and Sell Stock II,Algorithms,69.29255345,"['Array', 'Dynamic Programming', 'Greedy']"
Hard,123,Best Time to Buy and Sell Stock III,Algorithms,50.75605709,"['Array', 'Dynamic Programming']"
Hard,124,Binary Tree Maximum Path Sum,Algorithms,41.12580759,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,125,Valid Palindrome,Algorithms,50.69565963,"['Two Pointers', 'String']"
Hard,126,Word Ladder II,Algorithms,27.15579985,"['Hash Table', 'String', 'Backtracking', 'Breadth-First Search']"
Hard,127,Word Ladder,Algorithms,42.48887717,"['Hash Table', 'String', 'Breadth-First Search']"
Medium,128,Longest Consecutive Sequence,Algorithms,47.06540991,"['Array', 'Hash Table', 'Union Find']"
Medium,129,Sum Root to Leaf Numbers,Algorithms,68.36082039,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,130,Surrounded Regions,Algorithms,42.58953871,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Medium,131,Palindrome Partitioning,Algorithms,71.84519341,"['String', 'Dynamic Programming', 'Backtracking']"
Hard,132,Palindrome Partitioning II,Algorithms,35.11206491,"['String', 'Dynamic Programming']"
Medium,133,Clone Graph,Algorithms,61.9962134,"['Hash Table', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Medium,134,Gas Station,Algorithms,46.24327232,"['Array', 'Greedy']"
Hard,135,Candy,Algorithms,44.68818582,"['Array', 'Greedy']"
Easy,136,Single Number,Algorithms,75.75928518,"['Array', 'Bit Manipulation']"
Medium,137,Single Number II,Algorithms,65.04369727,"['Array', 'Bit Manipulation']"
Medium,138,Copy List with Random Pointer,Algorithms,60.1991809,"['Hash Table', 'Linked List']"
Medium,139,Word Break,Algorithms,48.14569461,"['Array', 'Hash Table', 'String', 'Dynamic Programming', 'Trie', 'Memoization']"
Hard,140,Word Break II,Algorithms,53.42040486,"['Array', 'Hash Table', 'String', 'Dynamic Programming', 'Backtracking', 'Trie', 'Memoization']"
Easy,141,Linked List Cycle,Algorithms,52.37443034,"['Hash Table', 'Linked List', 'Two Pointers']"
Medium,142,Linked List Cycle II,Algorithms,54.57561748,"['Hash Table', 'Linked List', 'Two Pointers']"
Medium,143,Reorder List,Algorithms,62.20657798,"['Linked List', 'Two Pointers', 'Stack', 'Recursion']"
Easy,144,Binary Tree Preorder Traversal,Algorithms,72.90807894,"['Stack', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,145,Binary Tree Postorder Traversal,Algorithms,75.44344924,"['Stack', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,146,LRU Cache,Algorithms,44.96548188,"['Hash Table', 'Linked List', 'Design', 'Doubly-Linked List']"
Medium,147,Insertion Sort List,Algorithms,56.24482781,"['Linked List', 'Sorting']"
Medium,148,Sort List,Algorithms,61.47838512,"['Linked List', 'Two Pointers', 'Divide and Conquer', 'Sorting', 'Merge Sort']"
Hard,149,Max Points on a Line,Algorithms,28.7938746,"['Array', 'Hash Table', 'Math', 'Geometry']"
Medium,150,Evaluate Reverse Polish Notation,Algorithms,54.65822669,"['Array', 'Math', 'Stack']"
Medium,151,Reverse Words in a String,Algorithms,51.34901101,"['Two Pointers', 'String']"
Medium,152,Maximum Product Subarray,Algorithms,34.79505523,"['Array', 'Dynamic Programming']"
Medium,153,Find Minimum in Rotated Sorted Array,Algorithms,52.48146439,"['Array', 'Binary Search']"
Hard,154,Find Minimum in Rotated Sorted Array II,Algorithms,44.08704363,"['Array', 'Binary Search']"
Medium,155,Min Stack,Algorithms,56.25846861,"['Stack', 'Design']"
Medium,156,Binary Tree Upside Down,Algorithms,64.40587189,"['Tree', 'Depth-First Search', 'Binary Tree']"
Easy,157,Read N Characters Given Read4,Algorithms,42.20333081,"['Array', 'Simulation', 'Interactive']"
Hard,158,Read N Characters Given read4 II - Call Multiple Times,Algorithms,42.84943444,"['Array', 'Simulation', 'Interactive']"
Medium,159,Longest Substring with At Most Two Distinct Characters,Algorithms,56.33123177,"['Hash Table', 'String', 'Sliding Window']"
Easy,160,Intersection of Two Linked Lists,Algorithms,60.81279443,"['Hash Table', 'Linked List', 'Two Pointers']"
Medium,161,One Edit Distance,Algorithms,34.4673052,"['Two Pointers', 'String']"
Medium,162,Find Peak Element,Algorithms,46.47250077,"['Array', 'Binary Search']"
Easy,163,Missing Ranges,Algorithms,35.17903856,['Array']
Medium,164,Maximum Gap,Algorithms,49.12595297,"['Array', 'Sorting', 'Bucket Sort', 'Radix Sort']"
Medium,165,Compare Version Numbers,Algorithms,42.2118861,"['Two Pointers', 'String']"
Medium,166,Fraction to Recurring Decimal,Algorithms,26.12451242,"['Hash Table', 'Math', 'String']"
Medium,167,Two Sum II - Input Array Is Sorted,Algorithms,63.23028421,"['Array', 'Two Pointers', 'Binary Search']"
Easy,168,Excel Sheet Column Title,Algorithms,43.31689589,"['Math', 'String']"
Easy,169,Majority Element,Algorithms,65.66321329,"['Array', 'Hash Table', 'Divide and Conquer', 'Sorting', 'Counting']"
Easy,170,Two Sum III - Data structure design,Algorithms,38.64845487,"['Array', 'Hash Table', 'Two Pointers', 'Design', 'Data Stream']"
Easy,171,Excel Sheet Column Number,Algorithms,65.59480835,"['Math', 'String']"
Medium,172,Factorial Trailing Zeroes,Algorithms,44.72988539,['Math']
Medium,173,Binary Search Tree Iterator,Algorithms,74.64213853,"['Stack', 'Tree', 'Design', 'Binary Search Tree', 'Binary Tree', 'Iterator']"
Hard,174,Dungeon Game,Algorithms,39.37580536,"['Array', 'Dynamic Programming', 'Matrix']"
Easy,175,Combine Two Tables,Database,77.93557769,['Database']
Medium,176,Second Highest Salary,Database,43.56633235,['Database']
Medium,177,Nth Highest Salary,Database,37.92745985,['Database']
Medium,178,Rank Scores,Database,65.05270937,['Database']
Medium,179,Largest Number,Algorithms,41.13761258,"['Array', 'String', 'Greedy', 'Sorting']"
Medium,180,Consecutive Numbers,Database,45.88833534,['Database']
Easy,181,Employees Earning More Than Their Managers,Database,71.38412336,['Database']
Easy,182,Duplicate Emails,Database,72.33058743,['Database']
Easy,183,Customers Who Never Order,Database,70.5646723,['Database']
Medium,184,Department Highest Salary,Database,54.4800535,['Database']
Hard,185,Department Top Three Salaries,Database,57.46206297,['Database']
Medium,186,Reverse Words in a String II,Algorithms,55.97082542,"['Two Pointers', 'String']"
Medium,187,Repeated DNA Sequences,Algorithms,51.11702958,"['Hash Table', 'String', 'Bit Manipulation', 'Sliding Window', 'Rolling Hash', 'Hash Function']"
Hard,188,Best Time to Buy and Sell Stock IV,Algorithms,46.66557862,"['Array', 'Dynamic Programming']"
Medium,189,Rotate Array,Algorithms,42.8263607,"['Array', 'Math', 'Two Pointers']"
Easy,190,Reverse Bits,Algorithms,62.87848775,"['Divide and Conquer', 'Bit Manipulation']"
Easy,191,Number of 1 Bits,Algorithms,74.25910231,"['Divide and Conquer', 'Bit Manipulation']"
Medium,192,Word Frequency,Shell,27.11295462,['Shell']
Easy,193,Valid Phone Numbers,Shell,27.30284235,['Shell']
Medium,194,Transpose File,Shell,28.31597632,['Shell']
Easy,195,Tenth Line,Shell,34.43131533,['Shell']
Easy,196,Delete Duplicate Emails,Database,64.15613929,['Database']
Easy,197,Rising Temperature,Database,50.07424278,['Database']
Medium,198,House Robber,Algorithms,52.19996472,"['Array', 'Dynamic Programming']"
Medium,199,Binary Tree Right Side View,Algorithms,66.61680553,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,200,Number of Islands,Algorithms,62.09617867,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Medium,201,Bitwise AND of Numbers Range,Algorithms,47.65435164,['Bit Manipulation']
Easy,202,Happy Number,Algorithms,57.90783163,"['Hash Table', 'Math', 'Two Pointers']"
Easy,203,Remove Linked List Elements,Algorithms,51.6731825,"['Linked List', 'Recursion']"
Medium,204,Count Primes,Algorithms,34.64775176,"['Array', 'Math', 'Enumeration', 'Number Theory']"
Easy,205,Isomorphic Strings,Algorithms,46.70215682,"['Hash Table', 'String']"
Easy,206,Reverse Linked List,Algorithms,79.02436399,"['Linked List', 'Recursion']"
Medium,207,Course Schedule,Algorithms,48.97071226,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Medium,208,Implement Trie (Prefix Tree),Algorithms,67.72500607,"['Hash Table', 'String', 'Design', 'Trie']"
Medium,209,Minimum Size Subarray Sum,Algorithms,49.17706235,"['Array', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Medium,210,Course Schedule II,Algorithms,53.15596345,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Medium,211,Design Add and Search Words Data Structure,Algorithms,46.89738354,"['String', 'Depth-First Search', 'Design', 'Trie']"
Hard,212,Word Search II,Algorithms,37.21671794,"['Array', 'String', 'Backtracking', 'Trie', 'Matrix']"
Medium,213,House Robber II,Algorithms,43.41619216,"['Array', 'Dynamic Programming']"
Hard,214,Shortest Palindrome,Algorithms,40.5548706,"['String', 'Rolling Hash', 'String Matching', 'Hash Function']"
Medium,215,Kth Largest Element in an Array,Algorithms,67.8475826,"['Array', 'Divide and Conquer', 'Sorting', 'Heap (Priority Queue)', 'Quickselect']"
Medium,216,Combination Sum III,Algorithms,71.69761128,"['Array', 'Backtracking']"
Easy,217,Contains Duplicate,Algorithms,63.09846007,"['Array', 'Hash Table', 'Sorting']"
Hard,218,The Skyline Problem,Algorithms,43.8604857,"['Array', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Line Sweep', 'Heap (Priority Queue)', 'Ordered Set']"
Easy,219,Contains Duplicate II,Algorithms,48.79264816,"['Array', 'Hash Table', 'Sliding Window']"
Hard,220,Contains Duplicate III,Algorithms,23.55822121,"['Array', 'Sliding Window', 'Sorting', 'Bucket Sort', 'Ordered Set']"
Medium,221,Maximal Square,Algorithms,48.5746458,"['Array', 'Dynamic Programming', 'Matrix']"
Easy,222,Count Complete Tree Nodes,Algorithms,69.60255039,"['Binary Search', 'Bit Manipulation', 'Tree', 'Binary Tree']"
Medium,223,Rectangle Area,Algorithms,47.24415302,"['Math', 'Geometry']"
Hard,224,Basic Calculator,Algorithms,45.37544738,"['Math', 'String', 'Stack', 'Recursion']"
Easy,225,Implement Stack using Queues,Algorithms,67.02444071,"['Stack', 'Design', 'Queue']"
Easy,226,Invert Binary Tree,Algorithms,78.88664327,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,227,Basic Calculator II,Algorithms,45.64939051,"['Math', 'String', 'Stack']"
Easy,228,Summary Ranges,Algorithms,52.9103712,['Array']
Medium,229,Majority Element II,Algorithms,54.12962479,"['Array', 'Hash Table', 'Sorting', 'Counting']"
Medium,230,Kth Smallest Element in a BST,Algorithms,75.11599606,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Easy,231,Power of Two,Algorithms,48.32861743,"['Math', 'Bit Manipulation', 'Recursion']"
Easy,232,Implement Queue using Stacks,Algorithms,67.89042668,"['Stack', 'Design', 'Queue']"
Hard,233,Number of Digit One,Algorithms,35.86785181,"['Math', 'Dynamic Programming', 'Recursion']"
Easy,234,Palindrome Linked List,Algorithms,55.61585915,"['Linked List', 'Two Pointers', 'Stack', 'Recursion']"
Medium,235,Lowest Common Ancestor of a Binary Search Tree,Algorithms,68.01259856,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,236,Lowest Common Ancestor of a Binary Tree,Algorithms,66.40643172,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,237,Delete Node in a Linked List,Algorithms,82.09646415,['Linked List']
Medium,238,Product of Array Except Self,Algorithms,67.63905709,"['Array', 'Prefix Sum']"
Hard,239,Sliding Window Maximum,Algorithms,47.48051353,"['Array', 'Queue', 'Sliding Window', 'Heap (Priority Queue)', 'Monotonic Queue']"
Medium,240,Search a 2D Matrix II,Algorithms,54.9762078,"['Array', 'Binary Search', 'Divide and Conquer', 'Matrix']"
Medium,241,Different Ways to Add Parentheses,Algorithms,72.26778071,"['Math', 'String', 'Dynamic Programming', 'Recursion', 'Memoization']"
Easy,242,Valid Anagram,Algorithms,66.48923582,"['Hash Table', 'String', 'Sorting']"
Easy,243,Shortest Word Distance,Algorithms,65.91965585,"['Array', 'String']"
Medium,244,Shortest Word Distance II,Algorithms,62.08140287,"['Array', 'Hash Table', 'Two Pointers', 'String', 'Design']"
Medium,245,Shortest Word Distance III,Algorithms,59.05368638,"['Array', 'String']"
Easy,246,Strobogrammatic Number,Algorithms,47.59248041,"['Hash Table', 'Two Pointers', 'String']"
Medium,247,Strobogrammatic Number II,Algorithms,53.14089693,"['Array', 'String', 'Recursion']"
Hard,248,Strobogrammatic Number III,Algorithms,42.4143446,"['Array', 'String', 'Recursion']"
Medium,249,Group Shifted Strings,Algorithms,67.28067717,"['Array', 'Hash Table', 'String']"
Medium,250,Count Univalue Subtrees,Algorithms,57.13444054,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,251,Flatten 2D Vector,Algorithms,50.09286129,"['Array', 'Two Pointers', 'Design', 'Iterator']"
Easy,252,Meeting Rooms,Algorithms,58.9059915,"['Array', 'Sorting']"
Medium,253,Meeting Rooms II,Algorithms,52.08633187,"['Array', 'Two Pointers', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Prefix Sum']"
Medium,254,Factor Combinations,Algorithms,50.21134299,['Backtracking']
Medium,255,Verify Preorder Sequence in Binary Search Tree,Algorithms,50.78721138,"['Array', 'Stack', 'Tree', 'Binary Search Tree', 'Recursion', 'Monotonic Stack', 'Binary Tree']"
Medium,256,Paint House,Algorithms,63.65257295,"['Array', 'Dynamic Programming']"
Easy,257,Binary Tree Paths,Algorithms,66.30133866,"['String', 'Backtracking', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,258,Add Digits,Algorithms,67.8203294,"['Math', 'Simulation', 'Number Theory']"
Medium,259,3Sum Smaller,Algorithms,50.97453235,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,260,Single Number III,Algorithms,70.66416701,"['Array', 'Bit Manipulation']"
Medium,261,Graph Valid Tree,Algorithms,49.25547074,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Hard,262,Trips and Users,Database,37.05966772,['Database']
Easy,263,Ugly Number,Algorithms,42.29930047,['Math']
Medium,264,Ugly Number II,Algorithms,49.21745133,"['Hash Table', 'Math', 'Dynamic Programming', 'Heap (Priority Queue)']"
Hard,265,Paint House II,Algorithms,56.31628788,"['Array', 'Dynamic Programming']"
Easy,266,Palindrome Permutation,Algorithms,68.47623655,"['Hash Table', 'String', 'Bit Manipulation']"
Medium,267,Palindrome Permutation II,Algorithms,42.0967705,"['Hash Table', 'String', 'Backtracking']"
Easy,268,Missing Number,Algorithms,69.82003413,"['Array', 'Hash Table', 'Math', 'Binary Search', 'Bit Manipulation', 'Sorting']"
Hard,269,Alien Dictionary,Algorithms,36.60223472,"['Array', 'String', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Easy,270,Closest Binary Search Tree Value,Algorithms,49.86784194,"['Binary Search', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,271,Encode and Decode Strings,Algorithms,49.46997358,"['Array', 'String', 'Design']"
Hard,272,Closest Binary Search Tree Value II,Algorithms,60.19401222,"['Two Pointers', 'Stack', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Heap (Priority Queue)', 'Binary Tree']"
Hard,273,Integer to English Words,Algorithms,34.30890352,"['Math', 'String', 'Recursion']"
Medium,274,H-Index,Algorithms,40.17701043,"['Array', 'Sorting', 'Counting Sort']"
Medium,275,H-Index II,Algorithms,38.78233661,"['Array', 'Binary Search']"
Medium,276,Paint Fence,Algorithms,47.66507638,['Dynamic Programming']
Medium,277,Find the Celebrity,Algorithms,48.3760303,"['Two Pointers', 'Graph', 'Interactive']"
Easy,278,First Bad Version,Algorithms,45.79941747,"['Binary Search', 'Interactive']"
Medium,279,Perfect Squares,Algorithms,55.58919361,"['Math', 'Dynamic Programming', 'Breadth-First Search']"
Medium,280,Wiggle Sort,Algorithms,68.16769281,"['Array', 'Greedy', 'Sorting']"
Medium,281,Zigzag Iterator,Algorithms,65.59524635,"['Array', 'Design', 'Queue', 'Iterator']"
Hard,282,Expression Add Operators,Algorithms,41.48755823,"['Math', 'String', 'Backtracking']"
Easy,283,Move Zeroes,Algorithms,62.72924907,"['Array', 'Two Pointers']"
Medium,284,Peeking Iterator,Algorithms,60.25556453,"['Array', 'Design', 'Iterator']"
Medium,285,Inorder Successor in BST,Algorithms,50.61790762,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,286,Walls and Gates,Algorithms,62.8282185,"['Array', 'Breadth-First Search', 'Matrix']"
Medium,287,Find the Duplicate Number,Algorithms,62.65496227,"['Array', 'Two Pointers', 'Binary Search', 'Bit Manipulation']"
Medium,288,Unique Word Abbreviation,Algorithms,26.9944623,"['Array', 'Hash Table', 'String', 'Design']"
Medium,289,Game of Life,Algorithms,71.25993256,"['Array', 'Matrix', 'Simulation']"
Easy,290,Word Pattern,Algorithms,42.98343205,"['Hash Table', 'String']"
Medium,291,Word Pattern II,Algorithms,48.58891371,"['Hash Table', 'String', 'Backtracking']"
Easy,292,Nim Game,Algorithms,58.02174267,"['Math', 'Brainteaser', 'Game Theory']"
Easy,293,Flip Game,Algorithms,64.87284632,['String']
Medium,294,Flip Game II,Algorithms,52.20223764,"['Math', 'Dynamic Programming', 'Backtracking', 'Memoization', 'Game Theory']"
Hard,295,Find Median from Data Stream,Algorithms,53.13144993,"['Two Pointers', 'Design', 'Sorting', 'Heap (Priority Queue)', 'Data Stream']"
Hard,296,Best Meeting Point,Algorithms,61.24408276,"['Array', 'Math', 'Sorting', 'Matrix']"
Hard,297,Serialize and Deserialize Binary Tree,Algorithms,58.75168252,"['String', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Design', 'Binary Tree']"
Medium,298,Binary Tree Longest Consecutive Sequence,Algorithms,54.07332541,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,299,Bulls and Cows,Algorithms,51.27258346,"['Hash Table', 'String', 'Counting']"
Medium,300,Longest Increasing Subsequence,Algorithms,57.57901324,"['Array', 'Binary Search', 'Dynamic Programming']"
Hard,301,Remove Invalid Parentheses,Algorithms,49.11838137,"['String', 'Backtracking', 'Breadth-First Search']"
Hard,302,Smallest Rectangle Enclosing Black Pixels,Algorithms,60.57382053,"['Array', 'Binary Search', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Easy,303,Range Sum Query - Immutable,Algorithms,68.07736694,"['Array', 'Design', 'Prefix Sum']"
Medium,304,Range Sum Query 2D - Immutable,Algorithms,56.33371908,"['Array', 'Design', 'Matrix', 'Prefix Sum']"
Hard,305,Number of Islands II,Algorithms,40.08873084,"['Array', 'Hash Table', 'Union Find']"
Medium,306,Additive Number,Algorithms,32.45252917,"['String', 'Backtracking']"
Medium,307,Range Sum Query - Mutable,Algorithms,41.64344277,"['Array', 'Design', 'Binary Indexed Tree', 'Segment Tree']"
Medium,308,Range Sum Query 2D - Mutable,Algorithms,44.83409795,"['Array', 'Design', 'Binary Indexed Tree', 'Segment Tree', 'Matrix']"
Medium,309,Best Time to Buy and Sell Stock with Cooldown,Algorithms,60.14166515,"['Array', 'Dynamic Programming']"
Medium,310,Minimum Height Trees,Algorithms,41.95187126,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Medium,311,Sparse Matrix Multiplication,Algorithms,68.88208481,"['Array', 'Hash Table', 'Matrix']"
Hard,312,Burst Balloons,Algorithms,61.01633625,"['Array', 'Dynamic Programming']"
Medium,313,Super Ugly Number,Algorithms,45.42999122,"['Array', 'Math', 'Dynamic Programming']"
Medium,314,Binary Tree Vertical Order Traversal,Algorithms,57.00254119,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Sorting', 'Binary Tree']"
Hard,315,Count of Smaller Numbers After Self,Algorithms,42.82759232,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Medium,316,Remove Duplicate Letters,Algorithms,51.19924236,"['String', 'Stack', 'Greedy', 'Monotonic Stack']"
Hard,317,Shortest Distance from All Buildings,Algorithms,44.26175564,"['Array', 'Breadth-First Search', 'Matrix']"
Medium,318,Maximum Product of Word Lengths,Algorithms,60.48272366,"['Array', 'String', 'Bit Manipulation']"
Medium,319,Bulb Switcher,Algorithms,53.97147774,"['Math', 'Brainteaser']"
Medium,320,Generalized Abbreviation,Algorithms,60.0089058,"['String', 'Backtracking', 'Bit Manipulation']"
Hard,321,Create Maximum Number,Algorithms,32.25577506,"['Array', 'Two Pointers', 'Stack', 'Greedy', 'Monotonic Stack']"
Medium,322,Coin Change,Algorithms,46.25940463,"['Array', 'Dynamic Programming', 'Breadth-First Search']"
Medium,323,Number of Connected Components in an Undirected Graph,Algorithms,64.10761629,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Medium,324,Wiggle Sort II,Algorithms,35.52765356,"['Array', 'Divide and Conquer', 'Greedy', 'Sorting', 'Quickselect']"
Medium,325,Maximum Size Subarray Sum Equals k,Algorithms,50.58020823,"['Array', 'Hash Table', 'Prefix Sum']"
Easy,326,Power of Three,Algorithms,47.89365201,"['Math', 'Recursion']"
Hard,327,Count of Range Sum,Algorithms,36.91187616,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Medium,328,Odd Even Linked List,Algorithms,61.95256437,['Linked List']
Hard,329,Longest Increasing Path in a Matrix,Algorithms,55.19567339,"['Array', 'Dynamic Programming', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort', 'Memoization', 'Matrix']"
Hard,330,Patching Array,Algorithms,53.44955172,"['Array', 'Greedy']"
Medium,331,Verify Preorder Serialization of a Binary Tree,Algorithms,46.0696383,"['String', 'Stack', 'Tree', 'Binary Tree']"
Hard,332,Reconstruct Itinerary,Algorithms,43.53439762,"['Depth-First Search', 'Graph', 'Eulerian Circuit']"
Medium,333,Largest BST Subtree,Algorithms,45.26045542,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,334,Increasing Triplet Subsequence,Algorithms,39.13516225,"['Array', 'Greedy']"
Hard,335,Self Crossing,Algorithms,31.93411946,"['Array', 'Math', 'Geometry']"
Hard,336,Palindrome Pairs,Algorithms,36.15826065,"['Array', 'Hash Table', 'String', 'Trie']"
Medium,337,House Robber III,Algorithms,54.86296353,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,338,Counting Bits,Algorithms,79.61651962,"['Dynamic Programming', 'Bit Manipulation']"
Medium,339,Nested List Weight Sum,Algorithms,85.46070034,"['Depth-First Search', 'Breadth-First Search']"
Medium,340,Longest Substring with At Most K Distinct Characters,Algorithms,49.43292156,"['Hash Table', 'String', 'Sliding Window']"
Medium,341,Flatten Nested List Iterator,Algorithms,65.17913874,"['Stack', 'Tree', 'Depth-First Search', 'Design', 'Queue', 'Iterator']"
Easy,342,Power of Four,Algorithms,49.34496653,"['Math', 'Bit Manipulation', 'Recursion']"
Medium,343,Integer Break,Algorithms,61.06932605,"['Math', 'Dynamic Programming']"
Easy,344,Reverse String,Algorithms,79.66377842,"['Two Pointers', 'String']"
Easy,345,Reverse Vowels of a String,Algorithms,57.83144122,"['Two Pointers', 'String']"
Easy,346,Moving Average from Data Stream,Algorithms,79.86022126,"['Array', 'Design', 'Queue', 'Data Stream']"
Medium,347,Top K Frequent Elements,Algorithms,64.40407287,"['Array', 'Hash Table', 'Divide and Conquer', 'Sorting', 'Heap (Priority Queue)', 'Bucket Sort', 'Counting', 'Quickselect']"
Medium,348,Design Tic-Tac-Toe,Algorithms,58.56551639,"['Array', 'Hash Table', 'Design', 'Matrix', 'Simulation']"
Easy,349,Intersection of Two Arrays,Algorithms,76.32281471,"['Array', 'Hash Table', 'Two Pointers', 'Binary Search', 'Sorting']"
Easy,350,Intersection of Two Arrays II,Algorithms,59.00205395,"['Array', 'Hash Table', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,351,Android Unlock Patterns,Algorithms,53.30178676,"['Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,352,Data Stream as Disjoint Intervals,Algorithms,59.46726138,"['Binary Search', 'Design', 'Ordered Set']"
Medium,353,Design Snake Game,Algorithms,39.60206588,"['Array', 'Hash Table', 'Design', 'Queue', 'Simulation']"
Hard,354,Russian Doll Envelopes,Algorithms,37.30080664,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting']"
Medium,355,Design Twitter,Algorithms,42.39444563,"['Hash Table', 'Linked List', 'Design', 'Heap (Priority Queue)']"
Medium,356,Line Reflection,Algorithms,35.94805024,"['Array', 'Hash Table', 'Math']"
Medium,357,Count Numbers with Unique Digits,,,
Hard,358,Rearrange String k Distance Apart,Algorithms,39.34369798,"['Hash Table', 'String', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Counting']"
Easy,359,Logger Rate Limiter,Algorithms,76.57251641,"['Hash Table', 'Design', 'Data Stream']"
Medium,360,Sort Transformed Array,Algorithms,56.98224852,"['Array', 'Math', 'Two Pointers', 'Sorting']"
Medium,361,Bomb Enemy,Algorithms,52.38296637,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,362,Design Hit Counter,Algorithms,69.14189994,"['Array', 'Binary Search', 'Design', 'Queue', 'Data Stream']"
Hard,363,Max Sum of Rectangle No Larger Than K,Algorithms,44.61745946,"['Array', 'Binary Search', 'Matrix', 'Prefix Sum', 'Ordered Set']"
Medium,364,Nested List Weight Sum II,Algorithms,65.44622524,"['Stack', 'Depth-First Search', 'Breadth-First Search']"
Medium,365,Water and Jug Problem,Algorithms,42.91722757,"['Math', 'Depth-First Search', 'Breadth-First Search']"
Medium,366,Find Leaves of Binary Tree,Algorithms,81.04352378,"['Tree', 'Depth-First Search', 'Binary Tree']"
Easy,367,Valid Perfect Square,Algorithms,44.14319958,"['Math', 'Binary Search']"
Medium,368,Largest Divisible Subset,Algorithms,48.76322517,"['Array', 'Math', 'Dynamic Programming', 'Sorting']"
Medium,369,Plus One Linked List,Algorithms,61.14199785,"['Linked List', 'Math']"
Medium,370,Range Addition,Algorithms,72.26535855,"['Array', 'Prefix Sum']"
Medium,371,Sum of Two Integers,Algorithms,53.5032355,"['Math', 'Bit Manipulation']"
Medium,372,Super Pow,Algorithms,35.42626179,"['Math', 'Divide and Conquer']"
Medium,373,Find K Pairs with Smallest Sums,Algorithms,40.6153635,"['Array', 'Heap (Priority Queue)']"
Easy,374,Guess Number Higher or Lower,Algorithms,55.59915117,"['Binary Search', 'Interactive']"
Medium,375,Guess Number Higher or Lower II,Algorithms,50.97175898,"['Math', 'Dynamic Programming', 'Game Theory']"
Medium,376,Wiggle Subsequence,Algorithms,48.8134201,"['Array', 'Dynamic Programming', 'Greedy']"
Medium,377,Combination Sum IV,Algorithms,54.6171606,"['Array', 'Dynamic Programming']"
Medium,378,Kth Smallest Element in a Sorted Matrix,Algorithms,63.45346908,"['Array', 'Binary Search', 'Sorting', 'Heap (Priority Queue)', 'Matrix']"
Medium,379,Design Phone Directory,Algorithms,52.3128773,"['Array', 'Hash Table', 'Linked List', 'Design', 'Queue']"
Medium,380,Insert Delete GetRandom O(1),Algorithms,54.9316639,"['Array', 'Hash Table', 'Math', 'Design', 'Randomized']"
Hard,381,Insert Delete GetRandom O(1) - Duplicates allowed,Algorithms,35.72381006,"['Array', 'Hash Table', 'Math', 'Design', 'Randomized']"
Medium,382,Linked List Random Node,Algorithms,63.90835495,"['Linked List', 'Math', 'Reservoir Sampling', 'Randomized']"
Easy,383,Ransom Note,Algorithms,64.34441356,"['Hash Table', 'String', 'Counting']"
Medium,384,Shuffle an Array,Algorithms,58.97071924,"['Array', 'Math', 'Design', 'Randomized']"
Medium,385,Mini Parser,Algorithms,39.99850487,"['String', 'Stack', 'Depth-First Search']"
Medium,386,Lexicographical Numbers,Algorithms,73.09392235,"['Depth-First Search', 'Trie']"
Easy,387,First Unique Character in a String,Algorithms,63.53647901,"['Hash Table', 'String', 'Queue', 'Counting']"
Medium,388,Longest Absolute File Path,Algorithms,48.29365873,"['String', 'Stack', 'Depth-First Search']"
Easy,389,Find the Difference,Algorithms,59.70212537,"['Hash Table', 'String', 'Bit Manipulation', 'Sorting']"
Medium,390,Elimination Game,Algorithms,44.74517252,"['Math', 'Recursion']"
Hard,391,Perfect Rectangle,Algorithms,35.05767869,"['Array', 'Line Sweep']"
Easy,392,Is Subsequence,Algorithms,48.32454681,"['Two Pointers', 'String', 'Dynamic Programming']"
Medium,393,UTF-8 Validation,Algorithms,45.48340469,"['Array', 'Bit Manipulation']"
Medium,394,Decode String,Algorithms,60.99507801,"['String', 'Stack', 'Recursion']"
Medium,395,Longest Substring with At Least K Repeating Characters,Algorithms,45.41416043,"['Hash Table', 'String', 'Divide and Conquer', 'Sliding Window']"
Medium,396,Rotate Function,Algorithms,43.8934259,"['Array', 'Math', 'Dynamic Programming']"
Medium,397,Integer Replacement,Algorithms,36.44443167,"['Dynamic Programming', 'Greedy', 'Bit Manipulation', 'Memoization']"
Medium,398,Random Pick Index,Algorithms,64.44663228,"['Hash Table', 'Math', 'Reservoir Sampling', 'Randomized']"
Medium,399,Evaluate Division,Algorithms,63.00642596,"['Array', 'String', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph', 'Shortest Path']"
Medium,400,Nth Digit,Algorithms,35.59596038,"['Math', 'Binary Search']"
Easy,401,Binary Watch,Algorithms,56.37187295,"['Backtracking', 'Bit Manipulation']"
Medium,402,Remove K Digits,Algorithms,34.74051036,"['String', 'Stack', 'Greedy', 'Monotonic Stack']"
Hard,403,Frog Jump,Algorithms,46.49799093,"['Array', 'Dynamic Programming']"
Easy,404,Sum of Left Leaves,Algorithms,61.56454521,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,405,Convert a Number to Hexadecimal,Algorithms,50.69570565,"['Math', 'Bit Manipulation']"
Medium,406,Queue Reconstruction by Height,Algorithms,74.11549336,"['Array', 'Binary Indexed Tree', 'Segment Tree', 'Sorting']"
Hard,407,Trapping Rain Water II,Algorithms,58.77355794,"['Array', 'Breadth-First Search', 'Heap (Priority Queue)', 'Matrix']"
Easy,408,Valid Word Abbreviation,Algorithms,36.79685619,"['Two Pointers', 'String']"
Easy,409,Longest Palindrome,Algorithms,55.51833979,"['Hash Table', 'String', 'Greedy']"
Hard,410,Split Array Largest Sum,Algorithms,57.79752968,"['Array', 'Binary Search', 'Dynamic Programming', 'Greedy', 'Prefix Sum']"
Hard,411,Minimum Unique Word Abbreviation,Algorithms,40.11449279,"['Array', 'String', 'Backtracking', 'Bit Manipulation']"
Easy,412,Fizz Buzz,Algorithms,74.24257378,"['Math', 'String', 'Simulation']"
Medium,413,Arithmetic Slices,Algorithms,64.8269558,"['Array', 'Dynamic Programming', 'Sliding Window']"
Easy,414,Third Maximum Number,Algorithms,37.02588415,"['Array', 'Sorting']"
Easy,415,Add Strings,Algorithms,51.86827325,"['Math', 'String', 'Simulation']"
Medium,416,Partition Equal Subset Sum,Algorithms,48.28454166,"['Array', 'Dynamic Programming']"
Medium,417,Pacific Atlantic Water Flow,Algorithms,57.30326194,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Medium,418,Sentence Screen Fitting,Algorithms,36.33183875,"['Array', 'String', 'Dynamic Programming']"
Medium,419,Battleships in a Board,Algorithms,76.44585477,"['Array', 'Depth-First Search', 'Matrix']"
Hard,420,Strong Password Checker,Algorithms,14.54240695,"['String', 'Greedy', 'Heap (Priority Queue)']"
Medium,421,Maximum XOR of Two Numbers in an Array,Algorithms,53.17841513,"['Array', 'Hash Table', 'Bit Manipulation', 'Trie']"
Easy,422,Valid Word Square,Algorithms,41.95439613,"['Array', 'Matrix']"
Medium,423,Reconstruct Original Digits from English,Algorithms,51.55542062,"['Hash Table', 'Math', 'String']"
Medium,424,Longest Repeating Character Replacement,Algorithms,56.92548571,"['Hash Table', 'String', 'Sliding Window']"
Hard,425,Word Squares,Algorithms,53.9070438,"['Array', 'String', 'Backtracking', 'Trie']"
Medium,426,Convert Binary Search Tree to Sorted Doubly Linked List,Algorithms,65.45998235,"['Linked List', 'Stack', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree', 'Doubly-Linked List']"
Medium,427,Construct Quad Tree,Algorithms,76.97542462,"['Array', 'Divide and Conquer', 'Tree', 'Matrix']"
Hard,428,Serialize and Deserialize N-ary Tree,Algorithms,68.20549192,"['String', 'Tree', 'Depth-First Search', 'Breadth-First Search']"
Medium,429,N-ary Tree Level Order Traversal,Algorithms,71.22040457,"['Tree', 'Breadth-First Search']"
Medium,430,Flatten a Multilevel Doubly Linked List,Algorithms,61.18225679,"['Linked List', 'Depth-First Search', 'Doubly-Linked List']"
Hard,431,Encode N-ary Tree to Binary Tree,Algorithms,80.08014127,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Design', 'Binary Tree']"
Hard,432,All O`one Data Structure,Algorithms,44.16051585,"['Hash Table', 'Linked List', 'Design', 'Doubly-Linked List']"
Medium,433,Minimum Genetic Mutation,Algorithms,55.32049389,"['Hash Table', 'String', 'Breadth-First Search']"
Easy,434,Number of Segments in a String,Algorithms,36.34266908,['String']
Medium,435,Non-overlapping Intervals,Algorithms,55.30745492,"['Array', 'Dynamic Programming', 'Greedy', 'Sorting']"
Medium,436,Find Right Interval,Algorithms,53.71709849,"['Array', 'Binary Search', 'Sorting']"
Medium,437,Path Sum III,Algorithms,46.06568751,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,438,Find All Anagrams in a String,Algorithms,52.0827435,"['Hash Table', 'String', 'Sliding Window']"
Medium,439,Ternary Expression Parser,Algorithms,61.94217687,"['String', 'Stack', 'Recursion']"
Hard,440,K-th Smallest in Lexicographical Order,Algorithms,41.99771728,['Trie']
Easy,441,Arranging Coins,Algorithms,47.28342651,"['Math', 'Binary Search']"
Medium,442,Find All Duplicates in an Array,Algorithms,76.34636184,"['Array', 'Hash Table']"
Medium,443,String Compression,Algorithms,57.85440587,"['Two Pointers', 'String']"
Medium,444,Sequence Reconstruction,Algorithms,29.37703633,"['Array', 'Graph', 'Topological Sort']"
Medium,445,Add Two Numbers II,Algorithms,61.68834763,"['Linked List', 'Math', 'Stack']"
Hard,446,Arithmetic Slices II - Subsequence,Algorithms,54.53045672,"['Array', 'Dynamic Programming']"
Medium,447,Number of Boomerangs,Algorithms,56.32031424,"['Array', 'Hash Table', 'Math']"
Easy,448,Find All Numbers Disappeared in an Array,Algorithms,62.30346161,"['Array', 'Hash Table']"
Medium,449,Serialize and Deserialize BST,Algorithms,58.50495225,"['String', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Design', 'Binary Search Tree', 'Binary Tree']"
Medium,450,Delete Node in a BST,Algorithms,52.85509567,"['Tree', 'Binary Search Tree', 'Binary Tree']"
Medium,451,Sort Characters By Frequency,Algorithms,73.91447738,"['Hash Table', 'String', 'Sorting', 'Heap (Priority Queue)', 'Bucket Sort', 'Counting']"
Medium,452,Minimum Number of Arrows to Burst Balloons,Algorithms,60.28413372,"['Array', 'Greedy', 'Sorting']"
Medium,453,Minimum Moves to Equal Array Elements,Algorithms,57.64960721,"['Array', 'Math']"
Medium,454,4Sum II,Algorithms,57.55183168,"['Array', 'Hash Table']"
Easy,455,Assign Cookies,Algorithms,53.69403798,"['Array', 'Two Pointers', 'Greedy', 'Sorting']"
Medium,456,132 Pattern,Algorithms,34.01647816,"['Array', 'Binary Search', 'Stack', 'Monotonic Stack', 'Ordered Set']"
Medium,457,Circular Array Loop,Algorithms,35.46919757,"['Array', 'Hash Table', 'Two Pointers']"
Hard,458,Poor Pigs,Algorithms,59.23340327,"['Math', 'Dynamic Programming', 'Combinatorics']"
Easy,459,Repeated Substring Pattern,Algorithms,46.79307409,"['String', 'String Matching']"
Hard,460,LFU Cache,Algorithms,46.31220885,"['Hash Table', 'Linked List', 'Design', 'Doubly-Linked List']"
Easy,461,Hamming Distance,Algorithms,76.03682187,['Bit Manipulation']
Medium,462,Minimum Moves to Equal Array Elements II,Algorithms,60.88858064,"['Array', 'Math', 'Sorting']"
Easy,463,Island Perimeter,Algorithms,73.45897306,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Medium,464,Can I Win,Algorithms,30.31129314,"['Math', 'Dynamic Programming', 'Bit Manipulation', 'Memoization', 'Game Theory', 'Bitmask']"
Hard,465,Optimal Account Balancing,Algorithms,49.84992184,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,466,Count The Repetitions,Algorithms,31.64452409,"['String', 'Dynamic Programming']"
Medium,467,Unique Substrings in Wraparound String,Algorithms,41.07664054,"['String', 'Dynamic Programming']"
Medium,468,Validate IP Address,Algorithms,27.76889732,['String']
Medium,469,Convex Polygon,Algorithms,39.83892713,"['Array', 'Math', 'Geometry']"
Medium,470,Implement Rand10() Using Rand7(),Algorithms,45.84301661,"['Math', 'Rejection Sampling', 'Randomized', 'Probability and Statistics']"
Hard,471,Encode String with Shortest Length,Algorithms,50.46147448,"['String', 'Dynamic Programming']"
Hard,472,Concatenated Words,Algorithms,49.40621282,"['Array', 'String', 'Dynamic Programming', 'Depth-First Search', 'Trie']"
Medium,473,Matchsticks to Square,Algorithms,40.83134464,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Medium,474,Ones and Zeroes,Algorithms,48.72046271,"['Array', 'String', 'Dynamic Programming']"
Medium,475,Heaters,Algorithms,39.79912502,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Easy,476,Number Complement,Algorithms,70.32017409,['Bit Manipulation']
Medium,477,Total Hamming Distance,Algorithms,53.65939728,"['Array', 'Math', 'Bit Manipulation']"
Medium,478,Generate Random Point in a Circle,Algorithms,40.85157274,"['Math', 'Geometry', 'Rejection Sampling', 'Randomized']"
Hard,479,Largest Palindrome Product,Algorithms,34.90779358,"['Math', 'Enumeration']"
Hard,480,Sliding Window Median,Algorithms,38.63606012,"['Array', 'Hash Table', 'Sliding Window', 'Heap (Priority Queue)']"
Medium,481,Magical String,Algorithms,52.31921531,"['Two Pointers', 'String']"
Easy,482,License Key Formatting,Algorithms,44.62303822,['String']
Hard,483,Smallest Good Base,Algorithms,43.20437645,"['Math', 'Binary Search']"
Medium,484,Find Permutation,Algorithms,66.90890382,"['Array', 'String', 'Stack', 'Greedy']"
Easy,485,Max Consecutive Ones,Algorithms,62.22001103,['Array']
Medium,486,Predict the Winner,Algorithms,55.6624861,"['Array', 'Math', 'Dynamic Programming', 'Recursion', 'Game Theory']"
Medium,487,Max Consecutive Ones II,Algorithms,51.49281428,"['Array', 'Dynamic Programming', 'Sliding Window']"
Hard,488,Zuma Game,Algorithms,31.60365405,"['String', 'Dynamic Programming', 'Stack', 'Breadth-First Search', 'Memoization']"
Hard,489,Robot Room Cleaner,Algorithms,77.4278611,"['Backtracking', 'Interactive']"
Medium,490,The Maze,Algorithms,59.36591859,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Medium,491,Non-decreasing Subsequences,Algorithms,61.57130155,"['Array', 'Hash Table', 'Backtracking', 'Bit Manipulation']"
Easy,492,Construct the Rectangle,Algorithms,60.45115929,['Math']
Hard,493,Reverse Pairs,Algorithms,31.95601763,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Medium,494,Target Sum,Algorithms,50.59508028,"['Array', 'Dynamic Programming', 'Backtracking']"
Easy,495,Teemo Attacking,Algorithms,56.91081361,"['Array', 'Simulation']"
Easy,496,Next Greater Element I,Algorithms,74.29433689,"['Array', 'Hash Table', 'Stack', 'Monotonic Stack']"
Medium,497,Random Point in Non-overlapping Rectangles,Algorithms,37.97633832,"['Array', 'Math', 'Binary Search', 'Reservoir Sampling', 'Prefix Sum', 'Ordered Set', 'Randomized']"
Medium,498,Diagonal Traverse,Algorithms,62.96871482,"['Array', 'Matrix', 'Simulation']"
Hard,499,The Maze III,Algorithms,50.55369269,"['Array', 'String', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']"
Easy,500,Keyboard Row,Algorithms,72.33892261,"['Array', 'Hash Table', 'String']"
Easy,501,Find Mode in Binary Search Tree,Algorithms,57.40519883,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Hard,502,IPO,Algorithms,53.00505409,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Medium,503,Next Greater Element II,Algorithms,66.02750004,"['Array', 'Stack', 'Monotonic Stack']"
Easy,504,Base 7,Algorithms,51.79699798,['Math']
Medium,505,The Maze II,Algorithms,54.11709585,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']"
Easy,506,Relative Ranks,Algorithms,73.16413629,"['Array', 'Sorting', 'Heap (Priority Queue)']"
Easy,507,Perfect Number,Algorithms,44.56901529,['Math']
Medium,508,Most Frequent Subtree Sum,Algorithms,67.74520235,"['Hash Table', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,509,Fibonacci Number,Algorithms,72.79784671,"['Math', 'Dynamic Programming', 'Recursion', 'Memoization']"
Medium,510,Inorder Successor in BST II,Algorithms,60.97517924,"['Tree', 'Binary Search Tree', 'Binary Tree']"
Easy,511,Game Play Analysis I,Database,75.65113217,['Database']
Easy,512,Game Play Analysis II,Database,53.90842873,['Database']
Medium,513,Find Bottom Left Tree Value,Algorithms,71.70861486,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,514,Freedom Trail,Algorithms,58.83558378,"['String', 'Dynamic Programming', 'Depth-First Search', 'Breadth-First Search']"
Medium,515,Find Largest Value in Each Tree Row,Algorithms,66.27357739,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,516,Longest Palindromic Subsequence,Algorithms,63.93320447,"['String', 'Dynamic Programming']"
Hard,517,Super Washing Machines,Algorithms,42.37485882,"['Array', 'Greedy']"
Medium,518,Coin Change II,Algorithms,62.68646946,"['Array', 'Dynamic Programming']"
Medium,519,Random Flip Matrix,Algorithms,43.38219022,"['Hash Table', 'Math', 'Reservoir Sampling', 'Randomized']"
Easy,520,Detect Capital,Algorithms,56.13633222,['String']
Easy,521,Longest Uncommon Subsequence I,Algorithms,61.30474304,['String']
Medium,522,Longest Uncommon Subsequence II,Algorithms,42.92270723,"['Array', 'Hash Table', 'Two Pointers', 'String', 'Sorting']"
Medium,523,Continuous Subarray Sum,Algorithms,30.8581301,"['Array', 'Hash Table', 'Math', 'Prefix Sum']"
Medium,524,Longest Word in Dictionary through Deleting,Algorithms,51.71293371,"['Array', 'Two Pointers', 'String', 'Sorting']"
Medium,525,Contiguous Array,Algorithms,49.19439389,"['Array', 'Hash Table', 'Prefix Sum']"
Medium,526,Beautiful Arrangement,Algorithms,64.49386604,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,527,Word Abbreviation,Algorithms,61.82340302,"['Array', 'String', 'Greedy', 'Trie', 'Sorting']"
Medium,528,Random Pick with Weight,Algorithms,48.16897953,"['Array', 'Math', 'Binary Search', 'Prefix Sum', 'Randomized']"
Medium,529,Minesweeper,Algorithms,67.99241728,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Easy,530,Minimum Absolute Difference in BST,Algorithms,58.76254982,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,531,Lonely Pixel I,Algorithms,62.46877037,"['Array', 'Hash Table', 'Matrix']"
Medium,532,K-diff Pairs in an Array,Algorithms,44.52420849,"['Array', 'Hash Table', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,533,Lonely Pixel II,Algorithms,48.68034164,"['Array', 'Hash Table', 'Matrix']"
Medium,534,Game Play Analysis III,Database,81.24007688,['Database']
Medium,535,Encode and Decode TinyURL,Algorithms,86.32268137,"['Hash Table', 'String', 'Design', 'Hash Function']"
Medium,536,Construct Binary Tree from String,Algorithms,58.30807574,"['String', 'Stack', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,537,Complex Number Multiplication,Algorithms,72.33121896,"['Math', 'String', 'Simulation']"
Medium,538,Convert BST to Greater Tree,Algorithms,70.40074349,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,539,Minimum Time Difference,Algorithms,62.32663695,"['Array', 'Math', 'String', 'Sorting']"
Medium,540,Single Element in a Sorted Array,Algorithms,59.19269129,"['Array', 'Binary Search']"
Easy,541,Reverse String II,Algorithms,51.98058262,"['Two Pointers', 'String']"
Medium,542,01 Matrix,Algorithms,51.16068597,"['Array', 'Dynamic Programming', 'Breadth-First Search', 'Matrix']"
Easy,543,Diameter of Binary Tree,Algorithms,63.32769475,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,544,Output Contest Matches,Algorithms,77.37811304,"['String', 'Recursion', 'Simulation']"
Medium,545,Boundary of Binary Tree,Algorithms,47.04399736,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,546,Remove Boxes,Algorithms,48.25039307,"['Array', 'Dynamic Programming', 'Memoization']"
Medium,547,Number of Provinces,Algorithms,68.40079133,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Hard,548,Split Array with Equal Sum,Algorithms,50.12864494,"['Array', 'Hash Table', 'Prefix Sum']"
Medium,549,Binary Tree Longest Consecutive Sequence II,Algorithms,49.56220214,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,550,Game Play Analysis IV,Database,39.29748671,['Database']
Easy,551,Student Attendance Record I,Algorithms,49.58353356,['String']
Hard,552,Student Attendance Record II,Algorithms,55.73679793,['Dynamic Programming']
Medium,553,Optimal Division,Algorithms,61.62480536,"['Array', 'Math', 'Dynamic Programming']"
Medium,554,Brick Wall,Algorithms,55.82579888,"['Array', 'Hash Table']"
Medium,555,Split Concatenated Strings,Algorithms,43.3047573,"['Array', 'String', 'Greedy']"
Medium,556,Next Greater Element III,Algorithms,34.51875311,"['Math', 'Two Pointers', 'String']"
Easy,557,Reverse Words in a String III,Algorithms,83.62189731,"['Two Pointers', 'String']"
Medium,558,Logical OR of Two Binary Grids Represented as Quad-Trees,Algorithms,50.42221694,"['Divide and Conquer', 'Tree']"
Easy,559,Maximum Depth of N-ary Tree,Algorithms,72.86206387,"['Tree', 'Depth-First Search', 'Breadth-First Search']"
Medium,560,Subarray Sum Equals K,Algorithms,45.30085376,"['Array', 'Hash Table', 'Prefix Sum']"
Easy,561,Array Partition,Algorithms,80.31842358,"['Array', 'Greedy', 'Sorting', 'Counting Sort']"
Medium,562,Longest Line of Consecutive One in Matrix,Algorithms,50.51583203,"['Array', 'Dynamic Programming', 'Matrix']"
Easy,563,Binary Tree Tilt,Algorithms,63.87354491,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,564,Find the Closest Palindrome,Algorithms,31.60355003,"['Math', 'String']"
Medium,565,Array Nesting,Algorithms,55.94525887,"['Array', 'Depth-First Search']"
Easy,566,Reshape the Matrix,Algorithms,63.81354657,"['Array', 'Matrix', 'Simulation']"
Medium,567,Permutation in String,Algorithms,47.09424231,"['Hash Table', 'Two Pointers', 'String', 'Sliding Window']"
Hard,568,Maximum Vacation Days,Algorithms,46.31965438,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,569,Median Employee Salary,Database,66.25827003,['Database']
Medium,570,Managers with at Least 5 Direct Reports,Database,48.94614091,['Database']
Hard,571,Find Median Given Frequency of Numbers,Database,42.53507273,['Database']
Easy,572,Subtree of Another Tree,Algorithms,49.80317009,"['Tree', 'Depth-First Search', 'String Matching', 'Binary Tree', 'Hash Function']"
Medium,573,Squirrel Simulation,Algorithms,57.23781928,"['Array', 'Math']"
Medium,574,Winning Candidate,Database,61.91703348,['Database']
Easy,575,Distribute Candies,Algorithms,69.37932923,"['Array', 'Hash Table']"
Medium,576,Out of Boundary Paths,Algorithms,48.12951999,['Dynamic Programming']
Easy,577,Employee Bonus,Database,77.12440986,['Database']
Medium,578,Get Highest Answer Rate Question,Database,40.23864766,['Database']
Hard,579,Find Cumulative Salary of an Employee,Database,48.77431502,['Database']
Medium,580,Count Student Number in Departments,Database,59.72682388,['Database']
Medium,581,Shortest Unsorted Continuous Subarray,Algorithms,37.36634772,"['Array', 'Two Pointers', 'Stack', 'Greedy', 'Sorting', 'Monotonic Stack']"
Medium,582,Kill Process,Algorithms,70.05357754,"['Array', 'Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search']"
Medium,583,Delete Operation for Two Strings,Algorithms,63.46701517,"['String', 'Dynamic Programming']"
Easy,584,Find Customer Referee,Database,71.73923716,['Database']
Medium,585,Investments in 2016,Database,49.95974274,['Database']
Easy,586,Customer Placing the Largest Number of Orders,Database,64.40504065,['Database']
Hard,587,Erect the Fence,Algorithms,52.1415411,"['Array', 'Math', 'Geometry']"
Hard,588,Design In-Memory File System,Algorithms,48.12038111,"['Hash Table', 'String', 'Design', 'Trie', 'Sorting']"
Easy,589,N-ary Tree Preorder Traversal,Algorithms,76.15351784,"['Stack', 'Tree', 'Depth-First Search']"
Easy,590,N-ary Tree Postorder Traversal,Algorithms,80.62828603,"['Stack', 'Tree', 'Depth-First Search']"
Hard,591,Tag Validator,Algorithms,38.89290962,"['String', 'Stack']"
Medium,592,Fraction Addition and Subtraction,Algorithms,66.15030836,"['Math', 'String', 'Simulation']"
Medium,593,Valid Square,Algorithms,44.22004561,"['Math', 'Geometry']"
Easy,594,Longest Harmonious Subsequence,Algorithms,56.96515715,"['Array', 'Hash Table', 'Sliding Window', 'Sorting', 'Counting']"
Easy,595,Big Countries,Database,68.19453439,['Database']
Easy,596,Classes More Than 5 Students,Database,60.39753093,['Database']
Easy,597,Friend Requests I: Overall Acceptance Rate,Database,41.42189654,['Database']
Easy,598,Range Addition II,Algorithms,57.20174707,"['Array', 'Math']"
Easy,599,Minimum Index Sum of Two Lists,Algorithms,57.7792549,"['Array', 'Hash Table', 'String']"
Hard,600,Non-negative Integers without Consecutive Ones,Algorithms,40.19745865,['Dynamic Programming']
Hard,601,Human Traffic of Stadium,Database,49.71350509,['Database']
Medium,602,Friend Requests II: Who Has the Most Friends,Database,60.64270035,['Database']
Easy,603,Consecutive Available Seats,Database,65.39434838,['Database']
Easy,604,Design Compressed String Iterator,Algorithms,40.15584585,"['Array', 'String', 'Design', 'Iterator']"
Easy,605,Can Place Flowers,Algorithms,28.87109347,"['Array', 'Greedy']"
Medium,606,Construct String from Binary Tree,Algorithms,70.0291953,"['String', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,607,Sales Person,Database,65.88428979,['Database']
Medium,608,Tree Node,Database,73.74558575,['Database']
Medium,609,Find Duplicate File in System,Algorithms,67.57464291,"['Array', 'Hash Table', 'String']"
Easy,610,Triangle Judgement,Database,73.55678652,['Database']
Medium,611,Valid Triangle Number,Algorithms,52.20335611,"['Array', 'Two Pointers', 'Binary Search', 'Greedy', 'Sorting']"
Medium,612,Shortest Distance in a Plane,Database,61.27379407,['Database']
Easy,613,Shortest Distance in a Line,Database,79.94414979,['Database']
Medium,614,Second Degree Follower,Database,39.88814758,['Database']
Hard,615,Average Salary: Departments VS Company,Database,56.67151122,['Database']
Medium,616,Add Bold Tag in String,Algorithms,50.92407783,"['Array', 'Hash Table', 'String', 'Trie', 'String Matching']"
Easy,617,Merge Two Binary Trees,Algorithms,78.66574388,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,618,Students Report By Geography,Database,63.73618572,['Database']
Easy,619,Biggest Single Number,Database,69.33583176,['Database']
Easy,620,Not Boring Movies,Database,74.89661525,['Database']
Medium,621,Task Scheduler,Algorithms,61.35441006,"['Array', 'Hash Table', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Counting']"
Medium,622,Design Circular Queue,Algorithms,52.49536294,"['Array', 'Linked List', 'Design', 'Queue']"
Medium,623,Add One Row to Tree,Algorithms,64.04450059,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,624,Maximum Distance in Arrays,Algorithms,45.60506264,"['Array', 'Greedy']"
Medium,625,Minimum Factorization,Algorithms,33.78922422,"['Math', 'Greedy']"
Medium,626,Exchange Seats,Database,72.51224836,['Database']
Easy,627,Swap Salary,Database,83.96425828,['Database']
Easy,628,Maximum Product of Three Numbers,Algorithms,45.26778598,"['Array', 'Math', 'Sorting']"
Hard,629,K Inverse Pairs Array,Algorithms,49.08992448,['Dynamic Programming']
Hard,630,Course Schedule III,Algorithms,40.59526313,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,631,Design Excel Sum Formula,Algorithms,43.13106249,"['Array', 'Hash Table', 'String', 'Graph', 'Design', 'Topological Sort', 'Matrix']"
Hard,632,Smallest Range Covering Elements from K Lists,Algorithms,69.73665462,"['Array', 'Hash Table', 'Greedy', 'Sliding Window', 'Sorting', 'Heap (Priority Queue)']"
Medium,633,Sum of Square Numbers,Algorithms,36.45941948,"['Math', 'Two Pointers', 'Binary Search']"
Medium,634,Find the Derangement of An Array,Algorithms,41.72134311,"['Math', 'Dynamic Programming', 'Combinatorics']"
Medium,635,Design Log Storage System,Algorithms,59.21102422,"['Hash Table', 'String', 'Design', 'Ordered Set']"
Medium,636,Exclusive Time of Functions,Algorithms,64.62231357,"['Array', 'Stack']"
Easy,637,Average of Levels in Binary Tree,Algorithms,74.01297329,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,638,Shopping Offers,Algorithms,51.84753822,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Memoization', 'Bitmask']"
Hard,639,Decode Ways II,Algorithms,31.14756598,"['String', 'Dynamic Programming']"
Medium,640,Solve the Equation,Algorithms,44.48125719,"['Math', 'String', 'Simulation']"
Medium,641,Design Circular Deque,Algorithms,64.34436183,"['Array', 'Linked List', 'Design', 'Queue']"
Hard,642,Design Search Autocomplete System,Algorithms,49.3564571,"['String', 'Depth-First Search', 'Design', 'Trie', 'Sorting', 'Heap (Priority Queue)', 'Data Stream']"
Easy,643,Maximum Average Subarray I,Algorithms,45.15140745,"['Array', 'Sliding Window']"
Hard,644,Maximum Average Subarray II,Algorithms,37.40515159,"['Array', 'Binary Search', 'Prefix Sum']"
Easy,645,Set Mismatch,Algorithms,44.92310397,"['Array', 'Hash Table', 'Bit Manipulation', 'Sorting']"
Medium,646,Maximum Length of Pair Chain,Algorithms,60.76013723,"['Array', 'Dynamic Programming', 'Greedy', 'Sorting']"
Medium,647,Palindromic Substrings,Algorithms,71.53886696,"['Two Pointers', 'String', 'Dynamic Programming']"
Medium,648,Replace Words,Algorithms,68.33703648,"['Array', 'Hash Table', 'String', 'Trie']"
Medium,649,Dota2 Senate,Algorithms,48.773756,"['String', 'Greedy', 'Queue']"
Medium,650,2 Keys Keyboard,Algorithms,59.05780376,"['Math', 'Dynamic Programming']"
Medium,651,4 Keys Keyboard,Algorithms,55.8709655,"['Math', 'Dynamic Programming']"
Medium,652,Find Duplicate Subtrees,Algorithms,60.02196391,"['Hash Table', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,653,Two Sum IV - Input is a BST,Algorithms,62.08608301,"['Hash Table', 'Two Pointers', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,654,Maximum Binary Tree,Algorithms,85.89321218,"['Array', 'Divide and Conquer', 'Stack', 'Tree', 'Monotonic Stack', 'Binary Tree']"
Medium,655,Print Binary Tree,Algorithms,65.46174362,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,656,Coin Path,Algorithms,32.42936868,"['Array', 'Dynamic Programming']"
Easy,657,Robot Return to Origin,Algorithms,76.1267093,"['String', 'Simulation']"
Medium,658,Find K Closest Elements,Algorithms,48.5533671,"['Array', 'Two Pointers', 'Binary Search', 'Sliding Window', 'Sorting', 'Heap (Priority Queue)']"
Medium,659,Split Array into Consecutive Subsequences,Algorithms,51.47343148,"['Array', 'Hash Table', 'Greedy', 'Heap (Priority Queue)']"
Hard,660,Remove 9,Algorithms,57.35454122,['Math']
Easy,661,Image Smoother,,,
][j]` from this mixed integer?** ,,,,,
,,,,,
In other words, ,,,,
,,,,,
- We wish to set all except the least significant 8 bits to 0. ,,,,,
    ,,,,,
    The bitwise AND (`&`) operator has property of `x & 0 = 0`. Thus to set the first 24 bits to `0`, we can do bitwise AND with an integer that has the first 24 bits as `0`,,,,
    ,,,,,
- We wish to retain the least significant 8 bits as it is.  ,,,,,
,,,,,
    The bitwise AND (`&`) operator has property of `x & 1 = x`. Thus to retain the last 8 bits as it is, we can do bitwise AND with an integer that has the last 8 bits as `1`.,,,,
,,,,,
Thus, the integer with which we can do bitwise AND (`&`) to extract the original value of `img[i][j]` is `00000000000000000000000011111111`, and `11111111` in binary.,,,
,,,,,
![and](../Figures/661/661_slide_images_used/Slide13.PNG),,,,,
,,,,,
,,,,,
**How can we extract the smoothened value from this mixed integer, after we are done with computing all the smoothened values?**,,,,
,,,,,
As done above, we perhaps can do bitwise AND (`&`) with `00000000000000001111111100000000`, and `1111111100000000` in binary. This will retain the smoothened value bits as it is,,,
,,,,,
After that, to get the smoothened value, we did a left shift by 8 bits). This will bring the smoothened value to the least significant 8 bits.,,,
,,,,,
However, readers can appreciate that only the right shift is sufficient to extract the smoothened value. ,,,,
,,,,,
![right_shift](../Figures/661/661_slide_images_used/Slide14.PNG),,,,,
,,,,,
Hence, our algorithm will be,,,,
#NAME?, assume it stores the mixed-integer.,,,,
- Extract the original value of `img[i][j]` using bitwise AND (`&`) with `255`.,,,,,
- Compute smoothened value using neighbors of `img[i][j]`. For computing the smoothened value, we need the original value of neighbors as well,,,,
- Left shift (`<<`) the smoothened value by 8 bits, and encode it in the mixed integer using bitwise OR (`|`) operator.,,,,
#NAME?, extract the smoothened value using the right shift (`>>`) operator.,,,,
,,,,,
"> The bit manipulation works because we have only 8 bits per pixel (abbreviated as """"bpp""""). The """"bpp"""" is the number of bits used to represent the color of a single pixel in a bitmapped image or video frame buffer. Hence", we can use the remaining bits to store the smoothened value.,,,,
,,,,,
Readers can appreciate the one-to-one correspondence in this approach and [previous approach](#approach-3-constant-space-smoothened-image),,,,,
,,,,,
- Bitwise AND (`&`) with `255` $\equiv$ modulo by `256`,,,,,
,,,,,
- Left shift (`<<`) by 8 bits $\equiv$ multiply by `256`,,,,,
,,,,,
- Bitwise OR (`|`) of smoothened value with `img[i][j]` provided least significant 8 bits of the left-shifted smoothened value are `0` $\equiv$ add `img[i][j]`,,,,,
,,,,,
- Right shift (`>>`) by 8 bits $\equiv$ divide by `256`,,,,,
,,,,,
This was hinted at **[Point to Ponder](#implementation-2)** in previous approach.,,,,,
,,,,,
The bit-wise operators are faster than arithmetic operators. Hence, this approach is faster than the [previous approach](#approach-3-constant-space-smoothened-image).,,,,
,,,,,
#### Algorithm,,,,,
,,,,,
1. Save the dimensions of the image. Store the number of rows in `m`, and the number of columns in `n`,,,,
,,,,,
2. Iterate over the cells of the image. Let's call the current cell `img[i][j]`.,,,,,
    ,,,,,
    - Initialize two integer variables `sum` and `count` to `0`.,,,,,
,,,,,
    - Iterate over all plausible nine indices `(x, y)`. The `(x,,,,
      - `(i - 1, j - 1)`,,,,
,,,,,
      - `(i - 1, j)`,,,,
      - `(i - 1, j + 1)`,,,,
      - `(i, j - 1)`,,,,
      - `(i, j)`,,,,
      - `(i, j + 1)`,,,,
      - `(i + 1, j - 1)`,,,,
      - `(i + 1, j)`,,,,
      - `(i + 1, j + 1)` ,,,,
        ,,,,,
      If the indices form a valid neighbor, then extract the original value of `img[x][y]` using `img[x][y] & 255`,,,,
            ,,,,,
    - Encode the smoothed value in `img[i][j]` as `img[i][j] |= (sum / count) << 8 `.,,,,,
,,,,,
3. Traverse again over the cells of the image. Let's call the current cell `img[i][j]`. Extract the smoothed value from `img[i][j]` using `img[i][j] >> 8`, and store it in `img[i][j]`,,,,
,,,,,
4. Return the `img`.,,,,,
,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/HdLbENr2/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""HdLbENr2""""></iframe>",,,,,
,,,,,
**Implementation Notes:** Different programming languages have different notations of bitwise operators. For example, for the bitwise NOT operator,,,,
- [C++](https://en.cppreference.com/w/cpp/language/operator_arithmetic) uses `~` ,,,,,
- [Go](https://go.dev/ref/spec) uses unary `^` operator,,,,,
- [Elixir](https://hexdocs.pm/elixir/1.13.0/Bitwise.html) uses `~~~`, or `bnot`,,,,
- [Rust](https://doc.rust-lang.org/book/appendix-02-operators.html) uses `!`,,,,,
- In [Kotlin](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/inv.html), we can use `inv()` function,,,,
,,,,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Let $m$ be the number of rows in the `img` matrix, and $n$ be the number of columns in the `img` matrix.,,,,
,,,,,
* Time complexity: $O(m \cdot n)$,,,,,
,,,,,
    We are traversing every cell of the `img` matrix. There are $m \cdot n$ cells in the `img` matrix.,,,,,
    ,,,,,
    For each cell, we are iterating over all plausible nine indices. There are at most nine indices for each cell. At each index,,,,
,,,,,
    > We are taking bitwise AND (`&`) of `sum` and `255`. Now there can be at most $32$ (or any other constant number) bits in an integer. Hence, the `&` operator will be done at most $32$ times. Thus, which is $O(1)$.,,,
,,,,,
    > We are left shifting (`<<`) an integer (`sum / count`) by `8` bits.   ,,,,,
    > ,,,,,
    > Left shifting $1$ bit in a signed integer is done by ,,,,,
    > - Assigning to every non-signed bit the value of the bit to its right side,,,,,
    >,,,,,
    > - The LSB doesn't have any bit to its right side, so it is assigned `0`,,,,
    > ,,,,,
    > Hence, there will be at most $31$ such assignments in one left shift, the MSB is used to represent the sign of the integer,,,
    >,,,,,
    > Hence, number of assignments in one left shift is $31$, it is $31 \cdot 8 = 248$. Thus,,,
    ,,,,,
    > We are also doing bitwise OR (`|`) of two integers `img[i][j]` and `(sum / count) << 8`. Now there can be at most $32$ (or any other constant number) bits in an integer. Hence, the `|` operator will be done at most $32$ times. Thus, which is $O(1)$.,,,
,,,,,
    Again, we are traversing over all the cells of the `img` matrix to extract the smoothed value from the encoded value using the bitwise operator. ,,,,
,,,,,
    > We are right shifting (`>>`) an integer (`img[i][j]`) by `8` bits.,,,,,
    > ,,,,,
    > Right shifting $1$ bit in a signed integer is done by,,,,,
    > - Assigning to every non-signed bit the value of the bit to its left side, except for the *second most significant bit*,,,,
    > ,,,,,
    > - The *second most significant bit* has to its left side the *most significant bit*, which is used to represent the sign of the integer. Hence,,,,
    > ,,,,,
    > Hence, there will be at most $31$ such assignments in one right shift, the MSB is used to represent the sign of the integer,,,
    >,,,,,
    > Hence, number of assignments in one right shift is $31$, it is $31 \cdot 8 = 248$. Thus,,,
    ,,,,,
    Hence, the time complexity of the algorithm is $O((m \cdot n \cdot 9) + (m \cdot n))$,,,,
    ,,,,,
* Space complexity: $O(1)$,,,,,
,,,,,
    We are not using any extra space. Smoothened values are encoded and extracted in the existing integer value of `img`. Hence, the space complexity of the algorithm is $O(1)$.,,,,
        ,,,,,
"---""","			

class Solution:
  def imageSmoother(self, M: List[List[int]]) -> List[List[int]]:
    m = len(M)
    n = len(M[0])
    ans = [[0 for j in range(n)] for i in range(m)]

    for i in range(m):
      for j in range(n):
        ones = 0
        count = 0
        for y in range(max(0, i - 1), min(m, i + 2)):
          for x in range(max(0, j - 1), min(n, j + 2)):
            ones += M[y][x]
            count += 1
        ans[i][j] = ones // count

    return ans","			

class Solution {
 public:
  vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
    const int m = M.size();
    const int n = M[0].size();
    vector<vector<int>> ans(m, vector<int>(n));

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        int ones = 0;
        int count = 0;
        for (int x = max(0, i - 1); x < min(m, i + 2); ++x)
          for (int y = max(0, j - 1); y < min(n, j + 2); ++y) {
            ones += M[x][y];
            ++count;
          }
        ans[i][j] = ones / count;
      }

    return ans;
  }
};",,,
Medium,662,Maximum Width of Binary Tree,Algorithms,43.99908345,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,663,Equal Tree Partition,Algorithms,41.54958361,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,664,Strange Printer,Algorithms,60.78476731,"['String', 'Dynamic Programming']"
Medium,665,Non-decreasing Array,Algorithms,25.0469987,['Array']
Medium,666,Path Sum IV,Algorithms,62.64260333,"['Array', 'Hash Table', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,667,Beautiful Arrangement II,Algorithms,60.37821419,"['Array', 'Math']"
Hard,668,Kth Smallest Number in Multiplication Table,Algorithms,52.72868504,"['Math', 'Binary Search']"
Medium,669,Trim a Binary Search Tree,Algorithms,66.36605819,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,670,Maximum Swap,Algorithms,51.80750133,"['Math', 'Greedy']"
Easy,671,Second Minimum Node In a Binary Tree,Algorithms,45.27876089,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,672,Bulb Switcher II,Algorithms,49.47604371,"['Math', 'Bit Manipulation', 'Depth-First Search', 'Breadth-First Search']"
Medium,673,Number of Longest Increasing Subsequence,Algorithms,49.68966328,"['Array', 'Dynamic Programming', 'Binary Indexed Tree', 'Segment Tree']"
Easy,674,Longest Continuous Increasing Subsequence,Algorithms,51.06865425,['Array']
Hard,675,Cut Off Trees for Golf Event,Algorithms,35.24325808,"['Array', 'Breadth-First Search', 'Heap (Priority Queue)', 'Matrix']"
Medium,676,Implement Magic Dictionary,Algorithms,56.54970902,"['Hash Table', 'String', 'Depth-First Search', 'Design', 'Trie']"
Medium,677,Map Sum Pairs,Algorithms,56.7055649,"['Hash Table', 'String', 'Design', 'Trie']"
Medium,678,Valid Parenthesis String,Algorithms,38.79002909,"['String', 'Dynamic Programming', 'Stack', 'Greedy']"
Hard,679,24 Game,Algorithms,49.92696967,"['Array', 'Math', 'Backtracking']"
Easy,680,Valid Palindrome II,Algorithms,42.87515125,"['Two Pointers', 'String', 'Greedy']"
Medium,681,Next Closest Time,Algorithms,46.90231431,"['Hash Table', 'String', 'Backtracking', 'Enumeration']"
Easy,682,Baseball Game,Algorithms,78.62577573,"['Array', 'Stack', 'Simulation']"
Hard,683,K Empty Slots,Algorithms,37.25395725,"['Array', 'Binary Indexed Tree', 'Segment Tree', 'Queue', 'Sliding Window', 'Heap (Priority Queue)', 'Ordered Set', 'Monotonic Queue']"
Medium,684,Redundant Connection,Algorithms,66.31453777,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Hard,685,Redundant Connection II,Algorithms,34.99604843,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Medium,686,Repeated String Match,Algorithms,36.56887221,"['String', 'String Matching']"
Medium,687,Longest Univalue Path,Algorithms,42.50464766,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,688,Knight Probability in Chessboard,Algorithms,56.55697876,['Dynamic Programming']
Hard,689,Maximum Sum of 3 Non-Overlapping Subarrays,Algorithms,59.43009545,"['Array', 'Dynamic Programming', 'Sliding Window', 'Prefix Sum']"
Medium,690,Employee Importance,Algorithms,68.29203968,"['Array', 'Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search']"
Hard,691,Stickers to Spell Word,Algorithms,49.97971557,"['Array', 'Hash Table', 'String', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Memoization', 'Bitmask']"
Medium,692,Top K Frequent Words,Algorithms,59.16718959,"['Array', 'Hash Table', 'String', 'Trie', 'Sorting', 'Heap (Priority Queue)', 'Bucket Sort', 'Counting']"
Easy,693,Binary Number with Alternating Bits,Algorithms,63.40649069,['Bit Manipulation']
Medium,694,Number of Distinct Islands,Algorithms,62.16142029,"['Hash Table', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Hash Function']"
Medium,695,Max Area of Island,Algorithms,73.07192621,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Easy,696,Count Binary Substrings,Algorithms,65.86324249,"['Two Pointers', 'String']"
Easy,697,Degree of an Array,Algorithms,57.30741305,"['Array', 'Hash Table']"
Medium,698,Partition to K Equal Sum Subsets,Algorithms,38.09478021,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Memoization', 'Bitmask']"
Hard,699,Falling Squares,Algorithms,46.15985843,"['Array', 'Segment Tree', 'Ordered Set']"
Easy,700,Search in a Binary Search Tree,Algorithms,81.56741688,"['Tree', 'Binary Search Tree', 'Binary Tree']"
Medium,701,Insert into a Binary Search Tree,Algorithms,73.46752029,"['Tree', 'Binary Search Tree', 'Binary Tree']"
Medium,702,Search in a Sorted Array of Unknown Size,Algorithms,72.7442918,"['Array', 'Binary Search', 'Interactive']"
Easy,703,Kth Largest Element in a Stream,Algorithms,59.72526241,"['Tree', 'Design', 'Binary Search Tree', 'Heap (Priority Queue)', 'Binary Tree', 'Data Stream']"
Easy,704,Binary Search,Algorithms,59.41484908,"['Array', 'Binary Search']"
Easy,705,Design HashSet,Algorithms,66.96049669,"['Array', 'Hash Table', 'Linked List', 'Design', 'Hash Function']"
Easy,706,Design HashMap,Algorithms,65.84058209,"['Array', 'Hash Table', 'Linked List', 'Design', 'Hash Function']"
Medium,707,Design Linked List,Algorithms,28.97285729,"['Linked List', 'Design']"
Medium,708,Insert into a Sorted Circular Linked List,Algorithms,38.0194044,['Linked List']
Easy,709,To Lower Case,Algorithms,84.1267845,['String']
Hard,710,Random Pick with Blacklist,Algorithms,33.8009476,"['Array', 'Hash Table', 'Math', 'Binary Search', 'Sorting', 'Randomized']"
Hard,711,Number of Distinct Islands II,Algorithms,54.62306768,"['Hash Table', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Hash Function']"
Medium,712,Minimum ASCII Delete Sum for Two Strings,Algorithms,65.66866429,"['String', 'Dynamic Programming']"
Medium,713,Subarray Product Less Than K,Algorithms,52.74216784,"['Array', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Medium,714,Best Time to Buy and Sell Stock with Transaction Fee,Algorithms,70.25721963,"['Array', 'Dynamic Programming', 'Greedy']"
Hard,715,Range Module,Algorithms,44.14963416,"['Design', 'Segment Tree', 'Ordered Set']"
Hard,716,Max Stack,Algorithms,45.49827848,"['Linked List', 'Stack', 'Design', 'Doubly-Linked List', 'Ordered Set']"
Easy,717,1-bit and 2-bit Characters,Algorithms,45.11465678,['Array']
Medium,718,Maximum Length of Repeated Subarray,Algorithms,50.99783418,"['Array', 'Binary Search', 'Dynamic Programming', 'Sliding Window', 'Rolling Hash', 'Hash Function']"
Hard,719,Find K-th Smallest Pair Distance,Algorithms,45.71708808,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,720,Longest Word in Dictionary,Algorithms,53.36361198,"['Array', 'Hash Table', 'String', 'Trie', 'Sorting']"
Medium,721,Accounts Merge,Algorithms,59.31055182,"['Array', 'Hash Table', 'String', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Sorting']"
Medium,722,Remove Comments,Algorithms,39.35581926,"['Array', 'String']"
Medium,723,Candy Crush,Algorithms,77.30243902,"['Array', 'Two Pointers', 'Matrix', 'Simulation']"
Easy,724,Find Pivot Index,Algorithms,60.37610271,"['Array', 'Prefix Sum']"
Medium,725,Split Linked List in Parts,Algorithms,70.1462852,['Linked List']
Hard,726,Number of Atoms,,,
gex` in the `formula` will take $O(N)$ time.,,,,,
,,,,,
    - There will be at most $O(N)$ quintuples in the `matcher`. Now, since for the right parenthesis, in the worst case,,,
,,,,,
    - Sorting will take $O(N \log N)$ time. This may vary depending on the implementation of the sorting algorithm in the programming language.,,,,,
       ,,,,,
    - Generating the answer string will take $O(N)$ time.,,,,,
,,,,,
    Hence, the overall time complexity will be $O(N^2)$.  ,,,,
    ,,,,,
* Space complexity: $O(N)$,,,,,
,,,,,
    - There will be at most $O(N)$ quintuples in the `matcher`. ,,,,,
     ,,,,,
    - The space used by the stack will be $O(N)$. ,,,,,
    ,,,,,
    - The space used by the `final_map` will be $O(N)$. Moreover, we are sorting the `final_map`. In sorting, it will be $O(N)$.,,,
 ,,,,,
    - The space used by the answer string `ans` will be $O(N)$.   ,,,,,
,,,,,
    Hence, the overall space complexity will be $O(N)$.,,,,
  ,,,,,
---,,,,,
,,,,,
,,,,,
### Approach 4: Reverse Scanning,,,,,
,,,,,
#### Intuition,,,,,
,,,,,
In all the approaches we have discussed so far, whenever we encounter a right parenthesis,,,,
,,,,,
This is primarily because we get to know about the multiplicity of the nested formula only after the end of the nested formula. Hence, we need to revisit the atoms in the nested formula to apply the multiplicity.,,,,
,,,,,
**What if we could know the multiplicity of the nested formula in the beginning itself?**  ,,,,,
Then we can apply the multiplicity to the atoms as we parse them. This will eliminate the need to revisit the atoms in the nested formula.  ,,,,,
,,,,,
**How can we know the multiplicity of the nested formula in the beginning itself?**  ,,,,,
By traversing right-to-left, we can know the multiplicity of the nested formula in the beginning itself.,,,,
,,,,,
As soon as we encounter a number followed by a right parenthesis, we can store the multiplicity.   ,,,,
*(Note that number followed by lowercase letter will be count, and not multiplicity)*,,,,
,,,,,
**However, what if we encounter a left parenthesis?**  ,,,,
Then the most recent multiplicity will cease to exist. Accessing the most recent element can be done using the Last-in-First-Out (LIFO) principle. Hence, we can use a stack to store the multiplicity.,,,,
,,,,,
To fasten the process, we can use an integer `multiplier` to store the current multiplier, the `multiplier` will be 1. ,,,
- On encountering `)`, we need to multiply the `multiplier` with the just scanned multiplier.,,,,
- On encountering `(`, we need to divide the `multiplier` by the popped element from the stack.,,,,
,,,,,
Readers are encouraged to implement the solution on their own. Plan all the cases that we need to take care of while scanning from right to left.  ,,,,,
,,,,,
It is worth noting that for forming atoms and count," we won't """"append"""" the characters. Instead", a UPPERCASE LETTER signifies the end of the scanning of the atom and not the beginning.,,,
,,,,,
#### Algorithm,,,,,
,,,,,
1. Initialize the integer `running_mul` to 1. It will store the valid multiplier for atoms to be scanned.,,,,,
,,,,,
2. Initialize the stack `stack` to store the multipliers. Push `1` to the stack. The product of elements in the stack will be the valid multiplier for atoms to be scanned, which is also stored in `running_mul`. ,,,,
,,,,,
3. Initialize the hashmap `final_map` to store the count of atoms. ,,,,,
,,,,,
4. Initialize the strings `curr_atom` and `curr_count` to store the current atom and count.,,,,,
,,,,,
5. Traverse right-to-left in the `formula` using the iterator `index`.,,,,,
,,,,,
    - If the character at the current index is a digit, prepend it to the `curr_count`.,,,,
,,,,,
    - If the character at the current index is a lowercase letter, prepend it to the `curr_atom`.,,,,
,,,,,
    - If the character at the current index is an UPPERCASE LETTER, prepend it to the `curr_atom`. Now,,,,
,,,,,
        - Add the `curr_atom` to the `final_map`. If the `curr_count` is not empty, the value of the `curr_atom` will be the product of `curr_count` and `running_mul`. Otherwise,,,,
,,,,,
        - Reset the `curr_atom` and `curr_count`.,,,,,
,,,,,
    - If the character at the current index is a right parenthesis, the `curr_count`, will be considered as `curr_multiplier`. If `curr_count` is empty,,,
,,,,,
        - Push the `curr_multiplier` to the `stack`.,,,,,
,,,,,
        - Multiply the `running_mul` by the `curr_multiplier`.,,,,,
,,,,,
        - Reset the `curr_count`.  ,,,,,
,,,,,
    - If the character at the current index is a left parenthesis, divide the `running_mul` by the popped element from the `stack`.  ,,,,
,,,,,
6. Sort the `final_map` using the keys.,,,,,
,,,,,
7. Generate the answer string `ans` by iterating over the sorted `final_map`. Append the atom to the `ans`. If the count of the atom is greater than 1, append the count of the atom to the `ans`.,,,,
,,,,,
8. Return the `ans`.   ,,,,,
,,,,,
The following animation visualizes the algorithm.,,,,,
,,,,,
!?!../Documents/726/726_slideshow_reverse_scanning.json:960,540!?!,,,,
<br/>,,,,,
,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/hQeATxFn/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""hQeATxFn""""></iframe>",,,,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Let $N$ be the length of the `formula`.,,,,,
,,,,,
* Time complexity: $O(N^2)$,,,,,
    ,,,,,
    - Declaring and Initializing the variables before the `while` loop will take $O(1)$ time.,,,,,
,,,,,
    - The `while` loop will run $O(N)$ times. The number of steps in one `while` loop depends on the character at the current index.,,,,,
,,,,,
        - In the case of a digit, lowercase letter, we are prepending the characters. Appending is $O(1)$ operation,,,
,,,,,
            > `s = s + a` is different from `s = a + s`. The former can be augmented as `s += a`, while the latter can't be augmented.,,,,
            >    ,,,,,
            > Although it may vary with programming language, in general, while inserting at the beginning is $O(N)$ operation.,,,
,,,,,
"            > The worst case example of this can be when the `formula` is `""""Qabcdefghij""""`.",,,,,
,,,,,
        - In the case of the left parenthesis, we are converting the string `curr_count` to integer `curr_multiplier`. This may take $O(N)$ time in the worst case. However,,,,
        ,,,,,
        - In the case of the right parenthesis, we are updating the `running_mul` and `stack`. This will take $O(1)$ time.,,,,
,,,,,
        Hence, the time complexity of the `while` loop will be $O(N^2)$.,,,,
,,,,,
    - Sorting will take $O(N \log N)$ time. This may vary depending on the implementation of the sorting algorithm in the programming language.,,,,,
     ,,,,,
    - Generating the answer string will take $O(N)$ time.,,,,,
,,,,,
    Hence, the overall time complexity will be $O(N^2)$.  ,,,,
    ,,,,,
* Space complexity: $O(N)$,,,,,
,,,,,
    - The `stack` may have at most $O(N)$ elements.,,,,,
,,,,,
    - The space used by the `final_map` will be $O(N)$. Moreover, we are sorting the `final_map`. In sorting, it will be $O(N)$.,,,
     ,,,,,
    - The space used by the `ans` will be $O(N)$.,,,,,
,,,,,
    - The space used by the `curr_atom` and `curr_count` will be $O(N)$.,,,,,
,,,,,
    - The space used by the `running_mul` will be $O(1)$, since it is of integer type,,,,
,,,,,
    Hence, the overall space complexity will be $O(N)$.    ,,,,
        ,,,,,
---,,,,,
,,,,,
### Approach 5: Preprocessing,,,,,
,,,,,
#### Intuition,,,,,
,,,,,
In [previous approach](#approach-4-reverse-scanning), the bottleneck in the `while` loop (as mentioned in the [complexity analysis](#complexity-analysis-3) section) was,,,,
,,,,,
> Prepending the characters to `curr_atom` and `curr_count` was taking $O(N)$ time.,,,,,
,,,,,
*The alternative is to NOT prepend the characters. Instead, we can append the characters and reverse the string before using it. Since there will be at most $O(N)$ characters in the string, the amortized time complexity will be $O(1)$. Readers are encouraged to implement the solution on their own and comment their implementation below.*,,,
,,,,,
In this approach, we will pre-process the `formula` to make the left-to-right parsing easier. For every index,,,,
,,,,,
> Pre-processing is a common technique to make the actual processing easier. ,,,,,
,,,,,
As done in [Approach 4](#approach-4-reverse-scanning), we will use a stack to store the multipliers.  ,,,,
We can use another array `muls` to store the valid multiplier for every index. After this pre-processing, we can traverse the `formula` left-to-right, we can append the characters to `curr_atom` and `curr_count`,,,
,,,,,
Let's see if it helps in optimizing the runtime.,,,,,
,,,,,
#### Algorithm,,,,,
,,,,,
1. Initialize the array `muls` to store the valid multiplier for every index. Initialize the integer `running_mul` to 1. It will store the valid multiplier for atoms to be scanned.,,,,,
,,,,,
2. Initialize the stack `stack` to store the multipliers. Push `1` to the stack. The product of elements in the stack will be the valid multiplier for atoms to be scanned, which is also stored in `running_mul`.,,,,
,,,,,
3. Initialize the empty string `curr_number` to store the current number.,,,,,
,,,,,
4. Do the pre-processing by traversing right-to-left in the `formula` using the iterator `index`, which is initialized to the `formula.length() - 1`.,,,,
,,,,,
    - If the character at the current index is a digit, append it to the `curr_number`.,,,,
,,,,,
    - If the character at the current index is a letter, it means the scanned number was count and not a multiplier. Discard the `curr_number`.,,,,
,,,,,
    - If the character at the current index is a right parenthesis, the scanned number was multiplier. However,,,,
,,,,,
        - If `curr_number` is not empty, reverse it and convert it to an integer in the variable `curr_multiplier`. If it was empty,,,,
,,,,,
        - Multiply the `running_mul` by the `curr_multiplier`.,,,,,
,,,,,
        - Push the `curr_multiplier` to the `stack`.,,,,,
,,,,,
        - Reset the `curr_number`.,,,,,
,,,,,
    - If the character at the current index is a left parenthesis, the most recent multiplier will cease to exist. Hence, reset the `curr_number`.,,,
,,,,,
    - Append the `running_mul` to the `muls`.,,,,,
,,,,,
5. Reverse the `muls`.,,,,,
,,,,,
6. Initialize the hashmap `final_map` to store the count of atoms.,,,,,
,,,,,
7. Process the `formula` left-to-right using the iterator `index`, which is initialized to 0.,,,,
,,,,,
    If the character at the current index is a UPPERCASE LETTER, extract the entire atom and count (which by default should be 1). Add into the `final_map` the atom and count,,,,
,,,,,
8. Sort the `final_map` using the keys.,,,,,
,,,,,
9. Generate the answer string `ans` by iterating over the sorted `final_map`. Append the atom to the `ans`. If the count of the atom is greater than 1, append the count of the atom to the `ans`.,,,,
,,,,,
10. Return the `ans`.   ,,,,,
,,,,,
"Here's how `muls` should look like for the input `""""K4(ON(SO3)2)2""""`. The only values of `muls` we ultimately care about are",,,,,
#NAME?, if there is no associated number.,,,,
#NAME?,,,,,
,,,,,
The remaining values are intermediate values that helped us in producing the values we care about. ,,,,,
,,,,,
![muls_array](../Figures/726/726_slide_images_used/Slide1.PNG),,,,,
<br/>,,,,,
,,,,,
,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/cxxwk3ND/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""cxxwk3ND""""></iframe>",,,,,
,,,,,
**Implementation Note:** In the above implementation  ,,,,,
- We are reversing a string `curr_number` ,,,,,
- We are converting variables `curr_number` and `curr_count` to integer.,,,,,
,,,,,
We can avoid both of these if we form integers from characters as we scan them. This will need a little bit of Mathematics. Readers are encouraged to implement the solution on their own and comment their implementation below.,,,,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Let $N$ be the length of the `formula`.,,,,,
,,,,,
* Time complexity: $O(N \log N)$,,,,,
,,,,,
    - The while loop of pre-processing will have $O(N)$ iterations. ,,,,,
,,,,,
        - When the current character is alphanumeric, or left parenthesis,,,,
,,,,,
        - When the current character is a right parenthesis, the time complexity can be $O(N)$ in the worst case, the amortized time complexity will be $O(1)$.,,,
,,,,,
        Hence, the time complexity of pre-processing will be $O(N)$.,,,,
,,,,,
    - Reversing the `muls` will take $O(N)$ time.,,,,,
,,,,,
    - The while loop of the processing will have $O(N)$ iterations. ,,,,,
,,,,,
        Every character will be processed at most twice, once during extracting,,,,
,,,,,
        Hence, the time complexity of the processing will be $O(N)$.,,,,
    ,,,,,
    - Sorting will take $O(K \log K)$ time, where $K$ is the number of unique atoms. In the worst case,,,,
     ,,,,,
    - Generating the answer string will take $O(N)$ time.,,,,,
,,,,,
    Hence, the overall time complexity will be $O(N + N + N \log N + N)$,,,,
,,,,,
,,,,,
* Space complexity: $O(N)$,,,,,
,,,,,
    - The space used by the `muls` will be $O(N)$.,,,,,
,,,,,
    - The space used by the `stack` will be $O(N)$.,,,,,
,,,,,
    - The space used by the `final_map` will be $O(N)$. Moreover, we are sorting the `final_map`. In sorting, it will be $O(N)$.,,,
,,,,,
    - The space used by the answer string `ans` will be $O(N)$. ,,,,,
,,,,,
    Hence, the overall space complexity will be $O(N)$.,,,,
        ,,,,,
---,,,,,
,,,,,
### Approach 6: Reverse Scanning with Regex,,,,,
,,,,,
#### Intuition,,,,,
,,,,,
In [Approach-4](#approach-4-reverse-scanning), the bottleneck in the `while` loop (as mentioned in the [complexity analysis](#complexity-analysis-3) section) was,,,,
,,,,,
> Prepending the characters to `curr_atom` and `curr_count` was taking $O(N)$ time.,,,,,
,,,,,
The purpose of prepending was to extract atoms and count. However, we have seen in [Approach 3](#approach-3-regular-expression) that regular expressions can be used to extract atoms and counts. ,,,,
,,,,,
After extracting the atoms and counts, we can do reverse scanning to ensure that in each nested formula,,,,
,,,,,
> We have achieved $O(N \log N)$ time complexity in [Approach 5](#approach-5-preprocessing). Can we do better than this?    ,,,,,
> Practically, it is difficult to achieve better time complexity than $O(N \log N)$, the non-comparison based sorting algorithms (counting sort,,,
,,,,,
Readers are encouraged to implement the solution on their own. It will be a combination of [Approach 3](#approach-3-regular-expression) and [Approach 4](#approach-4-reverse-scanning), but somewhat concise and optimized.,,,,
,,,,,
#### Algorithm,,,,,
,,,,,
1. Define a regular expression `regex` to extract the atom, count, right parenthesis,,,
,,,,,
2. Using `regex`, find all the occurrences of the quintuples in the `formula`. Store the result in `matcher`,,,,
,,,,,
3. Initialize the hashmap `final_map` to store the count of atoms.,,,,,
,,,,,
4. Initialize the stack `stack` to keep track of the nested multiplicities. Push integer `1` to the stack.,,,,,
,,,,,
5. Initialize the integer `running_mul` to 1. It will store the valid multiplier for atoms to be scanned.,,,,,
,,,,,
6. Parse the formula by iterating over the `matcher`.,,,,,
,,,,,
    - If the current element is an atom, add it to the `final_map`. ,,,,
,,,,,
        The value will be the product of the count and the `running_mul`. If the count is not present, the value will be `1 * running_mul`. ,,,,
,,,,,
    - If the current element is a right parenthesis.,,,,,
      ,,,,,
      - If the `multiplier` is present, multiply the `running_mul` by the `multiplier`. Push the `multiplier` to the `stack`.,,,,
,,,,,
      - If the `multiplier` is not present, push `1` to the `stack`.,,,,
,,,,,
    - If the current element is a left parenthesis, divide the `running_mul` by the popped element from the `stack`. ,,,,
,,,,,
7. Sort the `final_map` using the keys.,,,,,
,,,,,
8. Generate the answer string `ans` by iterating over the sorted `final_map`. Append the atom to the `ans`. If the count of the atom is greater than 1, append the count of the atom to the `ans`.,,,,
,,,,,
9. Return the `ans`.  ,,,,,
,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/Ww8oR9Bp/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""Ww8oR9Bp""""></iframe>",,,,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Let $N$ be the length of the `formula`.,,,,,
,,,,,
* Time complexity: $O(N \log N)$,,,,,
,,,,,
    - The time complexity of finding all the quintuples using regular expression will depend on the programming language. In general, it will be $O(N)$.,,,,
,,,,,
    - The time complexity of the `for` loop will be $O(N)$.,,,,,
,,,,,
        - If atom, adding it to the `final_map` will take $O(1)$ time.,,,,
,,,,,
        - If the right parenthesis, multiplying the `running_mul` and pushing the multiplier to the `stack` will take $O(1)$ time.,,,,
,,,,,
        - If left parenthesis, dividing the `running_mul` by the popped element from the `stack` will take $O(1)$ time.,,,,
,,,,,
        Hence, the time complexity of the `for` loop will be $O(N)$.,,,,
,,,,,
    - Sorting will take $O(K \log K)$ time, where $K$ is the number of unique atoms. In the worst case,,,,
,,,,,
    - Generating the answer string will take $O(N)$ time.,,,,,
,,,,,
    Hence, the overall time complexity will be $O(N + N + N \log N + N)$,,,,
         ,,,,,
* Space complexity: $O(N)$,,,,,
,,,,,
    - The space used by the quintuples will be $O(N)$.,,,,,
,,,,,
    - The space used by the `final_map` will be $O(N)$. Moreover, we are sorting the `final_map`. In sorting, it will be $O(N)$.,,,
     ,,,,,
    - The space used by the answer string `ans` will be $O(N)$. ,,,,,
     ,,,,,
    - The space used by the `stack` will be $O(N)$.,,,,,
,,,,,
    Hence, the overall space complexity will be $O(N)$.    ,,,,
        ,,,,,
"---""","			

class Solution:
  def countOfAtoms(self, formula: str) -> str:
    def parse() -> dict:
      ans = defaultdict(int)

      nonlocal i
      while i < n:
        if formula[i] == '(':
          i += 1
          for elem, freq in parse().items():
            ans[elem] += freq
        elif formula[i] == ')':
          i += 1
          numStart = i
          while i < n and formula[i].isdigit():
            i += 1
          factor = int(formula[numStart:i])
          for elem, freq in ans.items():
            ans[elem] *= factor
          return ans
        elif formula[i].isupper():
          elemStart = i
          i += 1
          while i < n and formula[i].islower():
            i += 1
          elem = formula[elemStart:i]
          numStart = i
          while i < n and formula[i].isdigit():
            i += 1
          num = 1 if i == numStart else int(
              formula[numStart:i])
          ans[elem] += num

      return ans

    n = len(formula)

    ans = """"
    i = 0
    count = parse()

    for elem in sorted(count.keys()):
      ans += elem
      if count[elem] > 1:
        ans += str(count[elem])

    return ans","			

class Solution {
 public:
  string countOfAtoms(string formula) {
    string ans;
    int i = 0;

    for (const auto& [elem, freq] : parse(formula, i)) {
      ans += elem;
      if (freq > 1)
        ans += to_string(freq);
    }

    return ans;
  }

 private:
  map<string, int> parse(const string& s, int& i) {
    map<string, int> count;

    while (i < s.length())
      if (s[i] == '(') {
        for (const auto& [elem, freq] : parse(s, ++i))
          count[elem] += freq;
      } else if (s[i] == ')') {
        const int num = getNum(s, ++i);
        for (auto&& [_, freq] : count)
          freq *= num;
        return count;  // Returns back to previous scope
      } else {         // s[i] must be uppercased
        const string& elem = getElem(s, i);
        const int num = getNum(s, i);
        count[elem] += num;
      }

    return count;
  }

  string getElem(const string& s, int& i) {
    const int elemStart = i++;  // s[elemStart] is uppercased
    while (i < s.length() && islower(s[i]))
      ++i;
    return s.substr(elemStart, i - elemStart);
  }

  int getNum(const string& s, int& i) {
    const int numStart = i;
    while (i < s.length() && isdigit(s[i]))
      ++i;
    const string& numString = s.substr(numStart, i - numStart);
    return numString.empty() ? 1 : stoi(numString);
  }
};",,,
Hard,727,Minimum Window Subsequence,Algorithms,43.59417059,"['String', 'Dynamic Programming', 'Sliding Window']"
Easy,728,Self Dividing Numbers,Algorithms,79.54680825,['Math']
Medium,729,My Calendar I,Algorithms,58.13709619,"['Array', 'Binary Search', 'Design', 'Segment Tree', 'Ordered Set']"
Hard,730,Count Different Palindromic Subsequences,Algorithms,46.28121424,"['String', 'Dynamic Programming']"
Medium,731,My Calendar II,Algorithms,62.26821754,"['Array', 'Binary Search', 'Design', 'Segment Tree', 'Prefix Sum', 'Ordered Set']"
Hard,732,My Calendar III,Algorithms,70.59176888,"['Binary Search', 'Design', 'Segment Tree', 'Prefix Sum', 'Ordered Set']"
Easy,733,Flood Fill,Algorithms,66.2201163,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Easy,734,Sentence Similarity,Algorithms,44.58174611,"['Array', 'Hash Table', 'String']"
Medium,735,Asteroid Collision,Algorithms,45.33738173,"['Array', 'Stack', 'Simulation']"
Hard,736,Parse Lisp Expression,Algorithms,52.57753784,"['Hash Table', 'String', 'Stack', 'Recursion']"
Medium,737,Sentence Similarity II,Algorithms,50.62288568,"['Array', 'Hash Table', 'String', 'Depth-First Search', 'Breadth-First Search', 'Union Find']"
Medium,738,Monotone Increasing Digits,Algorithms,48.65266738,"['Math', 'Greedy']"
Medium,739,Daily Temperatures,Algorithms,67.22911207,"['Array', 'Stack', 'Monotonic Stack']"
Medium,740,Delete and Earn,Algorithms,56.68297406,"['Array', 'Hash Table', 'Dynamic Programming']"
Hard,741,Cherry Pickup,Algorithms,37.73685378,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,742,Closest Leaf in a Binary Tree,Algorithms,47.03034392,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,743,Network Delay Time,Algorithms,57.03390088,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Easy,744,Find Smallest Letter Greater Than Target,Algorithms,53.92427159,"['Array', 'Binary Search']"
Hard,745,Prefix and Suffix Search,Algorithms,40.38949448,"['Array', 'Hash Table', 'String', 'Design', 'Trie']"
Easy,746,Min Cost Climbing Stairs,Algorithms,67.07445746,"['Array', 'Dynamic Programming']"
Easy,747,Largest Number At Least Twice of Others,Algorithms,50.63553131,"['Array', 'Sorting']"
Easy,748,Shortest Completing Word,Algorithms,61.22409811,"['Array', 'Hash Table', 'String']"
Hard,749,Contain Virus,Algorithms,52.37570583,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix', 'Simulation']"
Medium,750,Number Of Corner Rectangles,Algorithms,67.81544545,"['Array', 'Math', 'Dynamic Programming', 'Matrix']"
Medium,751,IP to CIDR,Algorithms,55.17433591,"['String', 'Bit Manipulation']"
Medium,752,Open the Lock,Algorithms,60.68213738,"['Array', 'Hash Table', 'String', 'Breadth-First Search']"
Hard,753,Cracking the Safe,Algorithms,57.71399691,"['Depth-First Search', 'Graph', 'Eulerian Circuit']"
Medium,754,Reach a Number,Algorithms,43.83761087,"['Math', 'Binary Search']"
Medium,755,Pour Water,Algorithms,47.79362228,"['Array', 'Simulation']"
Medium,756,Pyramid Transition Matrix,Algorithms,52.86703128,"['Bit Manipulation', 'Depth-First Search', 'Breadth-First Search']"
Hard,757,Set Intersection Size At Least Two,Algorithms,45.13996033,"['Array', 'Greedy', 'Sorting']"
Medium,758,Bold Words in String,Algorithms,52.06689068,"['Array', 'Hash Table', 'String', 'Trie', 'String Matching']"
Hard,759,Employee Free Time,Algorithms,72.56338822,"['Array', 'Line Sweep', 'Sorting', 'Heap (Priority Queue)']"
Easy,760,Find Anagram Mappings,Algorithms,83.8556823,"['Array', 'Hash Table']"
Hard,761,Special Binary String,Algorithms,63.29371071,"['String', 'Recursion']"
Easy,762,Prime Number of Set Bits in Binary Representation,Algorithms,70.8081066,"['Math', 'Bit Manipulation']"
Medium,763,Partition Labels,Algorithms,81.49723463,"['Hash Table', 'Two Pointers', 'String', 'Greedy']"
Medium,764,Largest Plus Sign,Algorithms,48.5223133,"['Array', 'Dynamic Programming']"
Hard,765,Couples Holding Hands,Algorithms,58.30169975,"['Greedy', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Easy,766,Toeplitz Matrix,Algorithms,69.3819191,"['Array', 'Matrix']"
Medium,767,Reorganize String,Algorithms,56.07859008,"['Hash Table', 'String', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Counting']"
Hard,768,Max Chunks To Make Sorted II,Algorithms,54.09345271,"['Array', 'Stack', 'Greedy', 'Sorting', 'Monotonic Stack']"
Medium,769,Max Chunks To Make Sorted,,,
Hard,770,Basic Calculator IV,Algorithms,48.5946195,"['Hash Table', 'Math', 'String', 'Stack', 'Recursion']"
Easy,771,Jewels and Stones,Algorithms,89.18310649,"['Hash Table', 'String']"
Hard,772,Basic Calculator III,Algorithms,52.33585448,"['Math', 'String', 'Stack', 'Recursion']"
Hard,773,Sliding Puzzle,Algorithms,73.0853239,"['Array', 'Dynamic Programming', 'Backtracking', 'Breadth-First Search', 'Memoization', 'Matrix']"
Hard,774,Minimize Max Distance to Gas Station,Algorithms,52.9034733,"['Array', 'Binary Search']"
Medium,775,Global and Local Inversions,Algorithms,42.32666162,"['Array', 'Math']"
Medium,776,Split BST,Algorithms,82.44060684,"['Tree', 'Binary Search Tree', 'Recursion', 'Binary Tree']"
Medium,777,Swap Adjacent in LR String,Algorithms,37.48658195,"['Two Pointers', 'String']"
Hard,778,Swim in Rising Water,Algorithms,62.58522817,"['Array', 'Binary Search', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Heap (Priority Queue)', 'Matrix']"
Medium,779,K-th Symbol in Grammar,Algorithms,47.31333212,"['Math', 'Bit Manipulation', 'Recursion']"
Hard,780,Reaching Points,Algorithms,33.58660083,['Math']
Medium,781,Rabbits in Forest,Algorithms,58.29202088,"['Array', 'Hash Table', 'Math', 'Greedy']"
Hard,782,Transform to Chessboard,Algorithms,50.49338706,"['Array', 'Math', 'Bit Manipulation', 'Matrix']"
Easy,783,Minimum Distance Between BST Nodes,Algorithms,60.21729017,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,784,Letter Case Permutation,Algorithms,75.06118246,"['String', 'Backtracking', 'Bit Manipulation']"
Medium,785,Is Graph Bipartite?,Algorithms,57.51642213,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Medium,786,K-th Smallest Prime Fraction,Algorithms,68.46844916,"['Array', 'Two Pointers', 'Binary Search', 'Sorting', 'Heap (Priority Queue)']"
Medium,787,Cheapest Flights Within K Stops,Algorithms,40.26050279,"['Dynamic Programming', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Medium,788,Rotated Digits,Algorithms,56.41444774,"['Math', 'Dynamic Programming']"
Medium,789,Escape The Ghosts,Algorithms,62.50644188,"['Array', 'Math']"
Medium,790,Domino and Tromino Tiling,Algorithms,52.06172026,['Dynamic Programming']
Medium,791,Custom Sort String,Algorithms,71.94797497,"['Hash Table', 'String', 'Sorting']"
Medium,792,Number of Matching Subsequences,Algorithms,50.67930669,"['Array', 'Hash Table', 'String', 'Binary Search', 'Dynamic Programming', 'Trie', 'Sorting']"
Hard,793,Preimage Size of Factorial Zeroes Function,Algorithms,45.61860068,"['Math', 'Binary Search']"
Medium,794,Valid Tic-Tac-Toe State,Algorithms,34.61238522,"['Array', 'Matrix']"
Medium,795,Number of Subarrays with Bounded Maximum,Algorithms,53.78162098,"['Array', 'Two Pointers']"
Easy,796,Rotate String,Algorithms,63.80542002,"['String', 'String Matching']"
Medium,797,All Paths From Source to Target,Algorithms,83.06036326,"['Backtracking', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Hard,798,Smallest Rotation with Highest Score,Algorithms,51.97573373,"['Array', 'Prefix Sum']"
Medium,799,Champagne Tower,Algorithms,58.24874283,['Dynamic Programming']
Easy,800,Similar RGB Color,Algorithms,67.76719497,"['Math', 'String', 'Enumeration']"
Hard,801,Minimum Swaps To Make Sequences Increasing,Algorithms,40.68195126,"['Array', 'Dynamic Programming']"
Medium,802,Find Eventual Safe States,Algorithms,68.34672735,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Hard,803,Bricks Falling When Hit,Algorithms,35.61321754,"['Array', 'Union Find', 'Matrix']"
Easy,804,Unique Morse Code Words,Algorithms,83.21023298,"['Array', 'Hash Table', 'String']"
Hard,805,Split Array With Same Average,Algorithms,25.9399708,"['Array', 'Math', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Easy,806,Number of Lines To Write String,Algorithms,70.5192228,"['Array', 'String']"
Medium,807,Max Increase to Keep City Skyline,Algorithms,86.19177815,"['Array', 'Greedy', 'Matrix']"
Medium,808,Soup Servings,Algorithms,53.27689746,"['Math', 'Dynamic Programming', 'Probability and Statistics']"
Medium,809,Expressive Words,Algorithms,46.34643037,"['Array', 'Two Pointers', 'String']"
Hard,810,Chalkboard XOR Game,Algorithms,62.64886629,"['Array', 'Math', 'Bit Manipulation', 'Brainteaser', 'Game Theory']"
Medium,811,Subdomain Visit Count,Algorithms,76.79448658,"['Array', 'Hash Table', 'String', 'Counting']"
Easy,812,Largest Triangle Area,Algorithms,61.84705432,"['Array', 'Math', 'Geometry']"
Medium,813,Largest Sum of Averages,Algorithms,53.97208076,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Medium,814,Binary Tree Pruning,Algorithms,72.35268748,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,815,Bus Routes,Algorithms,46.9661201,"['Array', 'Hash Table', 'Breadth-First Search']"
Medium,816,Ambiguous Coordinates,Algorithms,55.83251283,"['String', 'Backtracking', 'Enumeration']"
Medium,817,Linked List Components,Algorithms,57.18716605,"['Array', 'Hash Table', 'Linked List']"
Hard,818,Race Car,Algorithms,44.0639041,['Dynamic Programming']
Easy,819,Most Common Word,Algorithms,44.54027101,"['Array', 'Hash Table', 'String', 'Counting']"
Medium,820,Short Encoding of Words,Algorithms,60.52819887,"['Array', 'Hash Table', 'String', 'Trie']"
Easy,821,Shortest Distance to a Character,Algorithms,72.12871775,"['Array', 'Two Pointers', 'String']"
Medium,822,Card Flipping Game,Algorithms,48.21420869,"['Array', 'Hash Table']"
Medium,823,Binary Trees With Factors,Algorithms,52.91716267,"['Array', 'Hash Table', 'Dynamic Programming', 'Sorting']"
Easy,824,Goat Latin,Algorithms,69.28224567,['String']
Medium,825,Friends Of Appropriate Ages,Algorithms,49.03284885,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,826,Most Profit Assigning Work,Algorithms,55.89789319,"['Array', 'Two Pointers', 'Binary Search', 'Greedy', 'Sorting']"
Hard,827,Making A Large Island,Algorithms,54.58482438,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Hard,828,Count Unique Characters of All Substrings of a Given String,Algorithms,52.8125,"['Hash Table', 'String', 'Dynamic Programming']"
Hard,829,Consecutive Numbers Sum,Algorithms,41.93962146,"['Math', 'Enumeration']"
Easy,830,Positions of Large Groups,Algorithms,52.86487922,['String']
Medium,831,Masking Personal Information,Algorithms,50.38628104,['String']
Easy,832,Flipping an Image,Algorithms,82.89059202,"['Array', 'Two Pointers', 'Bit Manipulation', 'Matrix', 'Simulation']"
Medium,833,Find And Replace in String,Algorithms,51.34039198,"['Array', 'Hash Table', 'String', 'Sorting']"
Hard,834,Sum of Distances in Tree,Algorithms,65.29321125,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Graph']"
Medium,835,Image Overlap,Algorithms,63.7345837,"['Array', 'Matrix']"
Easy,836,Rectangle Overlap,Algorithms,45.64718945,"['Math', 'Geometry']"
Medium,837,New 21 Game,Algorithms,44.77465709,"['Math', 'Dynamic Programming', 'Sliding Window', 'Probability and Statistics']"
Medium,838,Push Dominoes,Algorithms,63.0397574,"['Two Pointers', 'String', 'Dynamic Programming']"
Hard,839,Similar String Groups,Algorithms,55.31502382,"['Array', 'Hash Table', 'String', 'Depth-First Search', 'Breadth-First Search', 'Union Find']"
Medium,840,Magic Squares In Grid,Algorithms,51.52884518,"['Array', 'Hash Table', 'Math', 'Matrix']"
Medium,841,Keys and Rooms,Algorithms,74.54356949,"['Depth-First Search', 'Breadth-First Search', 'Graph']"
Medium,842,Split Array into Fibonacci Sequence,Algorithms,39.63281457,"['String', 'Backtracking']"
Hard,843,Guess the Word,Algorithms,37.75919079,"['Array', 'Math', 'String', 'Interactive', 'Game Theory']"
Easy,844,Backspace String Compare,Algorithms,49.46023934,"['Two Pointers', 'String', 'Stack', 'Simulation']"
Medium,845,Longest Mountain in Array,Algorithms,41.01078101,"['Array', 'Two Pointers', 'Dynamic Programming', 'Enumeration']"
Medium,846,Hand of Straights,Algorithms,56.99225259,"['Array', 'Hash Table', 'Greedy', 'Sorting']"
Hard,847,Shortest Path Visiting All Nodes,Algorithms,65.38226151,"['Dynamic Programming', 'Bit Manipulation', 'Breadth-First Search', 'Graph', 'Bitmask']"
Medium,848,Shifting Letters,Algorithms,45.43202422,"['Array', 'String', 'Prefix Sum']"
Medium,849,Maximize Distance to Closest Person,Algorithms,48.86746054,['Array']
Hard,850,Rectangle Area II,Algorithms,54.48728886,"['Array', 'Segment Tree', 'Line Sweep', 'Ordered Set']"
Medium,851,Loud and Rich,Algorithms,61.45740916,"['Array', 'Depth-First Search', 'Graph', 'Topological Sort']"
Medium,852,Peak Index in a Mountain Array,Algorithms,67.66446154,"['Array', 'Binary Search']"
Medium,853,Car Fleet,Algorithms,53.30037558,"['Array', 'Stack', 'Sorting', 'Monotonic Stack']"
Hard,854,K-Similar Strings,Algorithms,40.01839191,"['String', 'Breadth-First Search']"
Medium,855,Exam Room,Algorithms,42.77892464,"['Design', 'Heap (Priority Queue)', 'Ordered Set']"
Medium,856,Score of Parentheses,Algorithms,63.74608394,"['String', 'Stack']"
Hard,857,Minimum Cost to Hire K Workers,Algorithms,63.43560572,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Medium,858,Mirror Reflection,Algorithms,61.99891193,"['Math', 'Geometry', 'Number Theory']"
Easy,859,Buddy Strings,Algorithms,33.61019817,"['Hash Table', 'String']"
Easy,860,Lemonade Change,Algorithms,58.37386196,"['Array', 'Greedy']"
Medium,861,Score After Flipping Matrix,Algorithms,80.22611906,"['Array', 'Greedy', 'Bit Manipulation', 'Matrix']"
Hard,862,Shortest Subarray with Sum at Least K,Algorithms,32.24373584,"['Array', 'Binary Search', 'Queue', 'Sliding Window', 'Heap (Priority Queue)', 'Prefix Sum', 'Monotonic Queue']"
Medium,863,All Nodes Distance K in Binary Tree,Algorithms,66.22693556,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,864,Shortest Path to Get All Keys,Algorithms,53.64470053,"['Array', 'Bit Manipulation', 'Breadth-First Search', 'Matrix']"
Medium,865,Smallest Subtree with all the Deepest Nodes,Algorithms,72.40115248,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,866,Prime Palindrome,Algorithms,26.76787749,"['Math', 'Number Theory']"
Easy,867,Transpose Matrix,Algorithms,74.11965572,"['Array', 'Matrix', 'Simulation']"
Easy,868,Binary Gap,Algorithms,64.54470679,['Bit Manipulation']
Medium,869,Reordered Power of 2,Algorithms,62.1611687,"['Hash Table', 'Math', 'Sorting', 'Counting', 'Enumeration']"
Medium,870,Advantage Shuffle,Algorithms,53.27415904,"['Array', 'Two Pointers', 'Greedy', 'Sorting']"
Hard,871,Minimum Number of Refueling Stops,Algorithms,40.50663152,"['Array', 'Dynamic Programming', 'Greedy', 'Heap (Priority Queue)']"
Easy,872,Leaf-Similar Trees,Algorithms,70.09238956,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,873,Length of Longest Fibonacci Subsequence,Algorithms,57.62783749,"['Array', 'Hash Table', 'Dynamic Programming']"
Medium,874,Walking Robot Simulation,Algorithms,58.18773368,"['Array', 'Hash Table', 'Simulation']"
Medium,875,Koko Eating Bananas,Algorithms,49.04479571,"['Array', 'Binary Search']"
Easy,876,Middle of the Linked List,Algorithms,80.41470463,"['Linked List', 'Two Pointers']"
Medium,877,Stone Game,Algorithms,71.52704136,"['Array', 'Math', 'Dynamic Programming', 'Game Theory']"
Hard,878,Nth Magical Number,Algorithms,35.75921656,"['Math', 'Binary Search']"
Hard,879,Profitable Schemes,Algorithms,48.01608818,"['Array', 'Dynamic Programming']"
Medium,880,Decoded String at Index,Algorithms,36.62154931,"['String', 'Stack']"
Medium,881,Boats to Save People,Algorithms,60.15191033,"['Array', 'Two Pointers', 'Greedy', 'Sorting']"
Hard,882,Reachable Nodes In Subdivided Graph,Algorithms,50.7527659,"['Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Easy,883,Projection Area of 3D Shapes,Algorithms,73.99744076,"['Array', 'Math', 'Geometry', 'Matrix']"
Easy,884,Uncommon Words from Two Sentences,Algorithms,75.31106682,"['Hash Table', 'String', 'Counting']"
Medium,885,Spiral Matrix III,Algorithms,84.45804027,"['Array', 'Matrix', 'Simulation']"
Medium,886,Possible Bipartition,Algorithms,51.40947279,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Hard,887,Super Egg Drop,Algorithms,28.62522585,"['Math', 'Binary Search', 'Dynamic Programming']"
Easy,888,Fair Candy Swap,Algorithms,63.15019619,"['Array', 'Hash Table', 'Binary Search', 'Sorting']"
Medium,889,Construct Binary Tree from Preorder and Postorder Traversal,Algorithms,77.96863531,"['Array', 'Hash Table', 'Divide and Conquer', 'Tree', 'Binary Tree']"
Medium,890,Find and Replace Pattern,Algorithms,76.8137382,"['Array', 'Hash Table', 'String']"
Hard,891,Sum of Subsequence Widths,Algorithms,38.86865155,"['Array', 'Math', 'Sorting']"
Easy,892,Surface Area of 3D Shapes,Algorithms,67.91018848,"['Array', 'Math', 'Geometry', 'Matrix']"
Medium,893,Groups of Special-Equivalent Strings,Algorithms,72.71782158,"['Array', 'Hash Table', 'String', 'Sorting']"
Medium,894,All Possible Full Binary Trees,Algorithms,82.69354164,"['Dynamic Programming', 'Tree', 'Recursion', 'Memoization', 'Binary Tree']"
Hard,895,Maximum Frequency Stack,Algorithms,66.11677889,"['Hash Table', 'Stack', 'Design', 'Ordered Set']"
Easy,896,Monotonic Array,Algorithms,61.6400735,['Array']
Easy,897,Increasing Order Search Tree,Algorithms,78.61255806,"['Stack', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,898,Bitwise ORs of Subarrays,Algorithms,40.59608083,"['Array', 'Dynamic Programming', 'Bit Manipulation']"
Hard,899,Orderly Queue,Algorithms,66.18245206,"['Math', 'String', 'Sorting']"
Medium,900,RLE Iterator,Algorithms,58.86819809,"['Array', 'Design', 'Counting', 'Iterator']"
Medium,901,Online Stock Span,Algorithms,67.14672751,"['Stack', 'Design', 'Monotonic Stack', 'Data Stream']"
Hard,902,Numbers At Most N Given Digit Set,Algorithms,43.2778319,"['Array', 'Math', 'String', 'Binary Search', 'Dynamic Programming']"
Hard,903,Valid Permutations for DI Sequence,Algorithms,56.74108527,"['String', 'Dynamic Programming', 'Prefix Sum']"
Medium,904,Fruit Into Baskets,Algorithms,46.08351602,"['Array', 'Hash Table', 'Sliding Window']"
Easy,905,Sort Array By Parity,Algorithms,76.30283763,"['Array', 'Two Pointers', 'Sorting']"
Hard,906,Super Palindromes,Algorithms,39.24600753,"['Math', 'String', 'Enumeration']"
Medium,907,Sum of Subarray Minimums,Algorithms,37.50403243,"['Array', 'Dynamic Programming', 'Stack', 'Monotonic Stack']"
Easy,908,Smallest Range I,Algorithms,71.74734253,"['Array', 'Math']"
Medium,909,Snakes and Ladders,Algorithms,44.12582372,"['Array', 'Breadth-First Search', 'Matrix']"
Medium,910,Smallest Range II,Algorithms,37.08684431,"['Array', 'Math', 'Greedy', 'Sorting']"
Medium,911,Online Election,Algorithms,51.77458377,"['Array', 'Hash Table', 'Binary Search', 'Design']"
Medium,912,Sort an Array,Algorithms,56.78670082,"['Array', 'Divide and Conquer', 'Sorting', 'Heap (Priority Queue)', 'Merge Sort', 'Bucket Sort', 'Radix Sort', 'Counting Sort']"
Hard,913,Cat and Mouse,Algorithms,33.96850957,"['Math', 'Dynamic Programming', 'Graph', 'Topological Sort', 'Memoization', 'Game Theory']"
Easy,914,X of a Kind in a Deck of Cards,Algorithms,29.85839906,"['Array', 'Hash Table', 'Math', 'Counting', 'Number Theory']"
Medium,915,Partition Array into Disjoint Intervals,Algorithms,48.98624729,['Array']
Medium,916,Word Subsets,Algorithms,55.70130022,"['Array', 'Hash Table', 'String']"
Easy,917,Reverse Only Letters,Algorithms,66.71016276,"['Two Pointers', 'String']"
Medium,918,Maximum Sum Circular Subarray,Algorithms,47.42606466,"['Array', 'Divide and Conquer', 'Dynamic Programming', 'Queue', 'Monotonic Queue']"
Medium,919,Complete Binary Tree Inserter,Algorithms,64.51137786,"['Tree', 'Breadth-First Search', 'Design', 'Binary Tree']"
Hard,920,Number of Music Playlists,Algorithms,59.97209025,"['Math', 'Dynamic Programming', 'Combinatorics']"
Medium,921,Minimum Add to Make Parentheses Valid,Algorithms,74.70978451,"['String', 'Stack', 'Greedy']"
Easy,922,Sort Array By Parity II,Algorithms,71.00162017,"['Array', 'Two Pointers', 'Sorting']"
Medium,923,3Sum With Multiplicity,Algorithms,45.77141247,"['Array', 'Hash Table', 'Two Pointers', 'Sorting', 'Counting']"
Hard,924,Minimize Malware Spread,Algorithms,42.34252138,"['Array', 'Hash Table', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Easy,925,Long Pressed Name,Algorithms,32.49953997,"['Two Pointers', 'String']"
Medium,926,Flip String to Monotone Increasing,Algorithms,61.5829058,"['String', 'Dynamic Programming']"
Hard,927,Three Equal Parts,Algorithms,40.63101763,"['Array', 'Math']"
Hard,928,Minimize Malware Spread II,Algorithms,44.54238086,"['Array', 'Hash Table', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Easy,929,Unique Email Addresses,Algorithms,67.54634167,"['Array', 'Hash Table', 'String']"
Medium,930,Binary Subarrays With Sum,Algorithms,65.68686362,"['Array', 'Hash Table', 'Sliding Window', 'Prefix Sum']"
Medium,931,Minimum Falling Path Sum,Algorithms,61.66451443,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,932,Beautiful Array,Algorithms,66.94830683,"['Array', 'Math', 'Divide and Conquer']"
Easy,933,Number of Recent Calls,Algorithms,77.19033145,"['Design', 'Queue', 'Data Stream']"
Medium,934,Shortest Bridge,Algorithms,58.53021472,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Medium,935,Knight Dialer,Algorithms,61.11689895,['Dynamic Programming']
Hard,936,Stamping The Sequence,Algorithms,61.84142913,"['String', 'Stack', 'Greedy', 'Queue']"
Medium,937,Reorder Data in Log Files,Algorithms,56.73666505,"['Array', 'String', 'Sorting']"
Easy,938,Range Sum of BST,Algorithms,87.42751736,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,939,Minimum Area Rectangle,Algorithms,54.95089464,"['Array', 'Hash Table', 'Math', 'Geometry', 'Sorting']"
Hard,940,Distinct Subsequences II,Algorithms,43.46983397,"['String', 'Dynamic Programming']"
Easy,941,Valid Mountain Array,Algorithms,34.24315119,['Array']
Easy,942,DI String Match,Algorithms,79.91506894,"['Array', 'Two Pointers', 'String', 'Greedy']"
Hard,943,Find the Shortest Superstring,Algorithms,44.16483865,"['Array', 'String', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Easy,944,Delete Columns to Make Sorted,Algorithms,74.74564668,"['Array', 'String']"
Medium,945,Minimum Increment to Make Array Unique,Algorithms,60.30208373,"['Array', 'Greedy', 'Sorting', 'Counting']"
Medium,946,Validate Stack Sequences,Algorithms,69.65258436,"['Array', 'Stack', 'Simulation']"
Medium,947,Most Stones Removed with Same Row or Column,Algorithms,62.13919438,"['Hash Table', 'Depth-First Search', 'Union Find', 'Graph']"
Medium,948,Bag of Tokens,Algorithms,59.14555619,"['Array', 'Two Pointers', 'Greedy', 'Sorting']"
Medium,949,Largest Time for Given Digits,Algorithms,35.49744559,"['Array', 'String', 'Backtracking', 'Enumeration']"
Medium,950,Reveal Cards In Increasing Order,Algorithms,83.21420844,"['Array', 'Queue', 'Sorting', 'Simulation']"
Medium,951,Flip Equivalent Binary Trees,Algorithms,69.70575798,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,952,Largest Component Size by Common Factor,Algorithms,41.08154494,"['Array', 'Hash Table', 'Math', 'Union Find', 'Number Theory']"
Easy,953,Verifying an Alien Dictionary,Algorithms,55.52949792,"['Array', 'Hash Table', 'String']"
Medium,954,Array of Doubled Pairs,Algorithms,39.39988097,"['Array', 'Hash Table', 'Greedy', 'Sorting']"
Medium,955,Delete Columns to Make Sorted II,Algorithms,35.57887074,"['Array', 'String', 'Greedy']"
Hard,956,Tallest Billboard,Algorithms,51.86760923,"['Array', 'Dynamic Programming']"
Medium,957,Prison Cells After N Days,Algorithms,38.94612968,"['Array', 'Hash Table', 'Math', 'Bit Manipulation']"
Medium,958,Check Completeness of a Binary Tree,Algorithms,58.25667418,"['Tree', 'Breadth-First Search', 'Binary Tree']"
Medium,959,Regions Cut By Slashes,Algorithms,77.631102,"['Array', 'Hash Table', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Hard,960,Delete Columns to Make Sorted III,Algorithms,58.63320652,"['Array', 'String', 'Dynamic Programming']"
Easy,961,N-Repeated Element in Size 2N Array,Algorithms,77.40195092,"['Array', 'Hash Table']"
Medium,962,Maximum Width Ramp,Algorithms,55.69879147,"['Array', 'Two Pointers', 'Stack', 'Monotonic Stack']"
Medium,963,Minimum Area Rectangle II,Algorithms,55.5738753,"['Array', 'Math', 'Geometry']"
Hard,964,Least Operators to Express Number,Algorithms,48.41596336,"['Math', 'Dynamic Programming', 'Memoization']"
Easy,965,Univalued Binary Tree,Algorithms,72.01608688,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,966,Vowel Spellchecker,Algorithms,51.52968863,"['Array', 'Hash Table', 'String']"
Medium,967,Numbers With Same Consecutive Differences,Algorithms,58.67789616,"['Backtracking', 'Breadth-First Search']"
Hard,968,Binary Tree Cameras,Algorithms,47.10532387,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,969,Pancake Sorting,Algorithms,71.13832433,"['Array', 'Two Pointers', 'Greedy', 'Sorting']"
Medium,970,Powerful Integers,Algorithms,44.01766881,"['Hash Table', 'Math', 'Enumeration']"
Medium,971,Flip Binary Tree To Match Preorder Traversal,Algorithms,51.00549672,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,972,Equal Rational Numbers,Algorithms,44.52536027,"['Math', 'String']"
Medium,973,K Closest Points to Origin,Algorithms,67.81280334,"['Array', 'Math', 'Divide and Conquer', 'Geometry', 'Sorting', 'Heap (Priority Queue)', 'Quickselect']"
Medium,974,Subarray Sums Divisible by K,Algorithms,55.58180337,"['Array', 'Hash Table', 'Prefix Sum']"
Hard,975,Odd Even Jump,Algorithms,40.7031003,"['Array', 'Dynamic Programming', 'Stack', 'Monotonic Stack', 'Ordered Set']"
Easy,976,Largest Perimeter Triangle,Algorithms,57.24689266,"['Array', 'Math', 'Greedy', 'Sorting']"
Easy,977,Squares of a Sorted Array,Algorithms,73.17715247,"['Array', 'Two Pointers', 'Sorting']"
Medium,978,Longest Turbulent Subarray,Algorithms,47.95243007,"['Array', 'Dynamic Programming', 'Sliding Window']"
Medium,979,Distribute Coins in Binary Tree,Algorithms,77.1446112,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,980,Unique Paths III,Algorithms,82.27669502,"['Array', 'Backtracking', 'Bit Manipulation', 'Matrix']"
Medium,981,Time Based Key-Value Store,Algorithms,49.29887253,"['Hash Table', 'String', 'Binary Search', 'Design']"
Hard,982,Triples with Bitwise AND Equal To Zero,Algorithms,59.19785511,"['Array', 'Hash Table', 'Bit Manipulation']"
Medium,983,Minimum Cost For Tickets,Algorithms,67.40828098,"['Array', 'Dynamic Programming']"
Medium,984,String Without AAA or BBB,Algorithms,44.46813686,"['String', 'Greedy']"
Medium,985,Sum of Even Numbers After Queries,Algorithms,68.48036463,"['Array', 'Simulation']"
Medium,986,Interval List Intersections,Algorithms,72.60828184,"['Array', 'Two Pointers', 'Line Sweep']"
Hard,987,Vertical Order Traversal of a Binary Tree,Algorithms,50.95174681,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Sorting', 'Binary Tree']"
Medium,988,Smallest String Starting From Leaf,Algorithms,60.75927011,"['String', 'Backtracking', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,989,Add to Array-Form of Integer,Algorithms,45.03155418,"['Array', 'Math']"
Medium,990,Satisfiability of Equality Equations,Algorithms,50.97133763,"['Array', 'String', 'Union Find', 'Graph']"
Medium,991,Broken Calculator,Algorithms,55.05108172,"['Math', 'Greedy']"
Hard,992,Subarrays with K Different Integers,Algorithms,65.52246306,"['Array', 'Hash Table', 'Sliding Window', 'Counting']"
Easy,993,Cousins in Binary Tree,Algorithms,58.02352838,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,994,Rotting Oranges,Algorithms,56.37575489,"['Array', 'Breadth-First Search', 'Matrix']"
Hard,995,Minimum Number of K Consecutive Bit Flips,Algorithms,62.12701448,"['Array', 'Bit Manipulation', 'Queue', 'Sliding Window', 'Prefix Sum']"
Hard,996,Number of Squareful Arrays,Algorithms,50.46537201,"['Array', 'Hash Table', 'Math', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Easy,997,Find the Town Judge,Algorithms,49.94696937,"['Array', 'Hash Table', 'Graph']"
Medium,998,Maximum Binary Tree II,Algorithms,69.06332343,"['Tree', 'Binary Tree']"
Easy,999,Available Captures for Rook,Algorithms,70.27731841,"['Array', 'Matrix', 'Simulation']"
Hard,1000,Minimum Cost to Merge Stones,Algorithms,44.19494345,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Hard,1001,Grid Illumination,Algorithms,37.85746852,"['Array', 'Hash Table']"
Easy,1002,Find Common Characters,Algorithms,74.52244711,"['Array', 'Hash Table', 'String']"
Medium,1003,Check If Word Is Valid After Substitutions,Algorithms,60.07378002,"['String', 'Stack']"
Medium,1004,Max Consecutive Ones III,Algorithms,65.71768274,"['Array', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Easy,1005,Maximize Sum Of Array After K Negations,Algorithms,52.24637614,"['Array', 'Greedy', 'Sorting']"
Medium,1006,Clumsy Factorial,Algorithms,59.04294254,"['Math', 'Stack', 'Simulation']"
Medium,1007,Minimum Domino Rotations For Equal Row,Algorithms,56.44460556,"['Array', 'Greedy']"
Medium,1008,Construct Binary Search Tree from Preorder Traversal,Algorithms,83.15224274,"['Array', 'Stack', 'Tree', 'Binary Search Tree', 'Monotonic Stack', 'Binary Tree']"
Easy,1009,Complement of Base 10 Integer,Algorithms,60.75291638,['Bit Manipulation']
Medium,1010,Pairs of Songs With Total Durations Divisible by 60,Algorithms,53.22849559,"['Array', 'Hash Table', 'Counting']"
Medium,1011,Capacity To Ship Packages Within D Days,Algorithms,71.82037919,"['Array', 'Binary Search']"
Hard,1012,Numbers With Repeated Digits,Algorithms,43.28957431,"['Math', 'Dynamic Programming']"
Easy,1013,Partition Array Into Three Parts With Equal Sum,Algorithms,42.02525221,"['Array', 'Greedy']"
Medium,1014,Best Sightseeing Pair,Algorithms,62.60987051,"['Array', 'Dynamic Programming']"
Medium,1015,Smallest Integer Divisible by K,Algorithms,46.54934966,"['Hash Table', 'Math']"
Medium,1016,Binary String With Substrings Representing 1 To N,Algorithms,57.93134938,['String']
Medium,1017,Convert to Base -2,Algorithms,61.17055344,['Math']
Easy,1018,Binary Prefix Divisible By 5,Algorithms,46.93904247,"['Array', 'Bit Manipulation']"
Medium,1019,Next Greater Node In Linked List,Algorithms,62.12890443,"['Array', 'Linked List', 'Stack', 'Monotonic Stack']"
Medium,1020,Number of Enclaves,Algorithms,70.27969787,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Easy,1021,Remove Outermost Parentheses,Algorithms,85.34416485,"['String', 'Stack']"
Easy,1022,Sum of Root To Leaf Binary Numbers,Algorithms,73.37024823,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,1023,Camelcase Matching,Algorithms,63.61328301,"['Array', 'Two Pointers', 'String', 'Trie', 'String Matching']"
Medium,1024,Video Stitching,Algorithms,51.92992061,"['Array', 'Dynamic Programming', 'Greedy']"
Easy,1025,Divisor Game,Algorithms,70.247543,"['Math', 'Dynamic Programming', 'Brainteaser', 'Game Theory']"
Medium,1026,Maximum Difference Between Node and Ancestor,Algorithms,78.04950319,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,1027,Longest Arithmetic Subsequence,Algorithms,49.4263328,"['Array', 'Hash Table', 'Binary Search', 'Dynamic Programming']"
Hard,1028,Recover a Tree From Preorder Traversal,Algorithms,83.30039631,"['String', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,1029,Two City Scheduling,Algorithms,67.58356661,"['Array', 'Greedy', 'Sorting']"
Easy,1030,Matrix Cells in Distance Order,Algorithms,72.64231634,"['Array', 'Math', 'Geometry', 'Sorting', 'Matrix']"
Medium,1031,Maximum Sum of Two Non-Overlapping Subarrays,Algorithms,60.19054362,"['Array', 'Dynamic Programming', 'Sliding Window']"
Hard,1032,Stream of Characters,Algorithms,51.16101033,"['Array', 'String', 'Design', 'Trie', 'Data Stream']"
Medium,1033,Moving Stones Until Consecutive,Algorithms,49.37153832,"['Math', 'Brainteaser']"
Medium,1034,Coloring A Border,Algorithms,49.69338151,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Medium,1035,Uncrossed Lines,Algorithms,64.17461077,"['Array', 'Dynamic Programming']"
Hard,1036,Escape a Large Maze,Algorithms,35.2019809,"['Array', 'Hash Table', 'Depth-First Search', 'Breadth-First Search']"
Easy,1037,Valid Boomerang,Algorithms,37.84844916,"['Array', 'Math', 'Geometry']"
Medium,1038,Binary Search Tree to Greater Sum Tree,Algorithms,88.24879278,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,1039,Minimum Score Triangulation of Polygon,Algorithms,60.06451994,"['Array', 'Dynamic Programming']"
Medium,1040,Moving Stones Until Consecutive II,Algorithms,57.11055844,"['Array', 'Math', 'Sliding Window', 'Sorting']"
Medium,1041,Robot Bounded In Circle,Algorithms,56.20912901,"['Math', 'String', 'Simulation']"
Medium,1042,Flower Planting With No Adjacent,Algorithms,52.23698318,"['Depth-First Search', 'Breadth-First Search', 'Graph']"
Medium,1043,Partition Array for Maximum Sum,Algorithms,76.91560861,"['Array', 'Dynamic Programming']"
Hard,1044,Longest Duplicate Substring,Algorithms,30.75544008,"['String', 'Binary Search', 'Sliding Window', 'Rolling Hash', 'Suffix Array', 'Hash Function']"
Medium,1045,Customers Who Bought All Products,Database,63.04259177,['Database']
Easy,1046,Last Stone Weight,Algorithms,65.88551495,"['Array', 'Heap (Priority Queue)']"
Easy,1047,Remove All Adjacent Duplicates In String,Algorithms,71.42139909,"['String', 'Stack']"
Medium,1048,Longest String Chain,Algorithms,61.86668954,"['Array', 'Hash Table', 'Two Pointers', 'String', 'Dynamic Programming', 'Sorting']"
Medium,1049,Last Stone Weight II,Algorithms,57.38660839,"['Array', 'Dynamic Programming']"
Easy,1050,Actors and Directors Who Cooperated At Least Three Times,Database,70.61542299,['Database']
Easy,1051,Height Checker,Algorithms,81.09780926,"['Array', 'Sorting', 'Counting Sort']"
Medium,1052,Grumpy Bookstore Owner,Algorithms,64.08906601,"['Array', 'Sliding Window']"
Medium,1053,Previous Permutation With One Swap,Algorithms,49.38885068,"['Array', 'Greedy']"
Medium,1054,Distant Barcodes,Algorithms,47.36857113,"['Array', 'Hash Table', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Counting']"
Medium,1055,Shortest Way to Form String,Algorithms,61.28858121,"['Two Pointers', 'String', 'Binary Search', 'Greedy']"
Easy,1056,Confusing Number,Algorithms,49.20571429,['Math']
Medium,1057,Campus Bikes,Algorithms,58.931374,"['Array', 'Sorting', 'Heap (Priority Queue)']"
Medium,1058,Minimize Rounding Error to Meet Target,Algorithms,45.42165561,"['Array', 'Math', 'String', 'Greedy', 'Sorting']"
Medium,1059,All Paths from Source Lead to Destination,Algorithms,37.06063973,"['Graph', 'Topological Sort']"
Medium,1060,Missing Element in Sorted Array,Algorithms,58.58008469,"['Array', 'Binary Search']"
Medium,1061,Lexicographically Smallest Equivalent String,Algorithms,76.61335043,"['String', 'Union Find']"
Medium,1062,Longest Repeating Substring,Algorithms,62.98573278,"['String', 'Binary Search', 'Dynamic Programming', 'Rolling Hash', 'Suffix Array', 'Hash Function']"
Hard,1063,Number of Valid Subarrays,Algorithms,79.18272938,"['Array', 'Stack', 'Monotonic Stack']"
Easy,1064,Fixed Point,Algorithms,63.89258498,"['Array', 'Binary Search']"
Easy,1065,Index Pairs of a String,Algorithms,68.15745661,"['Array', 'String', 'Trie', 'Sorting']"
Medium,1066,Campus Bikes II,Algorithms,55.28860149,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,1067,Digit Count in Range,Algorithms,46.00456621,"['Math', 'Dynamic Programming']"
Easy,1068,Product Sales Analysis I,Database,84.43243789,['Database']
Easy,1069,Product Sales Analysis II,Database,82.22038367,['Database']
Medium,1070,Product Sales Analysis III,Database,44.42461552,['Database']
Easy,1071,Greatest Common Divisor of Strings,Algorithms,52.63342309,"['Math', 'String']"
Medium,1072,Flip Columns For Maximum Number of Equal Rows,Algorithms,78.51503168,"['Array', 'Hash Table', 'Matrix']"
Medium,1073,Adding Two Negabinary Numbers,Algorithms,36.83137487,"['Array', 'Math']"
Hard,1074,Number of Submatrices That Sum to Target,Algorithms,74.43415356,"['Array', 'Hash Table', 'Matrix', 'Prefix Sum']"
Easy,1075,Project Employees I,Database,65.48361734,['Database']
Easy,1076,Project Employees II,Database,50.26466449,['Database']
Medium,1077,Project Employees III,Database,77.11554908,['Database']
Easy,1078,Occurrences After Bigram,Algorithms,63.64663909,['String']
Medium,1079,Letter Tile Possibilities,Algorithms,83.56259033,"['Hash Table', 'String', 'Backtracking', 'Counting']"
Medium,1080,Insufficient Nodes in Root to Leaf Paths,Algorithms,53.45043322,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,1081,Smallest Subsequence of Distinct Characters,Algorithms,61.82289607,"['String', 'Stack', 'Greedy', 'Monotonic Stack']"
Easy,1082,Sales Analysis I,Database,74.72421337,['Database']
Easy,1083,Sales Analysis II,Database,49.92268367,['Database']
Easy,1084,Sales Analysis III,Database,46.72624261,['Database']
Easy,1085,Sum of Digits in the Minimum Number,Algorithms,76.60758575,"['Array', 'Math']"
Easy,1086,High Five,Algorithms,74.35927023,"['Array', 'Hash Table', 'Sorting', 'Heap (Priority Queue)']"
Medium,1087,Brace Expansion,Algorithms,66.67952529,"['String', 'Backtracking', 'Breadth-First Search']"
Hard,1088,Confusing Number II,Algorithms,47.07575479,"['Math', 'Backtracking']"
Easy,1089,Duplicate Zeros,Algorithms,52.73369176,"['Array', 'Two Pointers']"
Medium,1090,Largest Values From Labels,Algorithms,63.05011574,"['Array', 'Hash Table', 'Greedy', 'Sorting', 'Counting']"
Medium,1091,Shortest Path in Binary Matrix,Algorithms,49.53892885,"['Array', 'Breadth-First Search', 'Matrix']"
Hard,1092,Shortest Common Supersequence ,Algorithms,61.23411244,"['String', 'Dynamic Programming']"
Medium,1093,Statistics from a Large Sample,Algorithms,42.14764105,"['Array', 'Math', 'Probability and Statistics']"
Medium,1094,Car Pooling,Algorithms,56.00391902,"['Array', 'Sorting', 'Heap (Priority Queue)', 'Simulation', 'Prefix Sum']"
Hard,1095,Find in Mountain Array,,,
et `low = 0` and `high = peakIndex`.,,,,,
    - While `low <= high`, do the following:,,,,
        - Find the middle index of the search space `[low, high]`. Let's call the index `testIndex`.,,,,
        - If `testIndex` is in the `cache`, then set `curr = cache.get(testIndex)`. Otherwise,,,,
        - If `curr == target`, then return `testIndex`.,,,,
        - If `curr < target`, then set `low = testIndex + 1`.,,,,
        - Otherwise, set `high = testIndex - 1`.,,,,
,,,,,
5. Search for the `target` element in the strictly decreasing part of the array.,,,,,
    - Set `low = peakIndex + 1` and `high = length - 1`.,,,,,
    - While `low <= high`, do the following:,,,,
        - Find the middle index of the search space `[low, high]`. Let's call the index `testIndex`.,,,,
        - If `testIndex` is in the `cache`, then set `curr = cache.get(testIndex)`. Otherwise,,,,
        - If `curr == target`, then return `testIndex`.,,,,
        - If `curr > target`, then set `low = testIndex + 1`.,,,,
        - Otherwise, set `high = testIndex - 1`.,,,,
,,,,,
6. `target` not found in the `mountainArr`. Return `-1`.,,,,,
,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/kW5svw5e/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""kW5svw5e""""></iframe>",,,,,
,,,,,
Readers might be prompted to think that `cache` is redundant. It might be because in this problem `get(k)` looks like $O(1)$ operation. However, when the time complexity of any function is not specified explicitly,,,,
,,,,,
Here is the implementation without caching.,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/nPj8cjko/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""nPj8cjko""""></iframe>",,,,,
,,,,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Let $N$ be the length of the `mountainArr`. Moreover, let's assume that each call to `mountainArr.get(k)` takes $O(1)$ time.,,,,
,,,,,
* Time complexity: $O(\log N)$,,,,,
,,,,,
    - **Finding the `peakIndex`** ,,,,,
        There will be $O(\log_2 {N})$ iterations in the `while` loop. The reason is that at each iteration, the search space is reduced to half. At each iteration,,,,
        - computing `testIndex` using addition and bit shift. This takes $O(1)$ time.,,,,,
        ,,,,,
        - Getting the value of `mountainArr.get(testIndex)` from the `cache` or from the `mountainArr`. Caching if not present in the `cache`. This takes $O(1)$ time.,,,,,
        - Getting the value of `mountainArr.get(testIndex + 1)` from the `cache` or from the `mountainArr`. Caching if not present in the `cache`. This takes $O(1)$ time.,,,,,
        - Returning or resetting `low` or `high`. This takes $O(1)$ time.,,,,,
,,,,,
        Thus, the time complexity of finding the `peakIndex` is $O(\log_2 {N})$.,,,,
    ,,,,,
    - **Searching in the strictly increasing part of the array**,,,,,
        There will be $O(\log_2 {N})$ iterations in the `while` loop. The reason is that at each iteration, the search space is reduced to half. At each iteration,,,,
        - computing `testIndex` using addition and bit shift. This takes $O(1)$ time.,,,,,
         ,,,,,
        - Getting the value of `mountainArr.get(testIndex)` from the `cache` or from the `mountainArr`. This takes $O(1)$ time.,,,,,
        - Returning or resetting `low` or `high`. This takes $O(1)$ time.,,,,,
,,,,,
        Thus, the time complexity of searching in the strictly increasing part of the array is $O(\log_2 {N})$.,,,,
    ,,,,,
    - **Searching in the strictly decreasing part of the array**,,,,,
        There will be $O(\log_2 {N})$ iterations in the `while` loop. The reason is that at each iteration, the search space is reduced to half. At each iteration,,,,
        - computing `testIndex` using addition and bit shift. This takes $O(1)$ time.,,,,,
         ,,,,,
        - Getting the value of `mountainArr.get(testIndex)` from the `cache` or from the `mountainArr`. This takes $O(1)$ time.,,,,,
        - Returning or resetting `low` or `high`. This takes $O(1)$ time.,,,,,
,,,,,
        Thus, the time complexity of searching in the strictly decreasing part of the array is $O(\log_2 {N})$.,,,,
    ,,,,,
    Hence, the overall time complexity is $O(\log_2 {N})$.,,,,
,,,,,
* Space complexity: $O(\log N)$,,,,,
    ,,,,,
    The `cache` will contain $O(\log N)$ elements because we are caching only the elements for which we are calling `mountainArr.get(k)`.,,,,,
,,,,,
    Hence, the space complexity is $O(\log N)$.,,,,
     ,,,,,
"---""",,,,,
Hard,1096,Brace Expansion II,Algorithms,63.1170531,"['String', 'Backtracking', 'Stack', 'Breadth-First Search']"
Hard,1097,Game Play Analysis V,Database,50.8356466,['Database']
Medium,1098,Unpopular Books,Database,43.36567055,['Database']
Easy,1099,Two Sum Less Than K,Algorithms,62.01134481,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,1100,Find K-Length Substrings With No Repeated Characters,Algorithms,76.21022909,"['Hash Table', 'String', 'Sliding Window']"
Medium,1101,The Earliest Moment When Everyone Become Friends,Algorithms,65.68377099,"['Array', 'Union Find', 'Sorting']"
Medium,1102,Path With Maximum Minimum Value,Algorithms,53.99606491,"['Array', 'Binary Search', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Heap (Priority Queue)', 'Matrix']"
Easy,1103,Distribute Candies to People,Algorithms,66.40332835,"['Math', 'Simulation']"
Medium,1104,Path In Zigzag Labelled Binary Tree,Algorithms,75.4744393,"['Math', 'Tree', 'Binary Tree']"
Medium,1105,Filling Bookcase Shelves,Algorithms,68.68420328,"['Array', 'Dynamic Programming']"
Hard,1106,Parsing A Boolean Expression,Algorithms,69.92226156,"['String', 'Stack', 'Recursion']"
Medium,1107,New Users Daily Count,Database,45.00126439,['Database']
Easy,1108,Defanging an IP Address,Algorithms,89.64895601,['String']
Medium,1109,Corporate Flight Bookings,Algorithms,63.99905311,"['Array', 'Prefix Sum']"
Medium,1110,Delete Nodes And Return Forest,Algorithms,72.4173795,"['Array', 'Hash Table', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,1111,Maximum Nesting Depth of Two Valid Parentheses Strings,Algorithms,71.33148934,"['String', 'Stack']"
Medium,1112,Highest Grade For Each Student,Database,71.08384742,['Database']
Easy,1113,Reported Posts,Database,65.13055463,['Database']
Easy,1114,Print in Order,Concurrency,71.40621251,['Concurrency']
Medium,1115,Print FooBar Alternately,Concurrency,69.38280122,['Concurrency']
Medium,1116,Print Zero Even Odd,Concurrency,63.30980516,['Concurrency']
Medium,1117,Building H2O,Concurrency,57.4626802,['Concurrency']
Easy,1118,Number of Days in a Month,Algorithms,58.99725713,['Math']
Easy,1119,Remove Vowels from a String,Algorithms,91.22854354,['String']
Medium,1120,Maximum Average Subtree,Algorithms,66.80937213,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,1121,Divide Array Into Increasing Sequences,Algorithms,60.49855072,"['Array', 'Counting']"
Easy,1122,Relative Sort Array,Algorithms,74.91015109,"['Array', 'Hash Table', 'Sorting', 'Counting Sort']"
Medium,1123,Lowest Common Ancestor of Deepest Leaves,Algorithms,78.88503634,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,1124,Longest Well-Performing Interval,Algorithms,35.80787647,"['Array', 'Hash Table', 'Stack', 'Monotonic Stack', 'Prefix Sum']"
Hard,1125,Smallest Sufficient Team,Algorithms,55.3232792,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Medium,1126,Active Businesses,Database,65.91635589,['Database']
Hard,1127,User Purchase Platform,Database,47.13934621,['Database']
Easy,1128,Number of Equivalent Domino Pairs,Algorithms,60.52944628,"['Array', 'Hash Table', 'Counting']"
Medium,1129,Shortest Path with Alternating Colors,Algorithms,47.27609892,"['Breadth-First Search', 'Graph']"
Medium,1130,Minimum Cost Tree From Leaf Values,Algorithms,67.64146183,"['Array', 'Dynamic Programming', 'Stack', 'Greedy', 'Monotonic Stack']"
Medium,1131,Maximum of Absolute Value Expression,Algorithms,48.26530969,"['Array', 'Math']"
Medium,1132,Reported Posts II,Database,32.25736836,['Database']
Easy,1133,Largest Unique Number,Algorithms,70.75038166,"['Array', 'Hash Table', 'Sorting']"
Easy,1134,Armstrong Number,Algorithms,77.83469552,['Math']
Medium,1135,Connecting Cities With Minimum Cost,Algorithms,62.58056652,"['Union Find', 'Graph', 'Heap (Priority Queue)', 'Minimum Spanning Tree']"
Medium,1136,Parallel Courses,Algorithms,61.80609189,"['Graph', 'Topological Sort']"
Easy,1137,N-th Tribonacci Number,Algorithms,63.60455323,"['Math', 'Dynamic Programming', 'Memoization']"
Medium,1138,Alphabet Board Path,Algorithms,51.57136783,"['Hash Table', 'String']"
Medium,1139,Largest 1-Bordered Square,Algorithms,50.69379538,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,1140,Stone Game II,Algorithms,72.99976761,"['Array', 'Math', 'Dynamic Programming', 'Prefix Sum', 'Game Theory']"
Easy,1141,User Activity for the Past 30 Days I,Database,49.41414808,['Database']
Easy,1142,User Activity for the Past 30 Days II,Database,35.71731307,['Database']
Medium,1143,Longest Common Subsequence,Algorithms,58.16506245,"['String', 'Dynamic Programming']"
Medium,1144,Decrease Elements To Make Array Zigzag,Algorithms,48.34513145,"['Array', 'Greedy']"
Medium,1145,Binary Tree Coloring Game,Algorithms,52.48566064,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,1146,Snapshot Array,Algorithms,36.67219682,"['Array', 'Hash Table', 'Binary Search', 'Design']"
Hard,1147,Longest Chunked Palindrome Decomposition,Algorithms,58.76082752,"['Two Pointers', 'String', 'Dynamic Programming', 'Greedy', 'Rolling Hash', 'Hash Function']"
Easy,1148,Article Views I,Database,77.20016622,['Database']
Medium,1149,Article Views II,Database,47.2302842,['Database']
Easy,1150,Check If a Number Is Majority Element in a Sorted Array,Algorithms,59.05185248,"['Array', 'Binary Search']"
Medium,1151,Minimum Swaps to Group All 1's Together,Algorithms,61.074987,"['Array', 'Sliding Window']"
Medium,1152,Analyze User Website Visit Pattern,Algorithms,43.59725116,"['Array', 'Hash Table', 'Sorting']"
Hard,1153,String Transforms Into Another String,Algorithms,34.77702606,"['Hash Table', 'String']"
Easy,1154,Day of the Year,Algorithms,48.03988586,"['Math', 'String']"
Medium,1155,Number of Dice Rolls With Target Sum,Algorithms,61.54261489,['Dynamic Programming']
Medium,1156,Swap For Longest Repeated Character Substring,Algorithms,43.60000479,"['Hash Table', 'String', 'Sliding Window']"
Hard,1157,Online Majority Element In Subarray,Algorithms,39.04469492,"['Array', 'Binary Search', 'Design', 'Binary Indexed Tree', 'Segment Tree']"
Medium,1158,Market Analysis I,Database,57.17814723,['Database']
Hard,1159,Market Analysis II,Database,57.90096242,['Database']
Easy,1160,Find Words That Can Be Formed by Characters,Algorithms,71.01161599,"['Array', 'Hash Table', 'String', 'Counting']"
Medium,1161,Maximum Level Sum of a Binary Tree,Algorithms,67.35108875,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Medium,1162,As Far from Land as Possible,Algorithms,51.79778677,"['Array', 'Dynamic Programming', 'Breadth-First Search', 'Matrix']"
Hard,1163,Last Substring in Lexicographical Order,Algorithms,34.38525372,"['Two Pointers', 'String']"
Medium,1164,Product Price at a Given Date,Database,57.32272533,['Database']
Easy,1165,Single-Row Keyboard,Algorithms,87.6948802,"['Hash Table', 'String']"
Medium,1166,Design File System,Algorithms,64.01503045,"['Hash Table', 'String', 'Design', 'Trie']"
Medium,1167,Minimum Cost to Connect Sticks,Algorithms,71.06497887,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Hard,1168,Optimize Water Distribution in a Village,Algorithms,65.16920735,"['Union Find', 'Graph', 'Heap (Priority Queue)', 'Minimum Spanning Tree']"
Medium,1169,Invalid Transactions,Algorithms,31.25541036,"['Array', 'Hash Table', 'String', 'Sorting']"
Medium,1170,Compare Strings by Frequency of the Smallest Character,Algorithms,62.62515825,"['Array', 'Hash Table', 'String', 'Binary Search', 'Sorting']"
Medium,1171,Remove Zero Sum Consecutive Nodes from Linked List,Algorithms,52.84203569,"['Hash Table', 'Linked List']"
Hard,1172,Dinner Plate Stacks,Algorithms,32.78444288,"['Hash Table', 'Stack', 'Design', 'Heap (Priority Queue)']"
Easy,1173,Immediate Food Delivery I,Database,80.8633162,['Database']
Medium,1174,Immediate Food Delivery II,Database,54.1370434,['Database']
Easy,1175,Prime Arrangements,Algorithms,59.36842443,['Math']
Easy,1176,Diet Plan Performance,Algorithms,54.13081404,"['Array', 'Sliding Window']"
Medium,1177,Can Make Palindrome from Substring,Algorithms,40.11096852,"['Array', 'Hash Table', 'String', 'Bit Manipulation', 'Prefix Sum']"
Hard,1178,Number of Valid Words for Each Puzzle,Algorithms,47.02967469,"['Array', 'Hash Table', 'String', 'Bit Manipulation', 'Trie']"
Easy,1179,Reformat Department Table,Database,76.7073493,['Database']
Easy,1180,Count Substrings with Only One Distinct Letter,Algorithms,80.60665256,"['Math', 'String']"
Medium,1181,Before and After Puzzle,Algorithms,46.5088208,"['Array', 'Hash Table', 'String', 'Sorting']"
Medium,1182,Shortest Distance to Target Color,Algorithms,55.44181354,"['Array', 'Binary Search', 'Dynamic Programming']"
Hard,1183,Maximum Number of Ones,Algorithms,68.61206474,"['Math', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Easy,1184,Distance Between Bus Stops,Algorithms,54.61106967,['Array']
Easy,1185,Day of the Week,Algorithms,58.39740662,['Math']
Medium,1186,Maximum Subarray Sum with One Deletion,Algorithms,45.01345517,"['Array', 'Dynamic Programming']"
Hard,1187,Make Array Strictly Increasing,Algorithms,57.83716525,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting']"
Medium,1188,Design Bounded Blocking Queue,Concurrency,72.99382143,['Concurrency']
Easy,1189,Maximum Number of Balloons,Algorithms,59.72423358,"['Hash Table', 'String', 'Counting']"
Medium,1190,Reverse Substrings Between Each Pair of Parentheses,Algorithms,71.6887448,"['String', 'Stack']"
Medium,1191,K-Concatenation Maximum Sum,Algorithms,24.19443739,"['Array', 'Dynamic Programming']"
Hard,1192,Critical Connections in a Network,Algorithms,57.56819578,"['Depth-First Search', 'Graph', 'Biconnected Component']"
Medium,1193,Monthly Transactions I,Database,58.29171748,['Database']
Hard,1194,Tournament Winners,Database,49.84269276,['Database']
Medium,1195,Fizz Buzz Multithreaded,Concurrency,73.82057373,['Concurrency']
Easy,1196,How Many Apples Can You Put into the Basket,Algorithms,67.03228351,"['Array', 'Greedy', 'Sorting']"
Medium,1197,Minimum Knight Moves,Algorithms,41.27069113,['Breadth-First Search']
Medium,1198,Find Smallest Common Element in All Rows,Algorithms,76.44097659,"['Array', 'Hash Table', 'Binary Search', 'Matrix', 'Counting']"
Hard,1199,Minimum Time to Build Blocks,Algorithms,46.20362957,"['Array', 'Math', 'Greedy', 'Heap (Priority Queue)']"
Easy,1200,Minimum Absolute Difference,Algorithms,70.53520777,"['Array', 'Sorting']"
Medium,1201,Ugly Number III,Algorithms,30.37557443,"['Math', 'Binary Search', 'Combinatorics', 'Number Theory']"
Medium,1202,Smallest String With Swaps,Algorithms,59.3037487,"['Array', 'Hash Table', 'String', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Sorting']"
Hard,1203,Sort Items by Groups Respecting Dependencies,Algorithms,65.62915143,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Medium,1204,Last Person to Fit in the Bus,Database,68.27295601,['Database']
Medium,1205,Monthly Transactions II,Database,42.10763632,['Database']
Hard,1206,Design Skiplist,Algorithms,57.97214576,"['Linked List', 'Design']"
Easy,1207,Unique Number of Occurrences,Algorithms,78.2197083,"['Array', 'Hash Table']"
Medium,1208,Get Equal Substrings Within Budget,Algorithms,58.85341883,"['String', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Medium,1209,Remove All Adjacent Duplicates in String II,Algorithms,59.44234499,"['String', 'Stack']"
Hard,1210,Minimum Moves to Reach Target with Rotations,Algorithms,50.40432491,"['Array', 'Breadth-First Search', 'Matrix']"
Easy,1211,Queries Quality and Percentage,Database,47.67146587,['Database']
Medium,1212,Team Scores in Football Tournament,Database,55.77318974,['Database']
Easy,1213,Intersection of Three Sorted Arrays,Algorithms,80.0993143,"['Array', 'Hash Table', 'Binary Search', 'Counting']"
Medium,1214,Two Sum BSTs,Algorithms,67.37530561,"['Two Pointers', 'Binary Search', 'Stack', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,1215,Stepping Numbers,Algorithms,47.62553965,"['Math', 'Backtracking', 'Breadth-First Search']"
Hard,1216,Valid Palindrome III,Algorithms,49.05740489,"['String', 'Dynamic Programming']"
Easy,1217,Minimum Cost to Move Chips to The Same Position,Algorithms,72.24200832,"['Array', 'Math', 'Greedy']"
Medium,1218,Longest Arithmetic Subsequence of Given Difference,Algorithms,54.47845747,"['Array', 'Hash Table', 'Dynamic Programming']"
Medium,1219,Path with Maximum Gold,Algorithms,68.10926249,"['Array', 'Backtracking', 'Matrix']"
Hard,1220,Count Vowels Permutation,Algorithms,61.50147658,['Dynamic Programming']
Easy,1221,Split a String in Balanced Strings,Algorithms,86.74626941,"['String', 'Greedy', 'Counting']"
Medium,1222,Queens That Can Attack the King,Algorithms,72.13771508,"['Array', 'Matrix', 'Simulation']"
Hard,1223,Dice Roll Simulation,Algorithms,49.8925649,"['Array', 'Dynamic Programming']"
Hard,1224,Maximum Equal Frequency,Algorithms,37.39343331,"['Array', 'Hash Table']"
Hard,1225,Report Contiguous Dates,Database,57.37532912,['Database']
Medium,1226,The Dining Philosophers,Concurrency,54.53157722,['Concurrency']
Medium,1227,Airplane Seat Assignment Probability,Algorithms,66.62520163,"['Math', 'Dynamic Programming', 'Brainteaser', 'Probability and Statistics']"
Easy,1228,Missing Number In Arithmetic Progression,Algorithms,52.07178721,"['Array', 'Math']"
Medium,1229,Meeting Scheduler,Algorithms,55.26153882,"['Array', 'Two Pointers', 'Sorting']"
Medium,1230,Toss Strange Coins,Algorithms,58.14312637,"['Array', 'Math', 'Dynamic Programming', 'Probability and Statistics']"
Hard,1231,Divide Chocolate,Algorithms,59.85138864,"['Array', 'Binary Search']"
Easy,1232,Check If It Is a Straight Line,Algorithms,39.6686758,"['Array', 'Math', 'Geometry']"
Medium,1233,Remove Sub-Folders from the Filesystem,Algorithms,75.71356415,"['Array', 'String', 'Depth-First Search', 'Trie']"
Medium,1234,Replace the Substring for Balanced String,Algorithms,39.43345586,"['String', 'Sliding Window']"
Hard,1235,Maximum Profit in Job Scheduling,Algorithms,54.38822001,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting']"
Medium,1236,Web Crawler,Algorithms,68.7126587,"['String', 'Depth-First Search', 'Breadth-First Search', 'Interactive']"
Medium,1237,Find Positive Integer Solution for a Given Equation,Algorithms,69.42502194,"['Math', 'Two Pointers', 'Binary Search', 'Interactive']"
Medium,1238,Circular Permutation in Binary Representation,Algorithms,71.51238375,"['Math', 'Backtracking', 'Bit Manipulation']"
Medium,1239,Maximum Length of a Concatenated String with Unique Characters,Algorithms,54.23118409,"['Array', 'String', 'Backtracking', 'Bit Manipulation']"
Hard,1240,Tiling a Rectangle with the Fewest Squares,Algorithms,54.34383119,['Backtracking']
Easy,1241,Number of Comments per Post,Database,66.06625541,['Database']
Medium,1242,Web Crawler Multithreaded,Concurrency,49.98412966,"['Depth-First Search', 'Breadth-First Search', 'Concurrency']"
Easy,1243,Array Transformation,Algorithms,53.00389656,"['Array', 'Simulation']"
Medium,1244,Design A Leaderboard,Algorithms,67.93418017,"['Hash Table', 'Design', 'Sorting']"
Medium,1245,Tree Diameter,Algorithms,61.07795512,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Hard,1246,Palindrome Removal,Algorithms,46.35920358,"['Array', 'Dynamic Programming']"
Medium,1247,Minimum Swaps to Make Strings Equal,Algorithms,64.64429904,"['Math', 'String', 'Greedy']"
Medium,1248,Count Number of Nice Subarrays,Algorithms,72.87252051,"['Array', 'Hash Table', 'Math', 'Sliding Window', 'Prefix Sum']"
Medium,1249,Minimum Remove to Make Valid Parentheses,Algorithms,70.61196373,"['String', 'Stack']"
Hard,1250,Check If It Is a Good Array,Algorithms,61.04895971,"['Array', 'Math', 'Number Theory']"
Easy,1251,Average Selling Price,Database,36.81151442,['Database']
Easy,1252,Cells with Odd Values in a Matrix,Algorithms,79.19134139,"['Array', 'Math', 'Simulation']"
Medium,1253,Reconstruct a 2-Row Binary Matrix,Algorithms,47.6074864,"['Array', 'Greedy', 'Matrix']"
Medium,1254,Number of Closed Islands,Algorithms,66.69022814,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Hard,1255,Maximum Score Words Formed by Letters,Algorithms,81.56452158,"['Array', 'String', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Medium,1256,Encode Number,Algorithms,70.10414888,"['Math', 'String', 'Bit Manipulation']"
Medium,1257,Smallest Common Region,Algorithms,67.9022613,"['Array', 'Hash Table', 'String', 'Tree', 'Depth-First Search', 'Breadth-First Search']"
Medium,1258,Synonymous Sentences,Algorithms,56.5416208,"['Array', 'Hash Table', 'String', 'Backtracking', 'Union Find']"
Hard,1259,Handshakes That Don't Cross,Algorithms,59.99444624,"['Math', 'Dynamic Programming']"
Easy,1260,Shift 2D Grid,Algorithms,67.61001327,"['Array', 'Matrix', 'Simulation']"
Medium,1261,Find Elements in a Contaminated Binary Tree,Algorithms,83.98297607,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Design', 'Binary Tree']"
Medium,1262,Greatest Sum Divisible by Three,Algorithms,50.81583405,"['Array', 'Dynamic Programming', 'Greedy', 'Sorting']"
Hard,1263,Minimum Moves to Move a Box to Their Target Location,Algorithms,48.9122784,"['Array', 'Breadth-First Search', 'Heap (Priority Queue)', 'Matrix']"
Medium,1264,Page Recommendations,Database,65.44076029,['Database']
Medium,1265,Print Immutable Linked List in Reverse,Algorithms,94.04797201,"['Linked List', 'Two Pointers', 'Stack', 'Recursion']"
Easy,1266,Minimum Time Visiting All Points,Algorithms,82.54049819,"['Array', 'Math', 'Geometry']"
Medium,1267,Count Servers that Communicate,Algorithms,73.46310957,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix', 'Counting']"
Medium,1268,Search Suggestions System,Algorithms,65.04363718,"['Array', 'String', 'Binary Search', 'Trie', 'Sorting', 'Heap (Priority Queue)']"
Hard,1269,Number of Ways to Stay in the Same Place After Some Steps,Algorithms,50.0760261,['Dynamic Programming']
Medium,1270,All People Report to the Given Manager,Database,84.45975266,['Database']
Easy,1271,Hexspeak,Algorithms,58.2701207,"['Math', 'String']"
Medium,1272,Remove Interval,Algorithms,66.72926343,['Array']
Medium,1273,Delete Tree Nodes,Algorithms,61.27718907,"['Array', 'Tree', 'Depth-First Search', 'Breadth-First Search']"
Hard,1274,Number of Ships in a Rectangle,Algorithms,68.81729921,"['Array', 'Divide and Conquer', 'Interactive']"
Easy,1275,Find Winner on a Tic Tac Toe Game,Algorithms,54.12648335,"['Array', 'Hash Table', 'Matrix', 'Simulation']"
Medium,1276,Number of Burgers with No Waste of Ingredients,Algorithms,50.34596488,['Math']
Medium,1277,Count Square Submatrices with All Ones,Algorithms,78.61576432,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,1278,Palindrome Partitioning III,Algorithms,61.50745517,"['String', 'Dynamic Programming']"
Easy,1279,Traffic Light Controlled Intersection,Concurrency,72.88942729,['Concurrency']
Easy,1280,Students and Examinations,Database,60.46508879,['Database']
Easy,1281,Subtract the Product and Sum of Digits of an Integer,Algorithms,86.67779582,['Math']
Medium,1282,Group the People Given the Group Size They Belong To,Algorithms,87.38632364,"['Array', 'Hash Table', 'Greedy']"
Medium,1283,Find the Smallest Divisor Given a Threshold,Algorithms,63.21539623,"['Array', 'Binary Search']"
Hard,1284,Minimum Number of Flips to Convert Binary Matrix to Zero Matrix,Algorithms,71.88952801,"['Array', 'Hash Table', 'Bit Manipulation', 'Breadth-First Search', 'Matrix']"
Medium,1285,Find the Start and End Number of Continuous Ranges,Database,81.88743809,['Database']
Medium,1286,Iterator for Combination,Algorithms,72.39853355,"['String', 'Backtracking', 'Design', 'Iterator']"
Easy,1287,Element Appearing More Than 25% In Sorted Array,Algorithms,61.05264237,['Array']
Medium,1288,Remove Covered Intervals,Algorithms,56.16282392,"['Array', 'Sorting']"
Hard,1289,Minimum Falling Path Sum II,,,
non-existent) next row of the `memo` array. Initialize it with `None`.,,,,,
,,,,,
    - `next_min1` to store the value of *minimum* of (non-existent) next row of the `memo` array. Initialize it with `None`.,,,,,
,,,,,
    - `next_min2` to store the value of *second minimum* of (non-existent) next row of the `memo` array. Initialize it with `None`.,,,,,
,,,,,
3. Traverse in the last row of `grid` using variable `col`. For every column, do the following,,,,
,,,,,
    - If `next_min1` is `None` or `grid[n - 1][col]` is less than or equal to `next_min1`, then,,,,
,,,,,
        - Update `next_min2` with `next_min1`,,,,,
       ,,,,,
        - Update `next_min1` with `grid[n - 1][col]`  ,,,,,
,,,,,
        - Update `next_min2_c` with `next_min1_c`,,,,,
,,,,,
        - Update `next_min1_c` with `col` ,,,,,
,,,,,
    - Otherwise, if `next_min2` is `None` or `grid[n - 1][col]` is less than or equal to `next_min2`,,,,
,,,,,
        - Update `next_min2` with `grid[n - 1][col]`,,,,,
,,,,,
        - Update `next_min2_c` with `col`,,,,,
,,,,,
    > The updates done are the standard approach of finding the minimum and second minimum from an array. For more details, read [this editorial](https://leetcode.com/problems/buy-two-chocolates/editorial/#approach-5-one-pass),,,,
 ,,,,,
4. Traverse in the remaining rows of `grid` from `n - 2` to `0` using variable `row`. For every row, do the following,,,,
,,,,,
    - Declare and initialize four variables,,,,,
,,,,,
        - `min1_c` to store the column of *minimum* of (non-existent) current row of the `memo` array. Initialize it with `None`.,,,,,
,,,,,
        - `min2_c` to store the column of *second minimum* of the (non-existent) current row of the `memo` array. Initialize it with `None`.,,,,,
,,,,,
        - `min1` to store the value of *minimum* of (non-existent) current row of the `memo` array. Initialize it with `None`.,,,,,
,,,,,
        - `min2` to store the value of *second minimum* of the (non-existent) current row of the `memo` array. Initialize it with `None`.,,,,,
,,,,,
    - Traverse in the current row of `grid` using variable `col`. For every column, do the following,,,,
,,,,,
        - If `col != next_min1_c`, then we can select the minimum element from the (non-existent) next row of the `memo` array. Thus,,,,
,,,,,
           Otherwise, the optimal `value` from this cell will be `grid[row][col] + next_min2`.,,,,
        ,,,,,
        - If `min1` is `None` or `value` is less than or equal to `min1`, then ,,,,
            - Update `min2` with `min1`,,,,,
              ,,,,,
            - Update `min1` with `value`  ,,,,,
,,,,,
            - Update `min2_c` with `min1_c`,,,,,
             ,,,,,
            - Update `min1_c` with `col`,,,,,
,,,,,
        - Otherwise, if `min2` is `None` or `value` is less than or equal to `min2`,,,,
            - Update `min2` with `value`,,,,,
             ,,,,,
            - Update `min2_c` with `col`  ,,,,,
    ,,,,,
    - Update `next_min1_c`, `next_min2_c`, and `next_min2` with `min1_c`,,,
,,,,,
5. Return the minimum from the first row of the `grid`. It will be `next_min1`. ,,,,,
 ,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/DGJcpkkz/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""DGJcpkkz""""></iframe>",,,,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Let $N$ be the number of rows of the square `grid`. Every row has $N$ columns.,,,,,
,,,,,
* Time complexity: $O(N^2)$,,,,,
,,,,,
    We are traversing in every cell of the `grid` array once.,,,,,
,,,,,
    For all the cells, we are doing two main operations,,,,
    - Computing `value`. It will take constant time.,,,,,
     ,,,,,
    - Ensuring loop invariant of `next_min1_c`, `next_min2_c`, and `next_min2`.,,,
,,,,,
    All these operations are constant time operations.,,,,,
,,,,,
    Thus, $N^2$ cells take $O(1)$ time. Hence,,,,
,,,,,
* Space complexity: $O(1)$,,,,,
,,,,,
    We are using only a handful of variables, which are independent of input size. Thus,,,,
        ,,,,,
---,,,,,
,,,,,
**Follow-up**: What if we were asked to print the path as well? Readers are encouraged to take this as an exercise and comment with their solution below.,,,,,
,,,,,
"---""",,,,,
Easy,1290,Convert Binary Number in a Linked List to Integer,Algorithms,81.18160355,"['Linked List', 'Math']"
Medium,1291,Sequential Digits,Algorithms,65.25538039,['Enumeration']
Medium,1292,Maximum Side Length of a Square with Sum Less than or Equal to Threshold,Algorithms,53.46571535,"['Array', 'Binary Search', 'Matrix', 'Prefix Sum']"
Hard,1293,Shortest Path in a Grid with Obstacles Elimination,Algorithms,45.54307387,"['Array', 'Breadth-First Search', 'Matrix']"
Easy,1294,Weather Type in Each Country,Database,67.04917012,['Database']
Easy,1295,Find Numbers with Even Number of Digits,Algorithms,79.36407252,"['Array', 'Math']"
Medium,1296,Divide Array in Sets of K Consecutive Numbers,Algorithms,58.61495142,"['Array', 'Hash Table', 'Greedy', 'Sorting']"
Medium,1297,Maximum Number of Occurrences of a Substring,Algorithms,53.24560005,"['Hash Table', 'String', 'Sliding Window']"
Hard,1298,Maximum Candies You Can Get from Boxes,Algorithms,57.49350509,"['Array', 'Breadth-First Search', 'Graph']"
Easy,1299,Replace Elements with Greatest Element on Right Side,Algorithms,71.4135125,['Array']
Medium,1300,Sum of Mutated Array Closest to Target,Algorithms,45.18609627,"['Array', 'Binary Search', 'Sorting']"
Hard,1301,Number of Paths with Max Score,Algorithms,40.85322679,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,1302,Deepest Leaves Sum,Algorithms,86.31481205,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,1303,Find the Team Size,Database,89.6878419,['Database']
Easy,1304,Find N Unique Integers Sum up to Zero,Algorithms,76.15296288,"['Array', 'Math']"
Medium,1305,All Elements in Two Binary Search Trees,Algorithms,79.99045066,"['Tree', 'Depth-First Search', 'Binary Search Tree', 'Sorting', 'Binary Tree']"
Medium,1306,Jump Game III,Algorithms,65.95058997,"['Array', 'Depth-First Search', 'Breadth-First Search']"
Hard,1307,Verbal Arithmetic Puzzle,Algorithms,34.76775508,"['Array', 'Math', 'String', 'Backtracking']"
Medium,1308,Running Total for Different Genders,Database,86.38726194,['Database']
Easy,1309,Decrypt String from Alphabet to Integer Mapping,Algorithms,80.15035235,['String']
Medium,1310,XOR Queries of a Subarray,Algorithms,78.41378121,"['Array', 'Bit Manipulation', 'Prefix Sum']"
Medium,1311,Get Watched Videos by Your Friends,Algorithms,49.5423233,"['Array', 'Hash Table', 'Breadth-First Search', 'Graph', 'Sorting']"
Hard,1312,Minimum Insertion Steps to Make a String Palindrome,Algorithms,72.15246651,"['String', 'Dynamic Programming']"
Easy,1313,Decompress Run-Length Encoded List,Algorithms,86.00695025,['Array']
Medium,1314,Matrix Block Sum,Algorithms,75.8615368,"['Array', 'Matrix', 'Prefix Sum']"
Medium,1315,Sum of Nodes with Even-Valued Grandparent,Algorithms,85.67265419,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,1316,Distinct Echo Substrings,Algorithms,51.87040308,"['String', 'Trie', 'Rolling Hash', 'Hash Function']"
Easy,1317,Convert Integer to the Sum of Two No-Zero Integers,Algorithms,54.18224255,['Math']
Medium,1318,Minimum Flips to Make a OR b Equal to c,Algorithms,71.58737992,['Bit Manipulation']
Medium,1319,Number of Operations to Make Network Connected,Algorithms,64.39030489,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Hard,1320,Minimum Distance to Type a Word Using Two Fingers,Algorithms,59.06825898,"['String', 'Dynamic Programming']"
Medium,1321,Restaurant Growth,Database,56.32140319,['Database']
Easy,1322,Ads Performance,Database,59.27616723,['Database']
Easy,1323,Maximum 69 Number,Algorithms,81.70890391,"['Math', 'Greedy']"
Medium,1324,Print Words Vertically,Algorithms,66.06694267,"['Array', 'String', 'Simulation']"
Medium,1325,Delete Leaves With a Given Value,Algorithms,77.28358598,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,1326,Minimum Number of Taps to Open to Water a Garden,Algorithms,50.70406218,"['Array', 'Dynamic Programming', 'Greedy']"
Easy,1327,List the Products Ordered in a Period,Database,71.84265699,['Database']
Medium,1328,Break a Palindrome,Algorithms,51.52455116,"['String', 'Greedy']"
Medium,1329,Sort the Matrix Diagonally,Algorithms,82.96538162,"['Array', 'Sorting', 'Matrix']"
Hard,1330,Reverse Subarray To Maximize Array Value,Algorithms,42.26329291,"['Array', 'Math', 'Greedy']"
Easy,1331,Rank Transform of an Array,Algorithms,70.63903075,"['Array', 'Hash Table', 'Sorting']"
Easy,1332,Remove Palindromic Subsequences,Algorithms,76.61752793,"['Two Pointers', 'String']"
Medium,1333,"Filter Restaurants by Vegan-Friendly, Price and Distance",Algorithms,63.1510773,"['Array', 'Sorting']"
Medium,1334,Find the City With the Smallest Number of Neighbors at a Threshold Distance,Algorithms,69.81499865,"['Dynamic Programming', 'Graph', 'Shortest Path']"
Hard,1335,Minimum Difficulty of a Job Schedule,Algorithms,59.65502272,"['Array', 'Dynamic Programming']"
Hard,1336,Number of Transactions per Visit,Database,48.27320795,['Database']
Easy,1337,The K Weakest Rows in a Matrix,Algorithms,73.92913485,"['Array', 'Binary Search', 'Sorting', 'Heap (Priority Queue)', 'Matrix']"
Medium,1338,Reduce Array Size to The Half,Algorithms,69.09214432,"['Array', 'Hash Table', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Medium,1339,Maximum Product of Splitted Binary Tree,Algorithms,47.87219033,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,1340,Jump Game V,Algorithms,63.99404691,"['Array', 'Dynamic Programming', 'Sorting']"
Medium,1341,Movie Rating,Database,41.38795809,['Database']
Easy,1342,Number of Steps to Reduce a Number to Zero,Algorithms,85.60037038,"['Math', 'Bit Manipulation']"
Medium,1343,Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold,Algorithms,70.08718475,"['Array', 'Sliding Window']"
Medium,1344,Angle Between Hands of a Clock,Algorithms,64.14736097,['Math']
Hard,1345,Jump Game IV,Algorithms,46.06573303,"['Array', 'Hash Table', 'Breadth-First Search']"
Easy,1346,Check If N and Its Double Exist,Algorithms,41.20728065,"['Array', 'Hash Table', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,1347,Minimum Number of Steps to Make Two Strings Anagram,Algorithms,82.12953706,"['Hash Table', 'String', 'Counting']"
Medium,1348,Tweet Counts Per Frequency,Algorithms,45.22092994,"['Hash Table', 'Binary Search', 'Design', 'Sorting', 'Ordered Set']"
Hard,1349,Maximum Students Taking Exam,Algorithms,52.05161358,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Matrix', 'Bitmask']"
Easy,1350,Students With Invalid Departments,Database,89.91219231,['Database']
Easy,1351,Count Negative Numbers in a Sorted Matrix,Algorithms,77.65087429,"['Array', 'Binary Search', 'Matrix']"
Medium,1352,Product of the Last K Numbers,Algorithms,62.73437023,"['Array', 'Math', 'Design', 'Data Stream', 'Prefix Sum']"
Medium,1353,Maximum Number of Events That Can Be Attended,Algorithms,32.87695469,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,1354,Construct Target Array With Multiple Sums,Algorithms,36.24833146,"['Array', 'Heap (Priority Queue)']"
Medium,1355,Activity Participants,Database,72.36361235,['Database']
Easy,1356,Sort Integers by The Number of 1 Bits,Algorithms,78.631555,"['Array', 'Bit Manipulation', 'Sorting', 'Counting']"
Medium,1357,Apply Discount Every n Orders,Algorithms,64.11659323,"['Array', 'Hash Table', 'Design']"
Medium,1358,Number of Substrings Containing All Three Characters,Algorithms,73.09288881,"['Hash Table', 'String', 'Sliding Window']"
Hard,1359,Count All Valid Pickup and Delivery Options,Algorithms,64.8801488,"['Math', 'Dynamic Programming', 'Combinatorics']"
Easy,1360,Number of Days Between Two Dates,Algorithms,51.21427019,"['Math', 'String']"
Medium,1361,Validate Binary Tree Nodes,Algorithms,43.86783387,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph', 'Binary Tree']"
Medium,1362,Closest Divisors,Algorithms,61.23297764,['Math']
Hard,1363,Largest Multiple of Three,Algorithms,32.73407619,"['Array', 'Math', 'Dynamic Programming', 'Greedy', 'Sorting']"
Medium,1364,Number of Trusted Contacts of a Customer,Database,75.30925448,['Database']
Easy,1365,How Many Numbers Are Smaller Than the Current Number,Algorithms,87.1039499,"['Array', 'Hash Table', 'Sorting', 'Counting Sort']"
Medium,1366,Rank Teams by Votes,Algorithms,59.29331263,"['Array', 'Hash Table', 'String', 'Sorting', 'Counting']"
Medium,1367,Linked List in Binary Tree,Algorithms,51.90756503,"['Linked List', 'Tree', 'Depth-First Search', 'Binary Tree']"
Hard,1368,Minimum Cost to Make at Least One Valid Path in a Grid,Algorithms,70.68869719,"['Array', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']"
Hard,1369,Get the Second Most Recent Activity,Database,67.5616025,['Database']
Easy,1370,Increasing Decreasing String,Algorithms,76.67405421,"['Hash Table', 'String', 'Counting']"
Medium,1371,Find the Longest Substring Containing Vowels in Even Counts,Algorithms,75.77233392,"['Hash Table', 'String', 'Bit Manipulation', 'Prefix Sum']"
Medium,1372,Longest ZigZag Path in a Binary Tree,Algorithms,66.55930495,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Binary Tree']"
Hard,1373,Maximum Sum BST in Binary Tree,Algorithms,43.94161575,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Easy,1374,Generate a String With Characters That Have Odd Counts,Algorithms,78.03266982,['String']
Medium,1375,Number of Times Binary String Is Prefix-Aligned,Algorithms,65.7315185,['Array']
Medium,1376,Time Needed to Inform All Employees,Algorithms,60.20979687,"['Tree', 'Depth-First Search', 'Breadth-First Search']"
Hard,1377,Frog Position After T Seconds,Algorithms,35.81710501,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Easy,1378,Replace Employee ID With The Unique Identifier,Database,83.63122512,['Database']
Easy,1379,Find a Corresponding Node of a Binary Tree in a Clone of That Tree,Algorithms,85.70266047,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,1380,Lucky Numbers in a Matrix,Algorithms,79.88585254,"['Array', 'Matrix']"
Medium,1381,Design a Stack With Increment Operation,Algorithms,80.12099222,"['Array', 'Stack', 'Design']"
Medium,1382,Balance a Binary Search Tree,Algorithms,84.62625491,"['Divide and Conquer', 'Greedy', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Hard,1383,Maximum Performance of a Team,Algorithms,47.51586362,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,1384,Total Sales Amount by Year,Database,61.31475809,['Database']
Easy,1385,Find the Distance Value Between Two Arrays,Algorithms,70.06393508,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,1386,Cinema Seat Allocation,Algorithms,42.69724015,"['Array', 'Hash Table', 'Greedy', 'Bit Manipulation']"
Medium,1387,Sort Integers by The Power Value,Algorithms,70.71218333,"['Dynamic Programming', 'Memoization', 'Sorting']"
Hard,1388,Pizza With 3n Slices,Algorithms,52.8538206,"['Array', 'Dynamic Programming', 'Greedy', 'Heap (Priority Queue)']"
Easy,1389,Create Target Array in the Given Order,Algorithms,86.20548756,"['Array', 'Simulation']"
Medium,1390,Four Divisors,Algorithms,44.61354463,"['Array', 'Math']"
Medium,1391,Check if There is a Valid Path in a Grid,Algorithms,48.808899,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Hard,1392,Longest Happy Prefix,Algorithms,48.80710396,"['String', 'Rolling Hash', 'String Matching', 'Hash Function']"
Medium,1393,Capital Gain/Loss,Database,84.90561336,['Database']
Easy,1394,Find Lucky Integer in an Array,Algorithms,69.16550691,"['Array', 'Hash Table', 'Counting']"
Medium,1395,Count Number of Teams,Algorithms,70.08876508,"['Array', 'Dynamic Programming', 'Binary Indexed Tree', 'Segment Tree']"
Medium,1396,Design Underground System,Algorithms,73.99670788,"['Hash Table', 'String', 'Design']"
Hard,1397,Find All Good Strings,Algorithms,43.55095105,"['String', 'Dynamic Programming', 'String Matching']"
Medium,1398,Customers Who Bought Products A and B but Not C,Database,71.99044568,['Database']
Easy,1399,Count Largest Group,Algorithms,75.07888819,"['Hash Table', 'Math']"
Medium,1400,Construct K Palindrome Strings,Algorithms,68.70567708,"['Hash Table', 'String', 'Greedy', 'Counting']"
Medium,1401,Circle and Rectangle Overlapping,Algorithms,48.76137285,"['Math', 'Geometry']"
Hard,1402,Reducing Dishes,Algorithms,76.3221005,"['Array', 'Dynamic Programming', 'Greedy', 'Sorting']"
Easy,1403,Minimum Subsequence in Non-Increasing Order,Algorithms,72.88429092,"['Array', 'Greedy', 'Sorting']"
Medium,1404,Number of Steps to Reduce a Number in Binary Representation to One,Algorithms,61.38734556,"['String', 'Bit Manipulation', 'Simulation']"
Medium,1405,Longest Happy String,Algorithms,65.45357081,"['String', 'Greedy', 'Heap (Priority Queue)']"
Hard,1406,Stone Game III,Algorithms,63.21538617,"['Array', 'Math', 'Dynamic Programming', 'Game Theory']"
Easy,1407,Top Travellers,Database,57.09503798,['Database']
Easy,1408,String Matching in an Array,Algorithms,69.84247848,"['Array', 'String', 'String Matching']"
Medium,1409,Queries on a Permutation With Key,Algorithms,84.51117877,"['Array', 'Binary Indexed Tree', 'Simulation']"
Medium,1410,HTML Entity Parser,Algorithms,50.23135523,"['Hash Table', 'String']"
Hard,1411,Number of Ways to Paint N × 3 Grid,Algorithms,64.27772505,['Dynamic Programming']
Hard,1412,Find the Quiet Students in All Exams,Database,58.4263913,['Database']
Easy,1413,Minimum Value to Get Positive Step by Step Sum,Algorithms,64.74818644,"['Array', 'Prefix Sum']"
Medium,1414,Find the Minimum Number of Fibonacci Numbers Whose Sum Is K,Algorithms,64.32790935,"['Math', 'Greedy']"
Medium,1415,The k-th Lexicographical String of All Happy Strings of Length n,Algorithms,85.1075538,"['String', 'Backtracking']"
Hard,1416,Restore The Array,Algorithms,46.97425338,"['String', 'Dynamic Programming']"
Easy,1417,Reformat The String,Algorithms,52.0594993,['String']
Medium,1418,Display Table of Food Orders in a Restaurant,Algorithms,75.60893327,"['Array', 'Hash Table', 'String', 'Sorting', 'Ordered Set']"
Medium,1419,Minimum Number of Frogs Croaking,Algorithms,50.75063176,"['String', 'Counting']"
Hard,1420,Build Array Where You Can Find The Maximum Exactly K Comparisons,Algorithms,66.88742372,"['Dynamic Programming', 'Prefix Sum']"
Easy,1421,NPV Queries,Database,83.01854975,['Database']
Easy,1422,Maximum Score After Splitting a String,Algorithms,65.16349687,"['String', 'Prefix Sum']"
Medium,1423,Maximum Points You Can Obtain from Cards,Algorithms,55.32216386,"['Array', 'Sliding Window', 'Prefix Sum']"
Medium,1424,Diagonal Traverse II,Algorithms,57.95056504,"['Array', 'Sorting', 'Heap (Priority Queue)']"
Hard,1425,Constrained Subsequence Sum,Algorithms,56.3994749,"['Array', 'Dynamic Programming', 'Queue', 'Sliding Window', 'Heap (Priority Queue)', 'Monotonic Queue']"
Easy,1426,Counting Elements,Algorithms,60.42272961,"['Array', 'Hash Table']"
Easy,1427,Perform String Shifts,Algorithms,55.81459284,"['Array', 'Math', 'String']"
Medium,1428,Leftmost Column with at Least a One,Algorithms,54.92073458,"['Array', 'Binary Search', 'Matrix', 'Interactive']"
Medium,1429,First Unique Number,Algorithms,55.22328275,"['Array', 'Hash Table', 'Design', 'Queue', 'Data Stream']"
Medium,1430,Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree,Algorithms,47.26721067,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,1431,Kids With the Greatest Number of Candies,Algorithms,88.09667803,['Array']
Medium,1432,Max Difference You Can Get From Changing an Integer,Algorithms,40.24479568,"['Math', 'Greedy']"
Medium,1433,Check If a String Can Break Another String,Algorithms,70.19989023,"['String', 'Greedy', 'Sorting']"
Hard,1434,Number of Ways to Wear Different Hats to Each Other,Algorithms,44.25222231,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Easy,1435,Create a Session Bar Chart,Database,74.9926136,['Database']
Easy,1436,Destination City,Algorithms,79.43411484,"['Array', 'Hash Table', 'String']"
Easy,1437,Check If All 1's Are at Least Length K Places Away,Algorithms,58.05883331,['Array']
Medium,1438,Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit,Algorithms,56.67195741,"['Array', 'Queue', 'Sliding Window', 'Heap (Priority Queue)', 'Ordered Set', 'Monotonic Queue']"
Hard,1439,Find the Kth Smallest Sum of a Matrix With Sorted Rows,Algorithms,61.86818203,"['Array', 'Binary Search', 'Heap (Priority Queue)', 'Matrix']"
Medium,1440,Evaluate Boolean Expression,Database,72.16890989,['Database']
Medium,1441,Build an Array With Stack Operations,Algorithms,80.16562453,"['Array', 'Stack', 'Simulation']"
Medium,1442,Count Triplets That Can Form Two Arrays of Equal XOR,Algorithms,84.79960899,"['Array', 'Hash Table', 'Math', 'Bit Manipulation', 'Prefix Sum']"
Medium,1443,Minimum Time to Collect All Apples in a Tree,Algorithms,62.91354772,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search']"
Hard,1444,Number of Ways of Cutting a Pizza,Algorithms,61.61377936,"['Array', 'Dynamic Programming', 'Memoization', 'Matrix', 'Prefix Sum']"
Medium,1445,Apples & Oranges,Database,86.08045718,['Database']
Easy,1446,Consecutive Characters,Algorithms,60.12956257,['String']
Medium,1447,Simplified Fractions,Algorithms,68.18189699,"['Math', 'String', 'Number Theory']"
Medium,1448,Count Good Nodes in Binary Tree,Algorithms,73.42941769,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,1449,Form Largest Integer With Digits That Add up to Target,Algorithms,48.61706814,"['Array', 'Dynamic Programming']"
Easy,1450,Number of Students Doing Homework at a Given Time,Algorithms,75.65147073,['Array']
Medium,1451,Rearrange Words in a Sentence,Algorithms,65.73538531,"['String', 'Sorting']"
Medium,1452,People Whose List of Favorite Companies Is Not a Subset of Another List,Algorithms,59.18812072,"['Array', 'Hash Table', 'String']"
Hard,1453,Maximum Number of Darts Inside of a Circular Dartboard,Algorithms,38.01614163,"['Array', 'Math', 'Geometry']"
Medium,1454,Active Users,Database,36.61035932,['Database']
Easy,1455,Check If a Word Occurs As a Prefix of Any Word in a Sentence,Algorithms,68.67511095,"['Two Pointers', 'String', 'String Matching']"
Medium,1456,Maximum Number of Vowels in a Substring of Given Length,Algorithms,60.21352616,"['String', 'Sliding Window']"
Medium,1457,Pseudo-Palindromic Paths in a Binary Tree,Algorithms,68.31935542,"['Bit Manipulation', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,1458,Max Dot Product of Two Subsequences,Algorithms,62.33841112,"['Array', 'Dynamic Programming']"
Medium,1459,Rectangles Area,Database,68.69527304,['Database']
Easy,1460,Make Two Arrays Equal by Reversing Subarrays,Algorithms,75.81791672,"['Array', 'Hash Table', 'Sorting']"
Medium,1461,Check If a String Contains All Binary Codes of Size K,Algorithms,56.61506312,"['Hash Table', 'String', 'Bit Manipulation', 'Rolling Hash', 'Hash Function']"
Medium,1462,Course Schedule IV,Algorithms,59.5557606,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Hard,1463,Cherry Pickup II,Algorithms,71.88654197,"['Array', 'Dynamic Programming', 'Matrix']"
Easy,1464,Maximum Product of Two Elements in an Array,Algorithms,83.18477776,"['Array', 'Sorting', 'Heap (Priority Queue)']"
Medium,1465,Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts,Algorithms,41.20432807,"['Array', 'Greedy', 'Sorting']"
Medium,1466,Reorder Routes to Make All Paths Lead to the City Zero,Algorithms,64.93749198,"['Depth-First Search', 'Breadth-First Search', 'Graph']"
Hard,1467,Probability of a Two Boxes Having The Same Number of Distinct Balls,Algorithms,59.85132322,"['Array', 'Math', 'Dynamic Programming', 'Backtracking', 'Combinatorics', 'Probability and Statistics']"
Medium,1468,Calculate Salaries,Database,78.08779762,['Database']
Easy,1469,Find All The Lonely Nodes,Algorithms,83.95716602,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,1470,Shuffle the Array,Algorithms,88.82823383,['Array']
Medium,1471,The k Strongest Values in an Array,Algorithms,61.85972416,"['Array', 'Two Pointers', 'Sorting']"
Medium,1472,Design Browser History,Algorithms,77.69257817,"['Array', 'Linked List', 'Stack', 'Design', 'Doubly-Linked List', 'Data Stream']"
Hard,1473,Paint House III,Algorithms,60.96047961,"['Array', 'Dynamic Programming']"
Easy,1474,Delete N Nodes After M Nodes of a Linked List,Algorithms,73.54924686,['Linked List']
Easy,1475,Final Prices With a Special Discount in a Shop,Algorithms,83.2605271,"['Array', 'Stack', 'Monotonic Stack']"
Medium,1476,Subrectangle Queries,Algorithms,85.92423811,"['Array', 'Design', 'Matrix']"
Medium,1477,Find Two Non-overlapping Sub-arrays Each With Target Sum,Algorithms,36.47117639,"['Array', 'Hash Table', 'Binary Search', 'Dynamic Programming', 'Sliding Window']"
Hard,1478,Allocate Mailboxes,Algorithms,55.71722846,"['Array', 'Math', 'Dynamic Programming', 'Sorting']"
Hard,1479,Sales by Day of the Week,Database,77.33000429,['Database']
Easy,1480,Running Sum of 1d Array,Algorithms,86.9683544,"['Array', 'Prefix Sum']"
Medium,1481,Least Number of Unique Integers after K Removals,Algorithms,63.36681963,"['Array', 'Hash Table', 'Greedy', 'Sorting', 'Counting']"
Medium,1482,Minimum Number of Days to Make m Bouquets,Algorithms,55.39186699,"['Array', 'Binary Search']"
Hard,1483,Kth Ancestor of a Tree Node,Algorithms,35.50781671,"['Binary Search', 'Dynamic Programming', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Design']"
Easy,1484,Group Sold Products By The Date,Database,77.66711748,['Database']
Medium,1485,Clone Binary Tree With Random Pointer,Algorithms,80.8516525,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,1486,XOR Operation in an Array,Algorithms,86.77082615,"['Math', 'Bit Manipulation']"
Medium,1487,Making File Names Unique,Algorithms,37.79060792,"['Array', 'Hash Table', 'String']"
Medium,1488,Avoid Flood in The City,Algorithms,27.33440312,"['Array', 'Hash Table', 'Binary Search', 'Greedy', 'Heap (Priority Queue)']"
Hard,1489,Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree,Algorithms,66.36524558,"['Union Find', 'Graph', 'Sorting', 'Minimum Spanning Tree', 'Strongly Connected Component']"
Medium,1490,Clone N-ary Tree,Algorithms,83.1471088,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search']"
Easy,1491,Average Salary Excluding the Minimum and Maximum Salary,Algorithms,63.44054232,"['Array', 'Sorting']"
Medium,1492,The kth Factor of n,Algorithms,69.51207474,"['Math', 'Number Theory']"
Medium,1493,Longest Subarray of 1's After Deleting One Element,Algorithms,69.11658738,"['Array', 'Dynamic Programming', 'Sliding Window']"
Hard,1494,Parallel Courses II,Algorithms,29.43577431,"['Dynamic Programming', 'Bit Manipulation', 'Graph', 'Bitmask']"
Easy,1495,Friendly Movies Streamed Last Month,Database,48.96617286,['Database']
Easy,1496,Path Crossing,Algorithms,62.51728621,"['Hash Table', 'String']"
Medium,1497,Check If Array Pairs Are Divisible by k,Algorithms,46.21601798,"['Array', 'Hash Table', 'Counting']"
Medium,1498,Number of Subsequences That Satisfy the Given Sum Condition,Algorithms,43.700312,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Hard,1499,Max Value of Equation,Algorithms,44.49282331,"['Array', 'Queue', 'Sliding Window', 'Heap (Priority Queue)', 'Monotonic Queue']"
Medium,1500,Design a File Sharing System,Algorithms,41.63454731,"['Hash Table', 'Design', 'Sorting', 'Heap (Priority Queue)', 'Data Stream']"
Medium,1501,Countries You Can Safely Invest In,,,
Easy,1502,Can Make Arithmetic Progression From Sequence,Algorithms,69.42564957,"['Array', 'Sorting']"
Medium,1503,Last Moment Before All Ants Fall Out of a Plank,Algorithms,68.19283422,"['Array', 'Brainteaser', 'Simulation']"
Medium,1504,Count Submatrices With All Ones,Algorithms,57.21045295,"['Array', 'Dynamic Programming', 'Stack', 'Matrix', 'Monotonic Stack']"
Hard,1505,Minimum Possible Integer After at Most K Adjacent Swaps On Digits,Algorithms,39.87430887,"['String', 'Greedy', 'Binary Indexed Tree', 'Segment Tree']"
Medium,1506,Find Root of N-Ary Tree,Algorithms,78.42477695,"['Hash Table', 'Bit Manipulation', 'Tree', 'Depth-First Search']"
Easy,1507,Reformat Date,Algorithms,67.27139311,['String']
Medium,1508,Range Sum of Sorted Subarray Sums,Algorithms,63.11844131,"['Array', 'Two Pointers', 'Binary Search', 'Sorting', 'Prefix Sum']"
Medium,1509,Minimum Difference Between Largest and Smallest Value in Three Moves,Algorithms,59.18343628,"['Array', 'Greedy', 'Sorting']"
Hard,1510,Stone Game IV,Algorithms,59.47226441,"['Math', 'Dynamic Programming', 'Game Theory']"
Easy,1511,Customer Order Frequency,Database,66.91351603,['Database']
Easy,1512,Number of Good Pairs,Algorithms,89.55334497,"['Array', 'Hash Table', 'Math', 'Counting']"
Medium,1513,Number of Substrings With Only 1s,Algorithms,47.77856778,"['Math', 'String']"
Medium,1514,Path with Maximum Probability,Algorithms,65.29006581,"['Array', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Hard,1515,Best Position for a Service Centre,Algorithms,34.80425159,"['Array', 'Math', 'Geometry', 'Randomized']"
Hard,1516,Move Sub-Tree of N-Ary Tree,Algorithms,60.07263923,"['Tree', 'Depth-First Search']"
Easy,1517,Find Users With Valid E-Mails,Database,44.48815313,['Database']
Easy,1518,Water Bottles,Algorithms,70.66914137,"['Math', 'Simulation']"
Medium,1519,Number of Nodes in the Sub-Tree With the Same Label,Algorithms,55.01007283,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Counting']"
Hard,1520,Maximum Number of Non-Overlapping Substrings,Algorithms,39.75668253,"['String', 'Greedy']"
Hard,1521,Find a Value of a Mysterious Function Closest to Target,Algorithms,45.69740655,"['Array', 'Binary Search', 'Bit Manipulation', 'Segment Tree']"
Medium,1522,Diameter of N-Ary Tree,Algorithms,75.030274,"['Tree', 'Depth-First Search']"
Easy,1523,Count Odd Numbers in an Interval Range,Algorithms,50.48973438,['Math']
Medium,1524,Number of Sub-arrays With Odd Sum,Algorithms,56.06366278,"['Array', 'Math', 'Dynamic Programming', 'Prefix Sum']"
Medium,1525,Number of Good Ways to Split a String,Algorithms,68.32486585,"['Hash Table', 'String', 'Dynamic Programming', 'Bit Manipulation']"
Hard,1526,Minimum Number of Increments on Subarrays to Form a Target Array,Algorithms,72.26602714,"['Array', 'Dynamic Programming', 'Stack', 'Greedy', 'Monotonic Stack']"
Easy,1527,Patients With a Condition,Database,39.24998774,['Database']
Easy,1528,Shuffle String,Algorithms,85.06915287,"['Array', 'String']"
Medium,1529,Minimum Suffix Flips,Algorithms,73.45402076,"['String', 'Greedy']"
Medium,1530,Number of Good Leaf Nodes Pairs,Algorithms,71.79616223,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,1531,String Compression II,Algorithms,51.97975573,"['String', 'Dynamic Programming']"
Medium,1532,The Most Recent Three Orders,Database,69.01559454,['Database']
Medium,1533,Find the Index of the Large Integer,Algorithms,56.27638226,"['Array', 'Binary Search', 'Interactive']"
Easy,1534,Count Good Triplets,Algorithms,85.46709074,"['Array', 'Enumeration']"
Medium,1535,Find the Winner of an Array Game,Algorithms,56.74003401,"['Array', 'Simulation']"
Medium,1536,Minimum Swaps to Arrange a Binary Grid,Algorithms,47.90314387,"['Array', 'Greedy', 'Matrix']"
Hard,1537,Get the Maximum Score,Algorithms,39.92455043,"['Array', 'Two Pointers', 'Dynamic Programming', 'Greedy']"
Medium,1538,Guess the Majority in a Hidden Array,Algorithms,69.32675566,"['Array', 'Math', 'Interactive']"
Easy,1539,Kth Missing Positive Number,Algorithms,62.15178834,"['Array', 'Binary Search']"
Medium,1540,Can Convert String in K Moves,Algorithms,35.8572658,"['Hash Table', 'String']"
Medium,1541,Minimum Insertions to Balance a Parentheses String,Algorithms,53.11375843,"['String', 'Stack', 'Greedy']"
Hard,1542,Find Longest Awesome Substring,Algorithms,45.07325111,"['Hash Table', 'String', 'Bit Manipulation']"
Easy,1543,Fix Product Name Format,Database,58.95565468,['Database']
Easy,1544,Make The String Great,Algorithms,68.25708646,"['String', 'Stack']"
Medium,1545,Find Kth Bit in Nth Binary String,Algorithms,70.17455683,"['String', 'Recursion', 'Simulation']"
Medium,1546,Maximum Number of Non-Overlapping Subarrays With Sum Equals Target,Algorithms,47.94372457,"['Array', 'Hash Table', 'Greedy', 'Prefix Sum']"
Hard,1547,Minimum Cost to Cut a Stick,Algorithms,61.88456104,"['Array', 'Dynamic Programming', 'Sorting']"
Hard,1548,The Most Similar Path in a Graph,Algorithms,59.28954424,"['Dynamic Programming', 'Graph']"
Medium,1549,The Most Recent Orders for Each Product,Database,64.80955088,['Database']
Easy,1550,Three Consecutive Odds,Algorithms,69.7270687,['Array']
Medium,1551,Minimum Operations to Make Array Equal,Algorithms,82.2356583,['Math']
Medium,1552,Magnetic Force Between Two Balls,Algorithms,71.25538803,"['Array', 'Binary Search', 'Sorting']"
Hard,1553,Minimum Number of Days to Eat N Oranges,Algorithms,35.62394752,"['Dynamic Programming', 'Memoization']"
Medium,1554,Strings Differ by One Character,Algorithms,41.11253197,"['Hash Table', 'String', 'Rolling Hash', 'Hash Function']"
Medium,1555,Bank Account Summary,Database,51.91112453,['Database']
Easy,1556,Thousand Separator,Algorithms,53.52813125,['String']
Medium,1557,Minimum Number of Vertices to Reach All Nodes,Algorithms,81.11026994,['Graph']
Medium,1558,Minimum Numbers of Function Calls to Make Target Array,Algorithms,62.57703959,"['Array', 'Greedy', 'Bit Manipulation']"
Medium,1559,Detect Cycles in 2D Grid,Algorithms,50.02044445,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Easy,1560,Most Visited Sector in  a Circular Track,Algorithms,59.02247044,"['Array', 'Simulation']"
Medium,1561,Maximum Number of Coins You Can Get,Algorithms,84.42479438,"['Array', 'Math', 'Greedy', 'Sorting', 'Game Theory']"
Medium,1562,Find Latest Group of Size M,Algorithms,42.99352199,"['Array', 'Hash Table', 'Binary Search', 'Simulation']"
Hard,1563,Stone Game V,Algorithms,41.05804996,"['Array', 'Math', 'Dynamic Programming', 'Game Theory']"
Medium,1564,Put Boxes Into the Warehouse I,Algorithms,67.15308478,"['Array', 'Greedy', 'Sorting']"
Easy,1565,Unique Orders and Customers Per Month,Database,82.22388009,['Database']
Easy,1566,Detect Pattern of Length M Repeated K or More Times,Algorithms,43.45327898,"['Array', 'Enumeration']"
Medium,1567,Maximum Length of Subarray With Positive Product,Algorithms,44.37882475,"['Array', 'Dynamic Programming', 'Greedy']"
Hard,1568,Minimum Number of Days to Disconnect Island,Algorithms,59.09777628,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix', 'Strongly Connected Component']"
Hard,1569,Number of Ways to Reorder Array to Get Same BST,Algorithms,53.5617698,"['Array', 'Math', 'Divide and Conquer', 'Dynamic Programming', 'Tree', 'Union Find', 'Binary Search Tree', 'Memoization', 'Combinatorics', 'Binary Tree']"
Medium,1570,Dot Product of Two Sparse Vectors,Algorithms,89.95346318,"['Array', 'Hash Table', 'Two Pointers', 'Design']"
Easy,1571,Warehouse Manager,Database,87.47502271,['Database']
Easy,1572,Matrix Diagonal Sum,Algorithms,83.65798627,"['Array', 'Matrix']"
Medium,1573,Number of Ways to Split a String,Algorithms,33.77897068,"['Math', 'String']"
Medium,1574,Shortest Subarray to be Removed to Make Array Sorted,Algorithms,51.4793408,"['Array', 'Two Pointers', 'Binary Search', 'Stack', 'Monotonic Stack']"
Hard,1575,Count All Possible Routes,Algorithms,64.94689876,"['Array', 'Dynamic Programming', 'Memoization']"
Easy,1576,Replace All ?'s to Avoid Consecutive Repeating Characters,Algorithms,45.21804894,['String']
Medium,1577,Number of Ways Where Square of Number Is Equal to Product of Two Numbers,Algorithms,41.91374426,"['Array', 'Hash Table', 'Math', 'Two Pointers']"
Medium,1578,Minimum Time to Make Rope Colorful,Algorithms,63.45561758,"['Array', 'String', 'Dynamic Programming', 'Greedy']"
Hard,1579,Remove Max Number of Edges to Keep Graph Fully Traversable,Algorithms,70.43286678,"['Union Find', 'Graph']"
Medium,1580,Put Boxes Into the Warehouse II,Algorithms,65.46808968,"['Array', 'Greedy', 'Sorting']"
Easy,1581,Customer Who Visited but Did Not Make Any Transactions,Database,67.42741604,['Database']
Easy,1582,Special Positions in a Binary Matrix,Algorithms,68.69257395,"['Array', 'Matrix']"
Medium,1583,Count Unhappy Friends,Algorithms,61.97846699,"['Array', 'Simulation']"
Medium,1584,Min Cost to Connect All Points,Algorithms,68.76862039,"['Array', 'Union Find', 'Graph', 'Minimum Spanning Tree']"
Hard,1585,Check If String Is Transformable With Substring Sort Operations,Algorithms,48.38833094,"['String', 'Greedy', 'Sorting']"
Medium,1586,Binary Search Tree Iterator II,Algorithms,63.19552378,"['Stack', 'Tree', 'Design', 'Binary Search Tree', 'Binary Tree', 'Iterator']"
Easy,1587,Bank Account Summary II,Database,83.35316387,['Database']
Easy,1588,Sum of All Odd Length Subarrays,Algorithms,83.47924983,"['Array', 'Math', 'Prefix Sum']"
Medium,1589,Maximum Sum Obtained of Any Permutation,Algorithms,39.24432045,"['Array', 'Greedy', 'Sorting', 'Prefix Sum']"
Medium,1590,Make Sum Divisible by P,Algorithms,39.48036094,"['Array', 'Hash Table', 'Prefix Sum']"
Hard,1591,Strange Printer II,Algorithms,59.65588975,"['Array', 'Graph', 'Topological Sort', 'Matrix']"
Easy,1592,Rearrange Spaces Between Words,Algorithms,43.9072883,['String']
Medium,1593,Split a String Into the Max Number of Unique Substrings,Algorithms,68.3468819,"['Hash Table', 'String', 'Backtracking']"
Medium,1594,Maximum Non Negative Product in a Matrix,Algorithms,34.57956623,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,1595,Minimum Cost to Connect Two Groups of Points,Algorithms,48.20608431,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Matrix', 'Bitmask']"
Medium,1596,The Most Frequently Ordered Products for Each Customer,Database,77.8369435,['Database']
Hard,1597,Build Binary Expression Tree From Infix Expression,Algorithms,62.44526032,"['String', 'Stack', 'Tree', 'Binary Tree']"
Easy,1598,Crawler Log Folder,Algorithms,71.58901033,"['Array', 'String', 'Stack']"
Medium,1599,Maximum Profit of Operating a Centennial Wheel,Algorithms,43.89673557,"['Array', 'Simulation']"
Medium,1600,Throne Inheritance,Algorithms,64.75044957,"['Hash Table', 'Tree', 'Depth-First Search', 'Design']"
Hard,1601,Maximum Number of Achievable Transfer Requests,Algorithms,64.42556019,"['Array', 'Backtracking', 'Bit Manipulation', 'Enumeration']"
Medium,1602,Find Nearest Right Node in Binary Tree,Algorithms,75.04019293,"['Tree', 'Breadth-First Search', 'Binary Tree']"
Easy,1603,Design Parking System,Algorithms,87.05294155,"['Design', 'Simulation', 'Counting']"
Medium,1604,Alert Using Same Key-Card Three or More Times in a One Hour Period,Algorithms,45.78114099,"['Array', 'Hash Table', 'String', 'Sorting']"
Medium,1605,Find Valid Matrix Given Row and Column Sums,Algorithms,82.848831,"['Array', 'Greedy', 'Matrix']"
Hard,1606,Find Servers That Handled Most Number of Requests,Algorithms,43.95048887,"['Array', 'Greedy', 'Heap (Priority Queue)', 'Ordered Set']"
Easy,1607,Sellers With No Sales,Database,54.45514351,['Database']
Easy,1608,Special Array With X Elements Greater Than or Equal X,Algorithms,66.61388286,"['Array', 'Binary Search', 'Sorting']"
Medium,1609,Even Odd Tree,Algorithms,66.51956817,"['Tree', 'Breadth-First Search', 'Binary Tree']"
Hard,1610,Maximum Number of Visible Points,Algorithms,37.59455432,"['Array', 'Math', 'Geometry', 'Sliding Window', 'Sorting']"
Hard,1611,Minimum One Bit Operations to Make Integers Zero,Algorithms,73.27705814,"['Dynamic Programming', 'Bit Manipulation', 'Memoization']"
Medium,1612,Check If Two Expression Trees are Equivalent,Algorithms,71.09897851,"['Hash Table', 'Tree', 'Depth-First Search', 'Binary Tree', 'Counting']"
Medium,1613,Find the Missing IDs,Database,73.11272329,['Database']
Easy,1614,Maximum Nesting Depth of the Parentheses,Algorithms,84.28701234,"['String', 'Stack']"
Medium,1615,Maximal Network Rank,Algorithms,65.41868747,['Graph']
Medium,1616,Split Two Strings to Make Palindrome,Algorithms,31.37961239,"['Two Pointers', 'String']"
Hard,1617,Count Subtrees With Max Distance Between Cities,Algorithms,66.49053506,"['Dynamic Programming', 'Bit Manipulation', 'Tree', 'Enumeration', 'Bitmask']"
Medium,1618,Maximum Font to Fit a Sentence in a Screen,Algorithms,61.31038596,"['Array', 'String', 'Binary Search', 'Interactive']"
Easy,1619,Mean of Array After Removing Some Elements,Algorithms,70.31981878,"['Array', 'Sorting']"
Medium,1620,Coordinate With Maximum Network Quality,Algorithms,38.34851381,"['Array', 'Enumeration']"
Medium,1621,Number of Sets of K Non-Overlapping Line Segments,Algorithms,44.54949093,"['Math', 'Dynamic Programming', 'Combinatorics']"
Hard,1622,Fancy Sequence,Algorithms,17.33894629,"['Math', 'Design', 'Segment Tree']"
Easy,1623,All Valid Triplets That Can Represent a Country,Database,81.00137429,['Database']
Easy,1624,Largest Substring Between Two Equal Characters,Algorithms,68.22896302,"['Hash Table', 'String']"
Medium,1625,Lexicographically Smallest String After Applying Operations,Algorithms,65.18329252,"['String', 'Depth-First Search', 'Breadth-First Search', 'Enumeration']"
Medium,1626,Best Team With No Conflicts,Algorithms,50.39872938,"['Array', 'Dynamic Programming', 'Sorting']"
Hard,1627,Graph Connectivity With Threshold,Algorithms,48.01937542,"['Array', 'Math', 'Union Find', 'Number Theory']"
Medium,1628,Design an Expression Tree With Evaluate Function,Algorithms,82.4371092,"['Array', 'Math', 'Stack', 'Tree', 'Design', 'Binary Tree']"
Easy,1629,Slowest Key,Algorithms,59.2423635,"['Array', 'String']"
Medium,1630,Arithmetic Subarrays,Algorithms,83.69862003,"['Array', 'Hash Table', 'Sorting']"
Medium,1631,Path With Minimum Effort,Algorithms,61.16298128,"['Array', 'Binary Search', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Heap (Priority Queue)', 'Matrix']"
Hard,1632,Rank Transform of a Matrix,Algorithms,41.34567284,"['Array', 'Union Find', 'Graph', 'Topological Sort', 'Sorting', 'Matrix']"
Easy,1633,Percentage of Users Attended a Contest,Database,58.76439402,['Database']
Medium,1634,Add Two Polynomials Represented as Linked Lists,Algorithms,60.71813424,"['Linked List', 'Math', 'Two Pointers']"
Hard,1635,Hopper Company Queries I,Database,48.34510791,['Database']
Easy,1636,Sort Array by Increasing Frequency,Algorithms,80.21119849,"['Array', 'Hash Table', 'Sorting']"
Easy,1637,Widest Vertical Area Between Two Points Containing No Points,Algorithms,87.08489316,"['Array', 'Sorting']"
Medium,1638,Count Substrings That Differ by One Character,Algorithms,71.66045824,"['Hash Table', 'String', 'Dynamic Programming', 'Enumeration']"
Hard,1639,Number of Ways to Form a Target String Given a Dictionary,Algorithms,57.14987232,"['Array', 'String', 'Dynamic Programming']"
Easy,1640,Check Array Formation Through Concatenation,Algorithms,56.93962188,"['Array', 'Hash Table']"
Medium,1641,Count Sorted Vowel Strings,Algorithms,78.83811932,"['Math', 'Dynamic Programming', 'Combinatorics']"
Medium,1642,Furthest Building You Can Reach,Algorithms,50.3213329,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Hard,1643,Kth Smallest Instructions,Algorithms,43.6259185,"['Array', 'Math', 'Dynamic Programming', 'Combinatorics']"
Medium,1644,Lowest Common Ancestor of a Binary Tree II,Algorithms,68.59708388,"['Tree', 'Depth-First Search', 'Binary Tree']"
Hard,1645,Hopper Company Queries II,Database,39.6006998,['Database']
Easy,1646,Get Maximum in Generated Array,Algorithms,50.94696226,"['Array', 'Simulation']"
Medium,1647,Minimum Deletions to Make Character Frequencies Unique,Algorithms,61.2799702,"['Hash Table', 'String', 'Greedy', 'Sorting']"
Medium,1648,Sell Diminishing-Valued Colored Balls,Algorithms,29.92755303,"['Array', 'Math', 'Binary Search', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,1649,Create Sorted Array through Instructions,Algorithms,39.93688057,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Medium,1650,Lowest Common Ancestor of a Binary Tree III,Algorithms,82.35588351,"['Hash Table', 'Two Pointers', 'Tree', 'Binary Tree']"
Hard,1651,Hopper Company Queries III,Database,65.92468619,['Database']
Easy,1652,Defuse the Bomb,Algorithms,79.19755927,"['Array', 'Sliding Window']"
Medium,1653,Minimum Deletions to Make String Balanced,Algorithms,65.58620373,"['String', 'Dynamic Programming', 'Stack']"
Medium,1654,Minimum Jumps to Reach Home,Algorithms,30.06152004,"['Array', 'Dynamic Programming', 'Breadth-First Search']"
Hard,1655,Distribute Repeating Integers,Algorithms,39.63058976,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Easy,1656,Design an Ordered Stream,Algorithms,82.12919217,"['Array', 'Hash Table', 'Design', 'Data Stream']"
Medium,1657,Determine if Two Strings Are Close,Algorithms,54.10426596,"['Hash Table', 'String', 'Sorting', 'Counting']"
Medium,1658,Minimum Operations to Reduce X to Zero,Algorithms,40.01991513,"['Array', 'Hash Table', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Hard,1659,Maximize Grid Happiness,Algorithms,39.63535712,"['Dynamic Programming', 'Bit Manipulation', 'Memoization', 'Bitmask']"
Medium,1660,Correct a Binary Tree,Algorithms,74.29911376,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,1661,Average Time of Process per Machine,Database,68.89212744,['Database']
Easy,1662,Check If Two String Arrays are Equivalent,Algorithms,85.73128384,"['Array', 'String']"
Medium,1663,Smallest String With A Given Numeric Value,Algorithms,67.04939705,"['String', 'Greedy']"
Medium,1664,Ways to Make a Fair Array,Algorithms,64.37689451,"['Array', 'Prefix Sum']"
Hard,1665,Minimum Initial Energy to Finish Tasks,Algorithms,59.18976671,"['Array', 'Greedy', 'Sorting']"
Medium,1666,Change the Root of a Binary Tree,Algorithms,74.61798513,"['Tree', 'Depth-First Search', 'Binary Tree']"
Easy,1667,Fix Names in a Table,Database,60.96982403,['Database']
Easy,1668,Maximum Repeating Substring,Algorithms,39.5038407,"['String', 'Dynamic Programming', 'String Matching']"
Medium,1669,Merge In Between Linked Lists,Algorithms,82.24661137,['Linked List']
Medium,1670,Design Front Middle Back Queue,Algorithms,56.21099126,"['Array', 'Linked List', 'Design', 'Queue', 'Data Stream']"
Hard,1671,Minimum Number of Removals to Make Mountain Array,Algorithms,54.94422866,"['Array', 'Binary Search', 'Dynamic Programming', 'Greedy']"
Easy,1672,Richest Customer Wealth,Algorithms,88.54787279,"['Array', 'Matrix']"
Medium,1673,Find the Most Competitive Subsequence,Algorithms,51.71212111,"['Array', 'Stack', 'Greedy', 'Monotonic Stack']"
Medium,1674,Minimum Moves to Make Array Complementary,Algorithms,41.8381752,"['Array', 'Hash Table', 'Prefix Sum']"
Hard,1675,Minimize Deviation in Array,Algorithms,53.90516577,"['Array', 'Greedy', 'Heap (Priority Queue)', 'Ordered Set']"
Medium,1676,Lowest Common Ancestor of a Binary Tree IV,Algorithms,79.04470145,"['Hash Table', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,1677,Product's Worth Over Invoices,Database,38.4244731,['Database']
Easy,1678,Goal Parser Interpretation,Algorithms,87.66336041,['String']
Medium,1679,Max Number of K-Sum Pairs,Algorithms,56.13055678,"['Array', 'Hash Table', 'Two Pointers', 'Sorting']"
Medium,1680,Concatenation of Consecutive Binary Numbers,Algorithms,56.66282805,"['Math', 'Bit Manipulation', 'Simulation']"
Hard,1681,Minimum Incompatibility,Algorithms,39.66865152,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Medium,1682,Longest Palindromic Subsequence II,Algorithms,50.17602682,"['String', 'Dynamic Programming']"
Easy,1683,Invalid Tweets,Database,85.57280996,['Database']
Easy,1684,Count the Number of Consistent Strings,Algorithms,88.27623988,"['Array', 'Hash Table', 'String', 'Bit Manipulation', 'Counting']"
Medium,1685,Sum of Absolute Differences in a Sorted Array,Algorithms,68.13147129,"['Array', 'Math', 'Prefix Sum']"
Medium,1686,Stone Game VI,Algorithms,58.7174784,"['Array', 'Math', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Game Theory']"
Hard,1687,Delivering Boxes from Storage to Ports,Algorithms,39.25393394,"['Array', 'Dynamic Programming', 'Segment Tree', 'Queue', 'Heap (Priority Queue)', 'Prefix Sum', 'Monotonic Queue']"
Easy,1688,Count of Matches in Tournament,Algorithms,85.96415055,"['Math', 'Simulation']"
Medium,1689,Partitioning Into Minimum Number Of Deci-Binary Numbers,Algorithms,88.6235527,"['String', 'Greedy']"
Medium,1690,Stone Game VII,Algorithms,58.25088806,"['Array', 'Math', 'Dynamic Programming', 'Game Theory']"
Hard,1691,Maximum Height by Stacking Cuboids ,Algorithms,59.8652504,"['Array', 'Dynamic Programming', 'Sorting']"
Hard,1692,Count Ways to Distribute Candies,Algorithms,63.19275778,['Dynamic Programming']
Easy,1693,Daily Leads and Partners,Database,86.59999786,['Database']
Easy,1694,Reformat Phone Number,Algorithms,66.86030883,['String']
Medium,1695,Maximum Erasure Value,Algorithms,59.27346807,"['Array', 'Hash Table', 'Sliding Window']"
Medium,1696,Jump Game VI,Algorithms,45.95023282,"['Array', 'Dynamic Programming', 'Queue', 'Heap (Priority Queue)', 'Monotonic Queue']"
Hard,1697,Checking Existence of Edge Length Limited Paths,Algorithms,62.71929825,"['Array', 'Two Pointers', 'Union Find', 'Graph', 'Sorting']"
Medium,1698,Number of Distinct Substrings in a String,Algorithms,64.47446851,"['String', 'Trie', 'Rolling Hash', 'Suffix Array', 'Hash Function']"
Medium,1699,Number of Calls Between Two Persons,Database,80.94273766,['Database']
Easy,1700,Number of Students Unable to Eat Lunch,Algorithms,78.65823964,"['Array', 'Stack', 'Queue', 'Simulation']"
Medium,1701,Average Waiting Time,Algorithms,73.06255163,"['Array', 'Simulation']"
Medium,1702,Maximum Binary String After Change,Algorithms,46.98646607,"['String', 'Greedy']"
Hard,1703,Minimum Adjacent Swaps for K Consecutive Ones,Algorithms,42.04708632,"['Array', 'Greedy', 'Sliding Window', 'Prefix Sum']"
Easy,1704,Determine if String Halves Are Alike,Algorithms,78.64179695,"['String', 'Counting']"
Medium,1705,Maximum Number of Eaten Apples,Algorithms,40.38584135,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Medium,1706,Where Will the Ball Fall,Algorithms,71.99567355,"['Array', 'Matrix', 'Simulation']"
Hard,1707,Maximum XOR With an Element From Array,Algorithms,54.44397913,"['Array', 'Bit Manipulation', 'Trie']"
Easy,1708,Largest Subarray Length K,Algorithms,65.15484515,"['Array', 'Greedy']"
Medium,1709,Biggest Window Between Visits,Database,70.0983575,['Database']
Easy,1710,Maximum Units on a Truck,Algorithms,74.19637364,"['Array', 'Greedy', 'Sorting']"
Medium,1711,Count Good Meals,Algorithms,31.467188,"['Array', 'Hash Table']"
Medium,1712,Ways to Split Array Into Three Subarrays,Algorithms,33.40316973,"['Array', 'Two Pointers', 'Binary Search', 'Prefix Sum']"
Hard,1713,Minimum Operations to Make a Subsequence,Algorithms,48.69143454,"['Array', 'Hash Table', 'Binary Search', 'Greedy']"
Hard,1714,Sum Of Special Evenly-Spaced Elements In Array,Algorithms,48.97515528,"['Array', 'Dynamic Programming']"
Medium,1715,Count Apples and Oranges,Database,75.87694697,['Database']
Easy,1716,Calculate Money in Leetcode Bank,Algorithms,78.47313966,['Math']
Medium,1717,Maximum Score From Removing Substrings,Algorithms,62.84019274,"['String', 'Stack', 'Greedy']"
Medium,1718,Construct the Lexicographically Largest Valid Sequence,Algorithms,73.13825115,"['Array', 'Backtracking']"
Hard,1719,Number Of Ways To Reconstruct A Tree,Algorithms,44.13793103,"['Tree', 'Graph']"
Easy,1720,Decode XORed Array,Algorithms,86.92551148,"['Array', 'Bit Manipulation']"
Medium,1721,Swapping Nodes in a Linked List,Algorithms,68.38571512,"['Linked List', 'Two Pointers']"
Medium,1722,Minimize Hamming Distance After Swap Operations,Algorithms,48.0166867,"['Array', 'Depth-First Search', 'Union Find']"
Hard,1723,Find Minimum Time to Finish All Jobs,Algorithms,43.17542214,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,1724,Checking Existence of Edge Length Limited Paths II,Algorithms,51.44886364,"['Union Find', 'Graph', 'Minimum Spanning Tree']"
Easy,1725,Number Of Rectangles That Can Form The Largest Square,Algorithms,78.93991125,['Array']
Medium,1726,Tuple with Same Product,Algorithms,70.20741557,"['Array', 'Hash Table', 'Counting']"
Medium,1727,Largest Submatrix With Rearrangements,Algorithms,75.17775258,"['Array', 'Greedy', 'Sorting', 'Matrix']"
Hard,1728,Cat and Mouse II,Algorithms,39.55098313,"['Array', 'Math', 'Dynamic Programming', 'Graph', 'Topological Sort', 'Memoization', 'Matrix', 'Game Theory']"
Easy,1729,Find Followers Count,Database,69.55434464,['Database']
Medium,1730,Shortest Path to Get Food,Algorithms,56.61995459,"['Array', 'Breadth-First Search', 'Matrix']"
Easy,1731,The Number of Employees Which Report to Each Employee,Database,52.00332234,['Database']
Easy,1732,Find the Highest Altitude,Algorithms,83.82755307,"['Array', 'Prefix Sum']"
Medium,1733,Minimum Number of People to Teach,Algorithms,43.57687519,"['Array', 'Hash Table', 'Greedy']"
Medium,1734,Decode XORed Permutation,Algorithms,65.73546597,"['Array', 'Bit Manipulation']"
Hard,1735,Count Ways to Make Array With Product,Algorithms,52.9443435,"['Array', 'Math', 'Dynamic Programming', 'Combinatorics', 'Number Theory']"
Easy,1736,Latest Time by Replacing Hidden Digits,Algorithms,43.01888703,"['String', 'Greedy']"
Medium,1737,Change Minimum Characters to Satisfy One of Three Conditions,Algorithms,37.08228094,"['Hash Table', 'String', 'Counting', 'Prefix Sum']"
Medium,1738,Find Kth Largest XOR Coordinate Value,Algorithms,62.83655669,"['Array', 'Divide and Conquer', 'Bit Manipulation', 'Sorting', 'Heap (Priority Queue)', 'Matrix', 'Prefix Sum', 'Quickselect']"
Hard,1739,Building Boxes,Algorithms,51.77825516,"['Math', 'Binary Search', 'Greedy']"
Medium,1740,Find Distance in a Binary Tree,Algorithms,73.97061411,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,1741,Find Total Time Spent by Each Employee,Database,86.84514159,['Database']
Easy,1742,Maximum Number of Balls in a Box,Algorithms,74.21383648,"['Hash Table', 'Math', 'Counting']"
Medium,1743,Restore the Array From Adjacent Pairs,Algorithms,74.70361162,"['Array', 'Hash Table', 'Depth-First Search']"
Medium,1744,Can You Eat Your Favorite Candy on Your Favorite Day?,Algorithms,34.5896933,"['Array', 'Prefix Sum']"
Hard,1745,Palindrome Partitioning IV,Algorithms,44.68239508,"['String', 'Dynamic Programming']"
Medium,1746,Maximum Subarray Sum After One Operation,Algorithms,65.24095792,"['Array', 'Dynamic Programming']"
Medium,1747,Leetflex Banned Accounts,Database,62.33007937,['Database']
Easy,1748,Sum of Unique Elements,Algorithms,78.95287072,"['Array', 'Hash Table', 'Counting']"
Medium,1749,Maximum Absolute Sum of Any Subarray,Algorithms,71.50337652,"['Array', 'Dynamic Programming']"
Medium,1750,Minimum Length of String After Deleting Similar Ends,Algorithms,55.89574875,"['Two Pointers', 'String']"
Hard,1751,Maximum Number of Events That Can Be Attended II,Algorithms,60.85242279,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting']"
Easy,1752,Check if Array Is Sorted and Rotated,Algorithms,55.04167451,['Array']
Medium,1753,Maximum Score From Removing Stones,Algorithms,67.72978865,"['Math', 'Greedy', 'Heap (Priority Queue)']"
Medium,1754,Largest Merge Of Two Strings,Algorithms,51.02538107,"['Two Pointers', 'String', 'Greedy']"
Hard,1755,Closest Subsequence Sum,Algorithms,41.40599336,"['Array', 'Two Pointers', 'Dynamic Programming', 'Bit Manipulation', 'Sorting', 'Bitmask']"
Medium,1756,Design Most Recently Used Queue,Algorithms,77.72261268,"['Array', 'Hash Table', 'Stack', 'Design', 'Binary Indexed Tree', 'Ordered Set']"
Easy,1757,Recyclable and Low Fat Products,Database,89.33795716,['Database']
Easy,1758,Minimum Changes To Make Alternating Binary String,Algorithms,63.69658654,['String']
Medium,1759,Count Number of Homogenous Substrings,Algorithms,57.396761,"['Math', 'String']"
Medium,1760,Minimum Limit of Balls in a Bag,Algorithms,67.47466244,"['Array', 'Binary Search']"
Hard,1761,Minimum Degree of a Connected Trio in a Graph,Algorithms,43.24720602,['Graph']
Medium,1762,Buildings With an Ocean View,Algorithms,80.72899152,"['Array', 'Stack', 'Monotonic Stack']"
Easy,1763,Longest Nice Substring,Algorithms,62.31420097,"['Hash Table', 'String', 'Divide and Conquer', 'Bit Manipulation', 'Sliding Window']"
Medium,1764,Form Array by Concatenating Subarrays of Another Array,Algorithms,53.73178185,"['Array', 'Two Pointers', 'Greedy', 'String Matching']"
Medium,1765,Map of Highest Peak,Algorithms,75.0390559,"['Array', 'Breadth-First Search', 'Matrix']"
Hard,1766,Tree of Coprimes,Algorithms,41.9485743,"['Array', 'Math', 'Tree', 'Depth-First Search', 'Number Theory']"
Hard,1767,Find the Subtasks That Did Not Execute,Database,78.03954176,['Database']
Easy,1768,Merge Strings Alternately,Algorithms,82.20908328,"['Two Pointers', 'String']"
Medium,1769,Minimum Number of Operations to Move All Balls to Each Box,Algorithms,90.13333493,"['Array', 'String', 'Prefix Sum']"
Hard,1770,Maximum Score from Performing Multiplication Operations,Algorithms,42.10971427,"['Array', 'Dynamic Programming']"
Hard,1771,Maximize Palindrome Length From Subsequences,Algorithms,37.14416896,"['String', 'Dynamic Programming']"
Medium,1772,Sort Features by Popularity,Algorithms,65.76232327,"['Array', 'Hash Table', 'String', 'Sorting']"
Easy,1773,Count Items Matching a Rule,Algorithms,84.92888844,"['Array', 'String']"
Medium,1774,Closest Dessert Cost,Algorithms,47.61468642,"['Array', 'Dynamic Programming', 'Backtracking']"
Medium,1775,Equal Sum Arrays With Minimum Number of Operations,Algorithms,53.90148321,"['Array', 'Hash Table', 'Greedy', 'Counting']"
Hard,1776,Car Fleet II,Algorithms,56.23580169,"['Array', 'Math', 'Stack', 'Heap (Priority Queue)', 'Monotonic Stack']"
Easy,1777,Product's Price for Each Store,Database,82.47027646,['Database']
Medium,1778,Shortest Path in a Hidden Grid,Algorithms,44.18816302,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix', 'Interactive']"
Easy,1779,Find Nearest Point That Has the Same X or Y Coordinate,Algorithms,69.33402339,['Array']
Medium,1780,Check if Number is a Sum of Powers of Three,Algorithms,79.32784216,['Math']
Medium,1781,Sum of Beauty of All Substrings,Algorithms,70.25429932,"['Hash Table', 'String', 'Counting']"
Hard,1782,Count Pairs Of Nodes,Algorithms,40.66217288,"['Array', 'Two Pointers', 'Binary Search', 'Graph', 'Sorting']"
Medium,1783,Grand Slam Titles,Database,83.13580779,['Database']
Easy,1784,Check if Binary String Has at Most One Segment of Ones,Algorithms,39.03162571,['String']
Medium,1785,Minimum Elements to Add to Form a Given Sum,Algorithms,44.26014919,"['Array', 'Greedy']"
Medium,1786,Number of Restricted Paths From First to Last Node,Algorithms,39.89312268,"['Dynamic Programming', 'Graph', 'Topological Sort', 'Heap (Priority Queue)', 'Shortest Path']"
Hard,1787,Make the XOR of All Segments Equal to Zero,Algorithms,39.78052126,"['Array', 'Dynamic Programming', 'Bit Manipulation']"
Hard,1788,Maximize the Beauty of the Garden,Algorithms,63.69538077,"['Array', 'Hash Table', 'Greedy', 'Prefix Sum']"
Easy,1789,Primary Department for Each Employee,Database,71.27466579,['Database']
Easy,1790,Check if One String Swap Can Make Strings Equal,Algorithms,49.44843007,"['Hash Table', 'String', 'Counting']"
Easy,1791,Find Center of Star Graph,Algorithms,86.59827884,['Graph']
Medium,1792,Maximum Average Pass Ratio,Algorithms,71.53687808,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Hard,1793,Maximum Score of a Good Subarray,Algorithms,64.22377666,"['Array', 'Two Pointers', 'Binary Search', 'Stack', 'Monotonic Stack']"
Medium,1794,Count Pairs of Equal Substrings With Minimum Difference,Algorithms,63.79553798,"['Hash Table', 'String', 'Greedy']"
Easy,1795,Rearrange Products Table,Database,85.58341572,['Database']
Easy,1796,Second Largest Digit in a String,Algorithms,51.76820352,"['Hash Table', 'String']"
Medium,1797,Design Authentication Manager,Algorithms,57.67811687,"['Hash Table', 'Linked List', 'Design', 'Doubly-Linked List']"
Medium,1798,Maximum Number of Consecutive Values You Can Make,Algorithms,61.82127473,"['Array', 'Greedy', 'Sorting']"
Hard,1799,Maximize Score After N Operations,Algorithms,57.80366672,"['Array', 'Math', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Number Theory', 'Bitmask']"
Easy,1800,Maximum Ascending Subarray Sum,Algorithms,66.54626269,['Array']
Medium,1801,Number of Orders in the Backlog,Algorithms,51.63469797,"['Array', 'Heap (Priority Queue)', 'Simulation']"
Medium,1802,Maximum Value at a Given Index in a Bounded Array,Algorithms,38.85237483,"['Binary Search', 'Greedy']"
Hard,1803,Count Pairs With XOR in a Range,Algorithms,45.70648751,"['Array', 'Bit Manipulation', 'Trie']"
Medium,1804,Implement Trie II (Prefix Tree),Algorithms,63.10477035,"['Hash Table', 'String', 'Design', 'Trie']"
Easy,1805,Number of Different Integers in a String,Algorithms,39.03674397,"['Hash Table', 'String']"
Medium,1806,Minimum Number of Operations to Reinitialize a Permutation,Algorithms,72.05567815,"['Array', 'Math', 'Simulation']"
Medium,1807,Evaluate the Bracket Pairs of a String,Algorithms,68.07154141,"['Array', 'Hash Table', 'String']"
Hard,1808,Maximize Number of Nice Divisors,Algorithms,32.90432625,"['Math', 'Recursion', 'Number Theory']"
Easy,1809,Ad-Free Sessions,Database,58.71343498,['Database']
Medium,1810,Minimum Path Cost in a Hidden Grid,Algorithms,58.0839029,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Interactive', 'Shortest Path']"
Medium,1811,Find Interview Candidates,Database,60.69131556,['Database']
Easy,1812,Determine Color of a Chessboard Square,Algorithms,79.27370856,"['Math', 'String']"
Medium,1813,Sentence Similarity III,Algorithms,48.62822088,"['Array', 'Two Pointers', 'String']"
Medium,1814,Count Nice Pairs in an Array,Algorithms,48.54930538,"['Array', 'Hash Table', 'Math', 'Counting']"
Hard,1815,Maximum Number of Groups Getting Fresh Donuts,Algorithms,40.29555068,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Memoization', 'Bitmask']"
Easy,1816,Truncate Sentence,Algorithms,86.0023232,"['Array', 'String']"
Medium,1817,Finding the Users Active Minutes,Algorithms,80.4446829,"['Array', 'Hash Table']"
Medium,1818,Minimum Absolute Sum Difference,Algorithms,31.26508513,"['Array', 'Binary Search', 'Sorting', 'Ordered Set']"
Hard,1819,Number of Different Subsequences GCDs,Algorithms,41.71095626,"['Array', 'Math', 'Counting', 'Number Theory']"
Medium,1820,Maximum Number of Accepted Invitations,Algorithms,51.68039622,"['Array', 'Depth-First Search', 'Graph', 'Matrix']"
Easy,1821,Find Customers With Positive Revenue this Year,Database,87.66755305,['Database']
Easy,1822,Sign of the Product of an Array,Algorithms,65.05544609,"['Array', 'Math']"
Medium,1823,Find the Winner of the Circular Game,Algorithms,82.0339076,"['Array', 'Math', 'Recursion', 'Queue', 'Simulation']"
Medium,1824,Minimum Sideway Jumps,Algorithms,50.68379365,"['Array', 'Dynamic Programming', 'Greedy']"
Hard,1825,Finding MK Average,Algorithms,38.00803332,"['Design', 'Queue', 'Heap (Priority Queue)', 'Data Stream', 'Ordered Set']"
Easy,1826,Faulty Sensor,Algorithms,50.18527096,"['Array', 'Two Pointers']"
Easy,1827,Minimum Operations to Make the Array Increasing,Algorithms,81.00667929,"['Array', 'Greedy']"
Medium,1828,Queries on Number of Points Inside a Circle,Algorithms,86.38683439,"['Array', 'Math', 'Geometry']"
Medium,1829,Maximum XOR for Each Query,Algorithms,84.79788408,"['Array', 'Bit Manipulation', 'Prefix Sum']"
Hard,1830,Minimum Number of Operations to Make String Sorted,Algorithms,49.87505206,"['Math', 'String', 'Combinatorics']"
Medium,1831,Maximum Transaction Each Day,Database,82.41366679,['Database']
Easy,1832,Check if the Sentence Is Pangram,Algorithms,83.80017137,"['Hash Table', 'String']"
Medium,1833,Maximum Ice Cream Bars,Algorithms,73.85607586,"['Array', 'Greedy', 'Sorting', 'Counting Sort']"
Medium,1834,Single-Threaded CPU,Algorithms,46.30342298,"['Array', 'Sorting', 'Heap (Priority Queue)']"
Hard,1835,Find XOR Sum of All Pairs Bitwise AND,Algorithms,61.51837344,"['Array', 'Math', 'Bit Manipulation']"
Medium,1836,Remove Duplicates From an Unsorted Linked List,Algorithms,75.29932689,"['Hash Table', 'Linked List']"
Easy,1837,Sum of Digits in Base K,Algorithms,77.94201648,['Math']
Medium,1838,Frequency of the Most Frequent Element,Algorithms,44.05630254,"['Array', 'Binary Search', 'Greedy', 'Sliding Window', 'Sorting', 'Prefix Sum']"
Medium,1839,Longest Substring Of All Vowels in Order,Algorithms,50.44159178,"['String', 'Sliding Window']"
Hard,1840,Maximum Building Height,Algorithms,37.3247509,"['Array', 'Math', 'Sorting']"
Medium,1841,League Statistics,Database,53.43427926,['Database']
Hard,1842,Next Palindrome Using Same Digits,Algorithms,53.67702805,"['Two Pointers', 'String']"
Medium,1843,Suspicious Bank Accounts,Database,44.97598011,['Database']
Easy,1844,Replace All Digits with Characters,Algorithms,82.03263999,['String']
Medium,1845,Seat Reservation Manager,Algorithms,66.29936073,"['Design', 'Heap (Priority Queue)']"
Medium,1846,Maximum Element After Decreasing and Rearranging,Algorithms,65.7152779,"['Array', 'Greedy', 'Sorting']"
Hard,1847,Closest Room,Algorithms,39.50847945,"['Array', 'Binary Search', 'Sorting', 'Ordered Set']"
Easy,1848,Minimum Distance to the Target Element,Algorithms,54.24793489,['Array']
Medium,1849,Splitting a String Into Descending Consecutive Values,Algorithms,36.70646425,"['String', 'Backtracking']"
Medium,1850,Minimum Adjacent Swaps to Reach the Kth Smallest Number,Algorithms,71.21333869,"['Two Pointers', 'String', 'Greedy']"
Hard,1851,Minimum Interval to Include Each Query,Algorithms,52.0628941,"['Array', 'Binary Search', 'Line Sweep', 'Sorting', 'Heap (Priority Queue)']"
Medium,1852,Distinct Numbers in Each Subarray,Algorithms,76.94898706,"['Array', 'Hash Table', 'Sliding Window']"
Easy,1853,Convert Date Format,Database,85.46680619,['Database']
Easy,1854,Maximum Population Year,Algorithms,62.56775385,"['Array', 'Counting', 'Prefix Sum']"
Medium,1855,Maximum Distance Between a Pair of Values,Algorithms,53.76209863,"['Array', 'Two Pointers', 'Binary Search']"
Medium,1856,Maximum Subarray Min-Product,Algorithms,38.85862005,"['Array', 'Stack', 'Monotonic Stack', 'Prefix Sum']"
Hard,1857,Largest Color Value in a Directed Graph,Algorithms,49.461268,"['Hash Table', 'Dynamic Programming', 'Graph', 'Topological Sort', 'Memoization', 'Counting']"
Medium,1858,Longest Word With All Prefixes,Algorithms,71.43842887,"['Depth-First Search', 'Trie']"
Easy,1859,Sorting the Sentence,Algorithms,83.70310025,"['String', 'Sorting']"
Medium,1860,Incremental Memory Leak,Algorithms,72.47345776,"['Math', 'Simulation']"
Medium,1861,Rotating the Box,Algorithms,79.06119784,"['Array', 'Two Pointers', 'Matrix']"
Hard,1862,Sum of Floored Pairs,Algorithms,29.60305679,"['Array', 'Math', 'Binary Search', 'Prefix Sum']"
Easy,1863,Sum of All Subset XOR Totals,Algorithms,90.08107024,"['Array', 'Math', 'Backtracking', 'Bit Manipulation', 'Combinatorics', 'Enumeration']"
Medium,1864,Minimum Number of Swaps to Make the Binary String Alternating,Algorithms,43.42049451,"['String', 'Greedy']"
Medium,1865,Finding Pairs With a Certain Sum,Algorithms,48.97476341,"['Array', 'Hash Table', 'Design']"
Hard,1866,Number of Ways to Rearrange Sticks With K Sticks Visible,Algorithms,57.69139607,"['Math', 'Dynamic Programming', 'Combinatorics']"
Medium,1867,Orders With Maximum Quantity Above Average,Database,70.85433025,['Database']
Medium,1868,Product of Two Run-Length Encoded Arrays,Algorithms,59.29504311,"['Array', 'Two Pointers']"
Easy,1869,Longer Contiguous Segments of Ones than Zeros,Algorithms,61.55609956,['String']
Medium,1870,Minimum Speed to Arrive on Time,Algorithms,47.19400897,"['Array', 'Binary Search']"
Medium,1871,Jump Game VII,Algorithms,25.48527867,"['String', 'Dynamic Programming', 'Sliding Window', 'Prefix Sum']"
Hard,1872,Stone Game VIII,Algorithms,52.92708138,"['Array', 'Math', 'Dynamic Programming', 'Prefix Sum', 'Game Theory']"
Easy,1873,Calculate Special Bonus,Database,57.32210744,['Database']
Medium,1874,Minimize Product Sum of Two Arrays,Algorithms,89.03521567,"['Array', 'Greedy', 'Sorting']"
Medium,1875,Group Employees of the Same Salary,Database,66.57253626,['Database']
Easy,1876,Substrings of Size Three with Distinct Characters,Algorithms,75.3107253,"['Hash Table', 'String', 'Sliding Window', 'Counting']"
Medium,1877,Minimize Maximum Pair Sum in Array,Algorithms,81.44246657,"['Array', 'Two Pointers', 'Greedy', 'Sorting']"
Medium,1878,Get Biggest Three Rhombus Sums in a Grid,Algorithms,49.10133944,"['Array', 'Math', 'Sorting', 'Heap (Priority Queue)', 'Matrix', 'Prefix Sum']"
Hard,1879,Minimum XOR Sum of Two Arrays,Algorithms,48.86683114,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Easy,1880,Check if Word Equals Summation of Two Words,Algorithms,74.62353707,['String']
Medium,1881,Maximum Value after Insertion,Algorithms,38.48837354,"['String', 'Greedy']"
Medium,1882,Process Tasks Using Servers,Algorithms,40.96264161,"['Array', 'Heap (Priority Queue)']"
Hard,1883,Minimum Skips to Arrive at Meeting On Time,Algorithms,38.1869468,"['Array', 'Dynamic Programming']"
Medium,1884,Egg Drop With 2 Eggs and N Floors,Algorithms,73.62119725,"['Math', 'Dynamic Programming']"
Medium,1885,Count Pairs in Two Arrays,Algorithms,60.11256641,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Easy,1886,Determine Whether Matrix Can Be Obtained By Rotation,Algorithms,57.96388655,"['Array', 'Matrix']"
Medium,1887,Reduction Operations to Make the Array Elements Equal,Algorithms,72.30021953,"['Array', 'Sorting']"
Medium,1888,Minimum Number of Flips to Make the Binary String Alternating,Algorithms,40.43618206,"['String', 'Dynamic Programming', 'Greedy', 'Sliding Window']"
Hard,1889,Minimum Space Wasted From Packaging,Algorithms,32.47709564,"['Array', 'Binary Search', 'Sorting', 'Prefix Sum']"
Easy,1890,The Latest Login in 2020,Database,77.42002263,['Database']
Medium,1891,Cutting Ribbons,Algorithms,52.3815603,"['Array', 'Binary Search']"
Hard,1892,Page Recommendations II,Database,44.60413766,['Database']
Easy,1893,Check if All the Integers in a Range Are Covered,Algorithms,50.36208325,"['Array', 'Hash Table', 'Prefix Sum']"
Medium,1894,Find the Student that Will Replace the Chalk,Algorithms,53.18106134,"['Array', 'Binary Search', 'Simulation', 'Prefix Sum']"
Medium,1895,Largest Magic Square,Algorithms,52.36093652,"['Array', 'Matrix', 'Prefix Sum']"
Hard,1896,Minimum Cost to Change the Final Value of Expression,Algorithms,50.74417601,"['Math', 'String', 'Dynamic Programming', 'Stack']"
Easy,1897,Redistribute Characters to Make All Strings Equal,Algorithms,66.77058076,"['Hash Table', 'String', 'Counting']"
Medium,1898,Maximum Number of Removable Characters,Algorithms,45.58649398,"['Array', 'Two Pointers', 'String', 'Binary Search']"
Medium,1899,Merge Triplets to Form Target Triplet,Algorithms,67.50911059,"['Array', 'Greedy']"
Hard,1900,The Earliest and Latest Rounds Where Players Compete,Algorithms,48.06866953,"['Dynamic Programming', 'Memoization']"
Medium,1901,Find a Peak Element II,Algorithms,53.02492561,"['Array', 'Binary Search', 'Matrix']"
Medium,1902,Depth of BST Given Insertion Order,Algorithms,42.28535552,"['Array', 'Tree', 'Binary Search Tree', 'Binary Tree', 'Ordered Set']"
Easy,1903,Largest Odd Number in String,Algorithms,64.94154385,"['Math', 'String', 'Greedy']"
Medium,1904,The Number of Full Rounds You Have Played,Algorithms,43.39820008,"['Math', 'String']"
Medium,1905,Count Sub Islands,Algorithms,72.7995715,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Medium,1906,Minimum Absolute Difference Queries,Algorithms,44.68458781,"['Array', 'Hash Table']"
Medium,1907,Count Salary Categories,Database,62.18887897,['Database']
Medium,1908,Game of Nim,Algorithms,62.79039918,"['Array', 'Math', 'Dynamic Programming', 'Bit Manipulation', 'Brainteaser', 'Game Theory']"
Easy,1909,Remove One Element to Make the Array Strictly Increasing,Algorithms,28.62463155,['Array']
Medium,1910,Remove All Occurrences of a Substring,Algorithms,78.02928836,"['String', 'Stack', 'Simulation']"
Medium,1911,Maximum Alternating Subsequence Sum,Algorithms,58.70191573,"['Array', 'Dynamic Programming']"
Hard,1912,Design Movie Rental System,Algorithms,35.34671768,"['Array', 'Hash Table', 'Design', 'Heap (Priority Queue)', 'Ordered Set']"
Easy,1913,Maximum Product Difference Between Two Pairs,Algorithms,82.89054678,"['Array', 'Sorting']"
Medium,1914,Cyclically Rotating a Grid,Algorithms,50.29514687,"['Array', 'Matrix', 'Simulation']"
Medium,1915,Number of Wonderful Substrings,Algorithms,66.64639451,"['Hash Table', 'String', 'Bit Manipulation', 'Prefix Sum']"
Hard,1916,Count Ways to Build Rooms in an Ant Colony,Algorithms,48.3731598,"['Math', 'Dynamic Programming', 'Tree', 'Graph', 'Topological Sort', 'Combinatorics']"
Hard,1917,Leetcodify Friends Recommendations,Database,27.89804842,['Database']
Medium,1918,Kth Smallest Subarray Sum,Algorithms,52.82378356,"['Array', 'Binary Search', 'Sliding Window']"
Hard,1919,Leetcodify Similar Friends,Database,42.55067041,['Database']
Easy,1920,Build Array from Permutation,Algorithms,91.12058338,"['Array', 'Simulation']"
Medium,1921,Eliminate Maximum Number of Monsters,Algorithms,50.79406666,"['Array', 'Greedy', 'Sorting']"
Medium,1922,Count Good Numbers,Algorithms,56.49809649,"['Math', 'Recursion']"
Hard,1923,Longest Common Subpath,Algorithms,28.01630781,"['Array', 'Binary Search', 'Rolling Hash', 'Suffix Array', 'Hash Function']"
Hard,1924,Erect the Fence II,Algorithms,49.4943486,"['Array', 'Math', 'Geometry']"
Easy,1925,Count Square Sum Triples,Algorithms,68.8710863,"['Math', 'Enumeration']"
Medium,1926,Nearest Exit from Entrance in Maze,Algorithms,47.45342013,"['Array', 'Breadth-First Search', 'Matrix']"
Medium,1927,Sum Game,Algorithms,48.32184854,"['Math', 'String', 'Greedy', 'Game Theory']"
Hard,1928,Minimum Cost to Reach Destination in Time,Algorithms,39.80505272,"['Array', 'Dynamic Programming', 'Graph']"
Easy,1929,Concatenation of Array,Algorithms,90.45943841,"['Array', 'Simulation']"
Medium,1930,Unique Length-3 Palindromic Subsequences,Algorithms,70.91127185,"['Hash Table', 'String', 'Bit Manipulation', 'Prefix Sum']"
Hard,1931,Painting a Grid With Three Different Colors,Algorithms,57.17810332,['Dynamic Programming']
Hard,1932,Merge BSTs to Create Single BST,Algorithms,35.63390627,"['Hash Table', 'Binary Search', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,1933,Check if String Is Decomposable Into Value-Equal Substrings,Algorithms,50.65789474,['String']
Medium,1934,Confirmation Rate,Database,60.85924285,['Database']
Easy,1935,Maximum Number of Words You Can Type,Algorithms,74.56983357,"['Hash Table', 'String']"
Medium,1936,Add Minimum Number of Rungs,Algorithms,43.32756094,"['Array', 'Greedy']"
Medium,1937,Maximum Number of Points with Cost,Algorithms,42.19398953,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,1938,Maximum Genetic Difference Query,Algorithms,44.12790315,"['Array', 'Hash Table', 'Bit Manipulation', 'Depth-First Search', 'Trie']"
Easy,1939,Users That Actively Request Confirmation Messages,Database,56.64724807,['Database']
Medium,1940,Longest Common Subsequence Between Sorted Arrays,Algorithms,81.27508054,"['Array', 'Hash Table', 'Counting']"
Easy,1941,Check if All Characters Have Equal Number of Occurrences,Algorithms,78.54636484,"['Hash Table', 'String', 'Counting']"
Medium,1942,The Number of the Smallest Unoccupied Chair,Algorithms,60.44971856,"['Array', 'Hash Table', 'Heap (Priority Queue)']"
Medium,1943,Describe the Painting,Algorithms,51.06104923,"['Array', 'Hash Table', 'Sorting', 'Prefix Sum']"
Hard,1944,Number of Visible People in a Queue,Algorithms,71.09790235,"['Array', 'Stack', 'Monotonic Stack']"
Easy,1945,Sum of Digits of String After Convert,Algorithms,74.69620253,"['String', 'Simulation']"
Medium,1946,Largest Number After Mutating Substring,Algorithms,36.79497688,"['Array', 'String', 'Greedy']"
Medium,1947,Maximum Compatibility Score Sum,Algorithms,63.12948885,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,1948,Delete Duplicate Folders in System,Algorithms,53.68465924,"['Array', 'Hash Table', 'String', 'Trie', 'Hash Function']"
Medium,1949,Strong Friendship,Database,54.44172472,['Database']
Medium,1950,Maximum of Minimum Values in All Subarrays,Algorithms,47.93718772,"['Array', 'Stack', 'Monotonic Stack']"
Medium,1951,All the Pairs With the Maximum Number of Common Followers,Database,69.21295078,['Database']
Easy,1952,Three Divisors,Algorithms,62.62070897,"['Math', 'Enumeration', 'Number Theory']"
Medium,1953,Maximum Number of Weeks for Which You Can Work,Algorithms,41.27167279,"['Array', 'Greedy']"
Medium,1954,Minimum Garden Perimeter to Collect Enough Apples,Algorithms,54.33312496,"['Math', 'Binary Search']"
Hard,1955,Count Number of Special Subsequences,Algorithms,51.71332502,"['Array', 'Dynamic Programming']"
Hard,1956,Minimum Time For K Virus Variants to Spread,Algorithms,49.1942324,"['Array', 'Math', 'Binary Search', 'Geometry', 'Enumeration']"
Easy,1957,Delete Characters to Make Fancy String,Algorithms,71.58808933,['String']
Medium,1958,Check if Move is Legal,Algorithms,49.15259358,"['Array', 'Matrix', 'Enumeration']"
Medium,1959,Minimum Total Space Wasted With K Resizing Operations,Algorithms,42.76861307,"['Array', 'Dynamic Programming']"
Hard,1960,Maximum Product of the Length of Two Palindromic Substrings,Algorithms,30.35247143,"['String', 'Rolling Hash', 'Hash Function']"
Easy,1961,Check If String Is a Prefix of Array,Algorithms,52.45558145,"['Array', 'Two Pointers', 'String']"
Medium,1962,Remove Stones to Minimize the Total,Algorithms,64.49129046,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Medium,1963,Minimum Number of Swaps to Make the String Balanced,Algorithms,77.95302175,"['Two Pointers', 'String', 'Stack', 'Greedy']"
Hard,1964,Find the Longest Valid Obstacle Course at Each Position,Algorithms,62.50036773,"['Array', 'Binary Search', 'Binary Indexed Tree']"
Easy,1965,Employees With Missing Information,Database,72.84937482,['Database']
Medium,1966,Binary Searchable Numbers in an Unsorted Array,Algorithms,62.46703185,"['Array', 'Binary Search']"
Easy,1967,Number of Strings That Appear as Substrings in Word,Algorithms,81.84362788,"['Array', 'String']"
Medium,1968,Array With Elements Not Equal to Average of Neighbors,Algorithms,50.05530474,"['Array', 'Greedy', 'Sorting']"
Medium,1969,Minimum Non-Zero Product of the Array Elements,Algorithms,36.29882864,"['Math', 'Greedy', 'Recursion']"
Hard,1970,Last Day Where You Can Still Cross,Algorithms,62.21200925,"['Array', 'Binary Search', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Easy,1971,Find if Path Exists in Graph,Algorithms,53.912492,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Hard,1972,First and Last Call On the Same Day,Database,51.04500871,['Database']
Medium,1973,Count Nodes Equal to Sum of Descendants,Algorithms,76.97300639,"['Tree', 'Depth-First Search', 'Binary Tree']"
Easy,1974,Minimum Time to Type Word Using Special Typewriter,Algorithms,77.40137968,"['String', 'Greedy']"
Medium,1975,Maximum Matrix Sum,Algorithms,65.92988441,"['Array', 'Greedy', 'Matrix']"
Medium,1976,Number of Ways to Arrive at Destination,Algorithms,37.73178871,"['Dynamic Programming', 'Graph', 'Topological Sort', 'Shortest Path']"
Hard,1977,Number of Ways to Separate Numbers,Algorithms,20.99635139,"['String', 'Dynamic Programming', 'Suffix Array']"
Easy,1978,Employees Whose Manager Left the Company,,,
Easy,1979,Find Greatest Common Divisor of Array,Algorithms,78.5125516,"['Array', 'Math', 'Number Theory']"
Medium,1980,Find Unique Binary String,Algorithms,79.36019106,"['Array', 'Hash Table', 'String', 'Backtracking']"
Medium,1981,Minimize the Difference Between Target and Chosen Elements,Algorithms,35.79423069,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,1982,Find Array Given Subset Sums,Algorithms,48.64433812,"['Array', 'Divide and Conquer']"
Medium,1983,Widest Pair of Indices With Equal Range Sum,Algorithms,53.08319739,"['Array', 'Hash Table', 'Prefix Sum']"
Easy,1984,Minimum Difference Between Highest and Lowest of K Scores,Algorithms,58.37889646,"['Array', 'Sliding Window', 'Sorting']"
Medium,1985,Find the Kth Largest Integer in the Array,Algorithms,46.71629061,"['Array', 'String', 'Divide and Conquer', 'Sorting', 'Heap (Priority Queue)', 'Quickselect']"
Medium,1986,Minimum Number of Work Sessions to Finish the Tasks,Algorithms,33.63097221,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,1987,Number of Unique Good Subsequences,Algorithms,52.06031913,"['String', 'Dynamic Programming']"
Medium,1988,Find Cutoff Score for Each School,Database,66.84862482,['Database']
Medium,1989,Maximum Number of People That Can Be Caught in Tag,Algorithms,49.41176471,"['Array', 'Greedy']"
Medium,1990,Count the Number of Experiments,Database,49.07820909,['Database']
Easy,1991,Find the Middle Index in Array,Algorithms,68.01803707,"['Array', 'Prefix Sum']"
Medium,1992,Find All Groups of Farmland,Algorithms,75.47556871,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Medium,1993,Operations on Tree,Algorithms,43.13459992,"['Array', 'Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Design']"
Hard,1994,The Number of Good Subsets,Algorithms,35.80820086,"['Array', 'Math', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Easy,1995,Count Special Quadruplets,Algorithms,63.12418301,"['Array', 'Hash Table', 'Enumeration']"
Medium,1996,The Number of Weak Characters in the Game,Algorithms,44.18861172,"['Array', 'Stack', 'Greedy', 'Sorting', 'Monotonic Stack']"
Medium,1997,First Day Where You Have Been in All the Rooms,Algorithms,39.58385771,"['Array', 'Dynamic Programming']"
Hard,1998,GCD Sort of an Array,Algorithms,46.42292655,"['Array', 'Math', 'Union Find', 'Sorting', 'Number Theory']"
Medium,1999,Smallest Greater Multiple Made of Two Digits,Algorithms,48.04161567,"['Math', 'Enumeration']"
Easy,2000,Reverse Prefix of Word,Algorithms,86.39982785,"['Two Pointers', 'String', 'Stack']"
Medium,2001,Number of Pairs of Interchangeable Rectangles,Algorithms,51.4058851,"['Array', 'Hash Table', 'Math', 'Counting', 'Number Theory']"
Medium,2002,Maximum Product of the Length of Two Palindromic Subsequences,Algorithms,61.20627262,"['String', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,2003,Smallest Missing Genetic Value in Each Subtree,Algorithms,46.39853923,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Union Find']"
Hard,2004,The Number of Seniors and Juniors to Join the Company,Database,45.10745313,['Database']
Hard,2005,Subtree Removal Game with Fibonacci Tree,Algorithms,56.96202532,"['Math', 'Dynamic Programming', 'Tree', 'Binary Tree', 'Game Theory']"
Easy,2006,Count Number of Pairs With Absolute Difference K,Algorithms,84.82928456,"['Array', 'Hash Table', 'Counting']"
Medium,2007,Find Original Array From Doubled Array,Algorithms,40.45572326,"['Array', 'Hash Table', 'Greedy', 'Sorting']"
Medium,2008,Maximum Earnings From Taxi,Algorithms,44.7647774,"['Array', 'Hash Table', 'Binary Search', 'Dynamic Programming', 'Sorting']"
Hard,2009,Minimum Number of Operations to Make Array Continuous,Algorithms,52.22673626,"['Array', 'Hash Table', 'Binary Search', 'Sliding Window']"
Hard,2010,The Number of Seniors and Juniors to Join the Company II,Database,64.4606414,['Database']
Easy,2011,Final Value of Variable After Performing Operations,Algorithms,89.54608108,"['Array', 'String', 'Simulation']"
Medium,2012,Sum of Beauty in the Array,Algorithms,50.00346368,['Array']
Medium,2013,Detect Squares,Algorithms,51.16859138,"['Array', 'Hash Table', 'Design', 'Counting']"
Hard,2014,Longest Subsequence Repeated k Times,Algorithms,53.91044776,"['String', 'Backtracking', 'Greedy', 'Counting', 'Enumeration']"
Medium,2015,Average Height of Buildings in Each Segment,Algorithms,57.53968254,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Easy,2016,Maximum Difference Between Increasing Elements,Algorithms,59.07431464,['Array']
Medium,2017,Grid Game,Algorithms,60.99771901,"['Array', 'Matrix', 'Prefix Sum']"
Medium,2018,Check if Word Can Be Placed In Crossword,Algorithms,49.99520568,"['Array', 'Matrix', 'Enumeration']"
Hard,2019,The Score of Students Solving Math Expression,Algorithms,33.06474243,"['Array', 'Math', 'String', 'Dynamic Programming', 'Stack', 'Memoization']"
Medium,2020,Number of Accounts That Did Not Stream,Database,72.28586381,['Database']
Medium,2021,Brightest Position on Street,Algorithms,60.73752711,"['Array', 'Sorting', 'Prefix Sum', 'Ordered Set']"
Easy,2022,Convert 1D Array Into 2D Array,Algorithms,71.76221434,"['Array', 'Matrix', 'Simulation']"
Medium,2023,Number of Pairs of Strings With Concatenation Equal to Target,Algorithms,74.78642222,"['Array', 'Hash Table', 'String', 'Counting']"
Medium,2024,Maximize the Confusion of an Exam,Algorithms,68.45797092,"['String', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Hard,2025,Maximum Number of Ways to Partition an Array,Algorithms,34.51799324,"['Array', 'Hash Table', 'Counting', 'Enumeration', 'Prefix Sum']"
Easy,2026,Low-Quality Problems,Database,84.56186649,['Database']
Easy,2027,Minimum Moves to Convert String,Algorithms,56.36377851,"['String', 'Greedy']"
Medium,2028,Find Missing Observations,Algorithms,57.39565159,"['Array', 'Math', 'Simulation']"
Medium,2029,Stone Game IX,Algorithms,28.8348338,"['Array', 'Math', 'Greedy', 'Counting', 'Game Theory']"
Hard,2030,Smallest K-Length Subsequence With Occurrences of a Letter,Algorithms,38.8425282,"['String', 'Stack', 'Greedy', 'Monotonic Stack']"
Medium,2031,Count Subarrays With More Ones Than Zeros,Algorithms,51.18422463,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Easy,2032,Two Out of Three,Algorithms,76.45759451,"['Array', 'Hash Table', 'Bit Manipulation']"
Medium,2033,Minimum Operations to Make a Uni-Value Grid,Algorithms,67.45959464,"['Array', 'Math', 'Sorting', 'Matrix']"
Medium,2034,Stock Price Fluctuation ,Algorithms,48.00323344,"['Hash Table', 'Design', 'Heap (Priority Queue)', 'Data Stream', 'Ordered Set']"
Hard,2035,Partition Array Into Two Arrays to Minimize Sum Difference,Algorithms,21.56802765,"['Array', 'Two Pointers', 'Binary Search', 'Dynamic Programming', 'Bit Manipulation', 'Ordered Set', 'Bitmask']"
Medium,2036,Maximum Alternating Subarray Sum,Algorithms,39.68437664,"['Array', 'Dynamic Programming']"
Easy,2037,Minimum Number of Moves to Seat Everyone,Algorithms,87.27592138,"['Array', 'Greedy', 'Sorting', 'Counting Sort']"
Medium,2038,Remove Colored Pieces if Both Neighbors are the Same Color,Algorithms,62.79676429,"['Math', 'String', 'Greedy', 'Game Theory']"
Medium,2039,The Time When the Network Becomes Idle,Algorithms,53.45169859,"['Array', 'Breadth-First Search', 'Graph']"
Hard,2040,Kth Smallest Product of Two Sorted Arrays,Algorithms,30.66614996,"['Array', 'Binary Search']"
Medium,2041,Accepted Candidates From the Interviews,Database,78.65471882,['Database']
Easy,2042,Check if Numbers Are Ascending in a Sentence,Algorithms,71.6276014,['String']
Medium,2043,Simple Bank System,Algorithms,61.39534302,"['Array', 'Hash Table', 'Design', 'Simulation']"
Medium,2044,Count Number of Maximum Bitwise-OR Subsets,Algorithms,87.93906182,"['Array', 'Backtracking', 'Bit Manipulation', 'Enumeration']"
Hard,2045,Second Minimum Time to Reach Destination,Algorithms,62.57093351,"['Breadth-First Search', 'Graph', 'Shortest Path']"
Medium,2046,Sort Linked List Already Sorted Using Absolute Values,Algorithms,66.89433244,"['Linked List', 'Two Pointers', 'Sorting']"
Easy,2047,Number of Valid Words in a Sentence,Algorithms,29.9297337,['String']
Medium,2048,Next Greater Numerically Balanced Number,Algorithms,49.01595,"['Hash Table', 'Math', 'Backtracking', 'Counting', 'Enumeration']"
Medium,2049,Count Nodes With the Highest Score,Algorithms,51.05029391,"['Array', 'Tree', 'Depth-First Search', 'Binary Tree']"
Hard,2050,Parallel Courses III,Algorithms,66.75662691,"['Array', 'Dynamic Programming', 'Graph', 'Topological Sort']"
Medium,2051,The Category of Each Member in the Store,Database,70.74668837,['Database']
Medium,2052,Minimum Cost to Separate Sentence Into Rows,Algorithms,50.35938904,"['Array', 'Dynamic Programming']"
Easy,2053,Kth Distinct String in an Array,Algorithms,82.01350921,"['Array', 'Hash Table', 'String', 'Counting']"
Medium,2054,Two Best Non-Overlapping Events,Algorithms,60.88560036,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting', 'Heap (Priority Queue)']"
Medium,2055,Plates Between Candles,Algorithms,46.54886803,"['Array', 'String', 'Binary Search', 'Prefix Sum']"
Hard,2056,Number of Valid Move Combinations On Chessboard,Algorithms,47.64277501,"['Array', 'String', 'Backtracking', 'Simulation']"
Easy,2057,Smallest Index With Equal Value,Algorithms,72.44516498,['Array']
Medium,2058,Find the Minimum and Maximum Number of Nodes Between Critical Points,Algorithms,69.42644642,['Linked List']
Medium,2059,Minimum Operations to Convert Number,Algorithms,50.47227819,"['Array', 'Breadth-First Search']"
Hard,2060,Check if an Original String Exists Given Two Encoded Strings,Algorithms,43.16844025,"['String', 'Dynamic Programming']"
Medium,2061,Number of Spaces Cleaning Robot Cleaned,Algorithms,61.99350211,"['Array', 'Matrix', 'Simulation']"
Easy,2062,Count Vowel Substrings of a String,Algorithms,71.16211829,"['Hash Table', 'String']"
Medium,2063,Vowels of All Substrings,Algorithms,54.62097612,"['Math', 'String', 'Dynamic Programming', 'Combinatorics']"
Medium,2064,Minimized Maximum of Products Distributed to Any Store,Algorithms,62.53923218,"['Array', 'Binary Search', 'Greedy']"
Hard,2065,Maximum Path Quality of a Graph,Algorithms,59.51602651,"['Array', 'Backtracking', 'Graph']"
Medium,2066,Account Balance,Database,82.25445623,['Database']
Medium,2067,Number of Equal Count Substrings,Algorithms,44.56957929,"['Hash Table', 'String', 'Sliding Window', 'Counting']"
Easy,2068,Check Whether Two Strings are Almost Equivalent,Algorithms,63.58212721,"['Hash Table', 'String', 'Counting']"
Medium,2069,Walking Robot Simulation II,Algorithms,25.01749242,"['Design', 'Simulation']"
Medium,2070,Most Beautiful Item for Each Query,Algorithms,62.04586807,"['Array', 'Binary Search', 'Sorting']"
Hard,2071,Maximum Number of Tasks You Can Assign,Algorithms,50.77880032,"['Array', 'Two Pointers', 'Binary Search', 'Greedy', 'Queue', 'Sorting', 'Monotonic Queue']"
Easy,2072,The Winner University,Database,75.44397163,['Database']
Easy,2073,Time Needed to Buy Tickets,Algorithms,70.58115587,"['Array', 'Queue', 'Simulation']"
Medium,2074,Reverse Nodes in Even Length Groups,Algorithms,60.64893709,['Linked List']
Medium,2075,Decode the Slanted Ciphertext,Algorithms,49.04003392,"['String', 'Simulation']"
Hard,2076,Process Restricted Friend Requests,Algorithms,56.80939343,"['Union Find', 'Graph']"
Medium,2077,Paths in Maze That Lead to Same Room,Algorithms,55.95367713,['Graph']
Easy,2078,Two Furthest Houses With Different Colors,Algorithms,65.5217954,"['Array', 'Greedy']"
Medium,2079,Watering Plants,Algorithms,79.93642335,"['Array', 'Simulation']"
Medium,2080,Range Frequency Queries,Algorithms,39.5152274,"['Array', 'Hash Table', 'Binary Search', 'Design', 'Segment Tree']"
Hard,2081,Sum of k-Mirror Numbers,Algorithms,41.40887259,"['Math', 'Enumeration']"
Easy,2082,The Number of Rich Customers,Database,77.46478873,['Database']
Medium,2083,Substrings That Begin and End With the Same Letter,Algorithms,74.32128558,"['Hash Table', 'Math', 'String', 'Counting', 'Prefix Sum']"
Medium,2084,Drop Type 1 Orders for Customers With Type 0 Orders,Database,87.19908804,['Database']
Easy,2085,Count Common Words With One Occurrence,Algorithms,72.23256063,"['Array', 'Hash Table', 'String', 'Counting']"
Medium,2086,Minimum Number of Food Buckets to Feed the Hamsters,Algorithms,46.89989416,"['String', 'Dynamic Programming', 'Greedy']"
Medium,2087,Minimum Cost Homecoming of a Robot in a Grid,Algorithms,51.09175298,"['Array', 'Greedy']"
Hard,2088,Count Fertile Pyramids in a Land,Algorithms,65.24934977,"['Array', 'Dynamic Programming', 'Matrix']"
Easy,2089,Find Target Indices After Sorting Array,Algorithms,77.13945732,"['Array', 'Binary Search', 'Sorting']"
Medium,2090,K Radius Subarray Averages,Algorithms,45.97984113,"['Array', 'Sliding Window']"
Medium,2091,Removing Minimum and Maximum From Array,Algorithms,55.18082341,"['Array', 'Greedy']"
Hard,2092,Find All People With Secret,,,
t, Heap Sort, with worst-case time complexity of $O(M \log M)$.,,,
,,,,,
        - In Java, `Arrays.sort()` is implemented using a variant of the Quick Sort algorithm which has a time complexity of $O(M \log M)$.,,,,
,,,,,
    - Populating `sameTimeMeetings` will take $O(M)$ time.,,,,,
,,,,,
    - Then we initialize the `knowsSecret` array of size $N$. It will take $O(N)$ time.,,,,,
,,,,,
    - Then there is a `for` loop. The number of iterations of the `for` loop depends on the number of unique meeting times. It will be at most $M$. Let's narrow our analysis to one iteration of the `for` loop.,,,,,
,,,,,
        - Creating `meet` and initiating `q` may vary from $O(1)$ time to $O(M)$ time, depending on the number of meetings happening at the time `t`. However,,,,
,,,,,
            (**Amortized time complexity** is the time taken per operation averaged over all operations) ,,,,,
,,,,,
            > - If one iteration of creating `meet` and initiating `q` takes $O(1)$ time (when a single meeting is happening at the time `t`), then there may be the next iteration of the `for` loop. However,,,,
            ,,,,,
            > - If one iteration of creating `meet` and initiating `q` takes $O(M)$ time, then there will be no next iteration of the `for` loop because all meetings happening will get processed in the current iteration.,,,,
,,,,,
            > Hence, when creating `meet` and initiating `q` takes $O(1)$ time, the number of `for` loop iterations will be $O(1)$. ,,,
            ,,,,,
            Thus, the amortized time complexity for creating `meet` and initiating `q` per iteration of the `for` loop will be $O(1)$ ,,,,
,,,,,
        - The BFS may take $O(N)$ time in the worst case because, at any instance, the amortized time complexity will be $O(1)$. ,,,
,,,,,
            > - If every meeting time has only $2$ participants, then there will be $O(M)$ unique meeting times deciding the number of iterations of the `for` loop. In each iteration of the `for` loop, the time complexity will be $O(2 \cdot M)$ which is $O(M)$.,,,
,,,,,
            > - If every meeting time has $N$ participants, then there will be $O(\frac{M}{N})$ unique meeting times deciding the number of iterations of the `for` loop. In each iteration of the `for` loop, the time complexity will be $O(N \cdot \frac{M}{N})$ which is $O(M)$. ,,,
,,,,,
            Thus, the amortized time complexity of BFS per iteration of the `for` loop will be $O(1)$.,,,,
,,,,,
        - Thus, each iteration of the `for` loop will take amortized $O(1)$ time for creating `meet`, and BFS.,,,
            ,,,,,
    - Finally, we are iterating over the `knowsSecret` array to find indices of people who know the secret. It will take $O(N)$ time.,,,,
,,,,,
    Hence, the total time complexity will be $O(M \log M + M + N + M \cdot 1 + N)$,,,,
,,,,,
* Space complexity: $O(M + N)$,,,,,
,,,,,
    - We are sorting the `meetings` array in place. When we sort an array in place, some extra space is used. The space complexity depends on the implementation of the sorting algorithm in the programming language.,,,,
     ,,,,,
      - In Python3, the `sort` method sorts a list using the Timsort algorithm,,,,
         ,,,,,
      - In C++, the `sort()` function is implemented as a hybrid of Quick Sort, and Insertion Sort,,,
      ,,,,,
      - In Java, `Arrays.sort()` is implemented using a variant of the Quick Sort algorithm which has a space complexity of $O(\log M)$.,,,,
    ,,,,,
    - The `sameTimeMeetings` will take $O(M)$ space.,,,,,
,,,,,
    - The `knowsSecret` array will take $O(N)$ space.,,,,,
,,,,,
    - The `meet` HashMap will take $O(M)$ space per iteration of `for` loop. After iteration, it will be empty. Hence,,,,
,,,,,
    - The `q` may grow up to $O(N)$ per iteration of the `for` loop because any person can be in the queue at most once. After iteration, it will be empty. Hence,,,,
,,,,,
    Hence, total space complexity will be $O(M + N)$.,,,,
     ,,,,,
---,,,,,
,,,,,
### Approach 5: Union-Find with Reset,,,,,
,,,,,
#### Intuition,,,,,
,,,,,
In the [intuition of the previous approach](#intuition-3), we noted the following.,,,,
,,,,,
> The purpose of traversal is to find the connectedness of the graph at a particular time.,,,,,
,,,,,
We initiated traversal from people who already knew the secret at the time `t`.,,,,,
,,,,,
Instead of doing traversal, we can use [Union-Find](https://leetcode.com/explore/learn/card/graph/618/disjoint-set/) to find the connectedness of the graph at a particular time. For each person taking part in a meeting, and check if they are connected to any person who already knows the secret,,,
,,,,,
> [**Union-Find**](https://leetcode.com/explore/learn/card/graph/618/disjoint-set/), also known as **Disjoint Set**, merge existing sets,,,
>,,,,,
> If readers are not familiar with Union-Find, then they are encouraged to visit [**Union-Find Explore Card**](https://leetcode.com/explore/learn/card/graph/618/disjoint-set/) to learn about it. It includes the heuristics to optimize the Union-Find data structure.,,,,
> - *union by rank* (height) or *union by size*. We can use either of these.,,,,,
> - *path compression*,,,,,
>,,,,,
> We, in this approach,,,,
,,,,,
Thus, in this approach, and for each meeting `[x,,,
,,,,,
After performing all the unions, we will again visit all `[x, and check if any one of them is connected to `0` or not *(if any of them is connected to `0`,,,
,,,,,
At the end, we will return indices of all the people who know the secret.,,,,
,,,,,
Is that enough? Let's try to find out through an example.,,,,,
,,,,,
```testcase [],,,,,
6,,,,,
[[2,3, [1, 4]],,
1,,,,,
```,,,,,
,,,,,
The `meetings` are already sorted in increasing order of `t`. Initially, our graph looks like the following. `1` is connected to `0`,,,,
,,,,,
![t0](../Figures/2092/2092_slide_images_used/Slide6_1.PNG),,,,,
,,,,,
After meeting `[2,3, one more connection is added to the graph. However,,,
,,,,,
![t1](../Figures/2092/2092_slide_images_used/Slide6_2.PNG),,,,,
,,,,,
Let's process the next meeting `[1,2, `2` will get connected to `0`,,,
,,,,,
![t2](../Figures/2092/2092_slide_images_used/Slide6_3.PNG),,,,,
,,,,,
The third meeting `[3,4,,,,
,,,,,
![t3](../Figures/2092/2092_slide_images_used/Slide6_4.PNG),,,,,
,,,,,
Now `3` was already connected to `0`, but `3` doesn't know the secret yet. However, and `3` had met `2` in the first meeting. However,,,
,,,,,
Hence, it seems connection with `0` is not enough. We may need to maintain a flag array `knowsSecret` to mark if a person knows the secret or not,,,,
,,,,,
Let's process further to see if it will work or not!,,,,,
,,,,,
We have two meetings taking place at time `t = 4`. Their union is represented by red color in the following figure.,,,,,
,,,,,
![t4](../Figures/2092/2092_slide_images_used/Slide6_5.PNG),,,,,
,,,,,
Now, we will revisit every meeting at time `t = 4` again. The first one being `[5, 4]`. Both of them are connected to `0`,,,
,,,,,
If we had visited `[5,0, then we would have marked `5` as known,,,
,,,,,
However, given the fixed time,,,,
,,,,,
We can overcome this by doing two passes after uniting, at least for this test case. However, we must do as many passes as the number of meetings at that fixed time. This isn't efficient!,,,
,,,,,
Thus, introducing the `knowsSecret` flag array doesn't seem to lead to an efficient solution.,,,,
,,,,,
**We need to proceed only with the fact that if a person is connected to `0`, then he/she knows the secret.**,,,,
,,,,,
In [intuition of the previous approach](#intuition-3), we noted the following.,,,,
,,,,,
> Let's assume that one participant of a transitive meeting gets to know the secret **after time `t`**. It is worth noting that knowing after time `t` will not affect meetings happening at the time `t`. ,,,,,
>   ,,,,,
> More particulary, if none of `x` and `y` knew the secret **before or at time `t`**, then it will have no effect on meeting `[x,,,
,,,,,
Let's focus more on the last sentence of the above quote. If none of them knew the secret, then meeting `[x, t]` will not have any effect on them. To trigger the effect of the meeting,,,
,,,,,
**What to do to dissolve the effect?**  ,,,,,
Well, we can do the opposite of uniting them. We can disunite `x` and `y` into single components.,,,,
,,,,,
Since even after doing all the unions, they weren't able to receive the secret, we can safely disunite them.,,,
,,,,,
Now to disunite them into single components, we just need to reset the initial properties of Union-Find. We need to do this only for these two persons. ,,,,
,,,,,
After processing all the `meetings`, all those persons who are connected to `0` will know the secret. ,,,,
,,,,,
Here is the animation explaining the approach for the following input.,,,,,
,,,,,
```input,,,,,
6,,,,,
[[2,3, [1, 4]],,
1,,,,,
```,,,,,
,,,,,
!?!../Documents/2092/2092_slideshow_union_find.json:960,540!?!,,,,
<br/>,,,,,
,,,,,
It is worth noting that we don't need a separate flag array `knowsSecret`. Connection with `0` is enough to conclude that a person knows the secret. That's why the above animation doesn't highlight with green color.,,,,,
,,,,,
With this intuition, let's discuss the implementable algorithm.,,,,
,,,,,
,,,,,
#### Algorithm,,,,,
,,,,,
1. Define a class `UnionFind` to implement the Union-Find data structure.,,,,,
    ,,,,,
    The **constructor** of `UnionFind` will take `n` as input, and initialize `parent` and `rank` arrays of size `n`. The `parent` array will store the parent of each node,,,,
,,,,,
    Initially, every node is the parent of itself,,,,
    ,,,,,
    It will have the following **methods**:,,,,,
,,,,,
    - `find(x)`: Find the parent of node `x`. It will use the *Path Compression* heuristic.,,,,,
,,,,,
    - `unite(x, y)`: Unite two nodes `x` and `y`. It will use the *Union by Rank* heuristic.,,,,
,,,,,
    - `connected(x, y)`: Check if two nodes `x` and `y` are connected or not.,,,,
,,,,,
    - `reset(x)`: Reset the initial properties of node `x`. It will set the parent of node `x` to `x`, and the rank of node `x` to `0`.,,,,
,,,,,
2. Sort `meetings` in increasing order of `t`.,,,,,
,,,,,
3. Create a HashMap `sameTimeMeetings` for grouping meetings happening at the same time `t`. The key of HashMap will be time `t`, and the value will be a list of `(x,,,,
,,,,,
    Make sure that `sameTimeMeetings` remembers the order of insertion, since we are inserting meetings in increasing order of `t`.,,,,
,,,,,
4. Create a `graph`. It will be an instance of the `UnionFind` class and will have `n` nodes.,,,,,
,,,,,
5. Unite `firstPerson` with `0` in `graph`.,,,,,
,,,,,
6. Process `sameTimeMeetings` in increasing order of `t`. Let's say `t` is the time.,,,,,
,,,,,
    - Unite all two persons taking part in a meeting. ,,,,,
,,,,,
    - If any one of them is connected to `0`, then both of them will be connected to `0`. ,,,,
,,,,,
        Similarly, if any one of them is NOT connected to `0`, since they were united among themselves. In this case,,,
,,,,,
7. Return indices of all those people who are connected to `0` in the `graph`.,,,,,
,,,,,
,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/b4ZMoceH/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""b4ZMoceH""""></iframe>",,,,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Before analyzing the time complexity, let's first understand the time complexity of Union-Find. If an instance of Union-Find is created with $\text{nodes}$,,,,
,,,,,
> - **Constructor**: $O(\text{nodes})$, because we are initializing `parent` and `rank` arrays of size $\text{nodes}$. However,,,,
,,,,,
> - `find(x)`: It is amortized $O(1)$ time, because we are using *Path Compression* and *Union by Rank* heuristics. ,,,,
,,,,,
> - `unite(x, y)`: It is amortized $O(1)$ time,,,,
    ,,,,,
> - `connected(x, y)`: It is amortized $O(1)$ time,,,,
    ,,,,,
>> In actuality, the time complexity of the above three methods after using *Path Compression* and *Union by Rank* heuristics is $O\left( \boldsymbol{\alpha}(\text{nodes}) \right)$ time, $\boldsymbol{\alpha}(\text{nodes})$ is less than $5$ for all practical purposes. More [here](https://leetcode.com/explore/learn/card/graph/618/disjoint-set/3843/),,,
,,,,,
> - `reset(x)`: It is $O(1)$ time because we are just resetting the initial properties of node `x`.,,,,,
,,,,,
For analyzing the time complexity of our algorithm, let $N$ be the number of people,,,,
,,,,,
* Time complexity: $O( M \log M + N)$,,,,,
,,,,,
    - Sorting `meetings` will take $O(M \log M)$ time. This may vary depending on the implementation of the sorting algorithm in the programming language.,,,,,
       ,,,,,
       - In Python3, the `sort` method sorts a list using the Timsort algorithm,,,,
 ,,,,,
       - In C++, the `sort()` function is implemented as a hybrid of Quick Sort, and Insertion Sort,,,
,,,,,
       - In Java, `Arrays.sort()` is implemented using a variant of the Quick Sort algorithm which has a time complexity of $O(M \log M)$.,,,,
,,,,,
    - Populating `sameTimeMeetings` will take $O(M)$ time.,,,,,
,,,,,
    - Creating `graph` will take $O(N)$ time.,,,,,
,,,,,
    - Uniting `firstPerson` with `0` will take $O(1)$ time.,,,,,
,,,,,
    - Upon looking at the `for` loop, we can observe that we will process each meeting exactly twice, and once while checking if any one of them is connected to `0` or not. ,,,
,,,,,
        - For uniting, it will be amortized $O(1)$ time.,,,,
,,,,,
        - For checking if any one of them is connected to `0` or not, it will be amortized $O(1)$ time. Resetting, will be $O(1)$ time.,,,
    ,,,,,
      Hence, the total time complexity of the `for` loop will be $O(2 \cdot M \cdot 1)$,,,,
    ,,,,,
    - Finally, we are iterating over the `graph` to find indices that are connected to `0`. It will take $O(N \cdot 1)$ time.,,,,
,,,,,
    Hence, the total time complexity will be $O(M \log M + M + N + M + N)$,,,,
    ,,,,,
* Space complexity: $O(M + N)$,,,,,
,,,,,
    - We are sorting the `meetings` array in place. When we sort an array in place, some extra space is used. The space complexity depends on the implementation of the sorting algorithm in the programming language.,,,,
     ,,,,,
      - In Python3, the `sort` method sorts a list using the Timsort algorithm,,,,
         ,,,,,
      - In C++, the `sort()` function is implemented as a hybrid of Quick Sort, and Insertion Sort,,,
      ,,,,,
      - In Java, `Arrays.sort()` is implemented using a variant of the Quick Sort algorithm which has a space complexity of $O(\log M)$.,,,,
,,,,,
    - The `sameTimeMeetings` will take $O(M)$ space.,,,,,
,,,,,
    - The `graph` will take $O(N)$ space for `parent` and `rank` arrays.,,,,,
,,,,,
    Hence, total space complexity will be $O(M + N)$.    ,,,,
        ,,,,,
---,,,,,
,,,,,
As a challenge, try to implement the [Union-Find approach](#implementation-4) *without* using the `sameTimeMeetings` HashMap! We perhaps may need some iterators to process all the meetings happening at the same time. Readers can comment their code below.,,,,
,,,,,
"---""",,,,,
Medium,2093,Minimum Cost to Reach City With Discounts,Algorithms,59.83057209,"['Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Easy,2094,Finding 3-Digit Even Numbers,Algorithms,78.73923177,"['Array', 'Hash Table', 'Sorting', 'Enumeration']"
Medium,2095,Delete the Middle Node of a Linked List,Algorithms,59.60488368,"['Linked List', 'Two Pointers']"
Medium,2096,Step-By-Step Directions From a Binary Tree Node to Another,Algorithms,56.27593334,"['String', 'Tree', 'Depth-First Search', 'Binary Tree']"
Hard,2097,Valid Arrangement of Pairs,Algorithms,66.27341087,"['Depth-First Search', 'Graph', 'Eulerian Circuit']"
Medium,2098,Subsequence of Size K With the Largest Even Sum,Algorithms,35.56510529,"['Array', 'Greedy', 'Sorting']"
Easy,2099,Find Subsequence of Length K With the Largest Sum,Algorithms,45.29489476,"['Array', 'Hash Table', 'Sorting', 'Heap (Priority Queue)']"
Medium,2100,Find Good Days to Rob the Bank,Algorithms,50.23339017,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Medium,2101,Detonate the Maximum Bombs,Algorithms,49.10819251,"['Array', 'Math', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Geometry']"
Hard,2102,Sequentially Ordinal Rank Tracker,Algorithms,61.62794724,"['Design', 'Heap (Priority Queue)', 'Data Stream', 'Ordered Set']"
Easy,2103,Rings and Rods,Algorithms,81.11621296,"['Hash Table', 'String']"
Medium,2104,Sum of Subarray Ranges,Algorithms,60.19643486,"['Array', 'Stack', 'Monotonic Stack']"
Medium,2105,Watering Plants II,Algorithms,48.11276058,"['Array', 'Two Pointers', 'Simulation']"
Hard,2106,Maximum Fruits Harvested After at Most K Steps,Algorithms,36.33118181,"['Array', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Medium,2107,Number of Unique Flavors After Sharing K Candies,Algorithms,59.71959341,"['Array', 'Hash Table', 'Sliding Window']"
Easy,2108,Find First Palindromic String in the Array,Algorithms,83.88944784,"['Array', 'Two Pointers', 'String']"
Medium,2109,Adding Spaces to a String,Algorithms,71.63984896,"['Array', 'Two Pointers', 'String', 'Simulation']"
Medium,2110,Number of Smooth Descent Periods of a Stock,Algorithms,59.11222431,"['Array', 'Math', 'Dynamic Programming']"
Hard,2111,Minimum Operations to Make the Array K-Increasing,Algorithms,39.03981834,"['Array', 'Binary Search']"
Medium,2112,The Airport With the Most Traffic,Database,71.44622991,['Database']
Medium,2113,Elements in Array After Removing and Replacing Elements,Algorithms,69.75945017,['Array']
Easy,2114,Maximum Number of Words Found in Sentences,Algorithms,86.60907504,"['Array', 'String']"
Medium,2115,Find All Possible Recipes from Given Supplies,Algorithms,56.43138765,"['Array', 'Hash Table', 'String', 'Graph', 'Topological Sort']"
Medium,2116,Check if a Parentheses String Can Be Valid,Algorithms,44.79143145,"['String', 'Stack', 'Greedy']"
Hard,2117,Abbreviating the Product of a Range,Algorithms,24.4011075,['Math']
Hard,2118,Build the Equation,Database,56.41558442,['Database']
Easy,2119,A Number After a Double Reversal,Algorithms,81.143328,['Math']
Medium,2120,Execution of All Suffix Instructions Staying in a Grid,Algorithms,81.51144896,"['String', 'Simulation']"
Medium,2121,Intervals Between Identical Elements,Algorithms,44.82332592,"['Array', 'Hash Table', 'Prefix Sum']"
Hard,2122,Recover the Original Array,Algorithms,39.93444941,"['Array', 'Hash Table', 'Two Pointers', 'Sorting', 'Enumeration']"
Hard,2123,Minimum Operations to Remove Adjacent Ones in Matrix,Algorithms,40.67300658,"['Array', 'Graph', 'Matrix']"
Easy,2124,Check if All A's Appears Before All B's,Algorithms,72.41125288,['String']
Medium,2125,Number of Laser Beams in a Bank,Algorithms,85.40629866,"['Array', 'Math', 'String', 'Matrix']"
Medium,2126,Destroying Asteroids,Algorithms,52.59558653,"['Array', 'Greedy', 'Sorting']"
Hard,2127,Maximum Employees to Be Invited to a Meeting,Algorithms,62.14011799,"['Depth-First Search', 'Graph', 'Topological Sort']"
Medium,2128,Remove All Ones With Row and Column Flips,Algorithms,76.15388052,"['Array', 'Math', 'Bit Manipulation', 'Matrix']"
Easy,2129,Capitalize the Title,Algorithms,66.36141738,['String']
Medium,2130,Maximum Twin Sum of a Linked List,Algorithms,81.40764388,"['Linked List', 'Two Pointers', 'Stack']"
Medium,2131,Longest Palindrome by Concatenating Two Letter Words,Algorithms,47.87832744,"['Array', 'Hash Table', 'String', 'Greedy', 'Counting']"
Hard,2132,Stamping the Grid,Algorithms,33.0502914,"['Array', 'Greedy', 'Matrix', 'Prefix Sum']"
Easy,2133,Check if Every Row and Column Contains All Numbers,Algorithms,52.71300781,"['Array', 'Hash Table', 'Matrix']"
Medium,2134,Minimum Swaps to Group All 1's Together II,Algorithms,65.48961961,"['Array', 'Sliding Window']"
Medium,2135,Count Words Obtained After Adding a Letter,Algorithms,43.3906071,"['Array', 'Hash Table', 'String', 'Bit Manipulation', 'Sorting']"
Hard,2136,Earliest Possible Day of Full Bloom,Algorithms,71.11151405,"['Array', 'Greedy', 'Sorting']"
Medium,2137,Pour Water Between Buckets to Make Water Levels Equal,Algorithms,66.98272229,"['Array', 'Binary Search']"
Easy,2138,Divide a String Into Groups of Size k,Algorithms,67.41728844,"['String', 'Simulation']"
Medium,2139,Minimum Moves to Reach Target Score,Algorithms,51.4400089,"['Math', 'Greedy']"
Medium,2140,Solving Questions With Brainpower,Algorithms,60.33801847,"['Array', 'Dynamic Programming']"
Hard,2141,Maximum Running Time of N Computers,Algorithms,49.85583224,"['Array', 'Binary Search', 'Greedy', 'Sorting']"
Medium,2142,The Number of Passengers in Each Bus I,Database,48.83614579,['Database']
Hard,2143,Choose Numbers From Two Arrays in Range,Algorithms,52.27557411,"['Array', 'Dynamic Programming']"
Easy,2144,Minimum Cost of Buying Candies With Discount,Algorithms,62.0231965,"['Array', 'Greedy', 'Sorting']"
Medium,2145,Count the Hidden Sequences,Algorithms,56.70937812,"['Array', 'Prefix Sum']"
Medium,2146,K Highest Ranked Items Within a Price Range,Algorithms,44.53567656,"['Array', 'Breadth-First Search', 'Sorting', 'Heap (Priority Queue)', 'Matrix']"
Hard,2147,Number of Ways to Divide a Long Corridor,,,
iew](#overview), the pair of a seat `S` is fixed.   ,,,,
,,,,,
"![fpm_2](../Figures/2147/2147_used/Slide7_2.PNG){:height=""""75px""""}",,,,,
,,,,,
Again, from the fact discussed in [overview](#overview),,,,
,,,,,
We can only install a divider between two `S` which are neighbors, but not paired.,,,,
,,,,,
Thus, between yellow-blue `S`, and between blue-orange `S`,,,
,,,,,
"![fpm_3](../Figures/2147/2147_used/Slide7_3.PNG){:height=""""75px""""}",,,,,
,,,,,
Hence, using the multiplication principle,,,,
*Every pink divider has three choices of purple divider, and exactly one will be chosen*,,,,
,,,,,
"![fpm_4](../Figures/2147/2147_used/Slide8_and_9.PNG){:height=""""400px""""}",,,,,
,,,,,
Hence, what eventually matters is the difference between indices of non-paired `S` neighbors. Hence, and then compute the difference between indices of non-paired `S` neighbors. The differences need to be multiplied to get the final answer. We also need to take care of modulo,,,
,,,,,
#### Algorithm,,,,,
,,,,,
1. Store `1000000007` in the variable `MOD` for convenience. It is a good practice to store constants.,,,,,
,,,,,
2. Declare array/list `indices` to store indices of `S` in the `corridor`. Traverse linearly in the `corridor`, and store indices of `S` in the `indices` array.,,,,
,,,,,
3. If `indices` is empty, or if the length of `indices` is odd,,,,
,,,,,
4. Initialize a variable `count` to `1`. This will store the final answer.,,,,,
   ,,,,,
    > If we want to take the product of integers, then we should initialize the variable to `1`. If we want to take the sum of integers,,,,
    >,,,,,
    > **Caution:** We will always restrict `count` to be less than `MOD`.   ,,,,,
    > Now," we may want to multiply `count` with """"differences between seat indices""""",,,,
    > ,,,,,
    > - The maximum value of `count` can be `1000000006` (one less than `MOD`). which is roughly $10^9$.,,,,,
"    > - The maximum value of """"differences between seat indices"""" can be analyzed by looking at constraints. It can be as large as `(100000 - 1) - 0`", which is roughly $10^5$.,,,,
    > ,,,,,
    > Now, their product can be as large as $10^{14}$,,,,
    > Thus, we need to make sure that `count` has enough capacity to store this product.,,,,
    >,,,,,
    > Readers might be prompted to think that $(a \cdot b) \bmod c = \textbf{((a mod c) ⸱ (b mod c))} \bmod c$ might be useful to avoid overflow. Overall computation will clip the value of `count` to be less than `MOD`. However, the $\textbf{bold}$ part can still overflow. Thus,,,,
,,,,,
5. Initialize two variables,,,,,
    - `previous_pair_last` to `1`,,,,,
    - `current_pair_first` to `2`,,,,,
,,,,,
6. While `current_pair_first` is less than the length of `indices`, do the following,,,,
    - update `count` as `count = (count * (indices[current_pair_first] - indices[previous_pair_last])) % MOD`,,,,,
    - increment `previous_pair_last` by `2`,,,,,
    - increment `current_pair_first` by `2`,,,,,
,,,,,
    > The loop invariant ensures that `current_pair_first` is equal to `previous_pair_last + 1`. Thus, instead of two variables,,,,
,,,,,
7. Return `count`. Make sure to return `count` as `int` as required by the function signature.,,,,,
,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/ZUqn5Bvp/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""ZUqn5Bvp""""></iframe>",,,,,
,,,,,
**Implementation Note:** As mentioned in [algorithm](#algorithm-3), we need to declare `count` such that it can store value as large as $10^{14}$, we need a data type of size of at least $46$ bits.,,,
,,,,,
In C++, we have used `long` to avoid overflow. The [standard](https://en.cppreference.com/w/cpp/language/types) ensures `long` is $64$ bits in LP64 data model, and it is much larger than $10^{14}$. Similar constraint is fulfilled by `long` in [Java](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html),,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Let $N$ be the length of the `corridor`.,,,,,
,,,,,
* Time complexity: $O(N)$,,,,,
,,,,,
    We are linearly traversing the `corridor` to store indices of `S` in an array. This will take $O(N)$ time.,,,,,
,,,,,
    We are also linearly traversing the `indices` array to compute the product of differences between indices of non-paired `S` neighbor. These computations take constant time, and there can be at most $N/2$ such computations. Thus, which is $O(N)$.,,,
,,,,,
    Hence, the overall time complexity will be $O(N) + O(N)$,,,,
,,,,,
* Space complexity: $O(N)$,,,,,
,,,,,
    We are using an array to store indices of `S` in the `corridor`. This, in worst case,,,,
    ,,,,,
---,,,,,
,,,,,
### Approach 5: Combinatorics, Space Optimized,,,,
,,,,,
#### Intuition,,,,,
,,,,,
In the [previous approach](#approach-4-combinatorics), we were storing indices of `S` in an array. Let's try to come up with a way to avoid using this array.,,,,
,,,,,
The reason we were storing indices was to compute the index difference between non-paired `S` neighbors.,,,,,
,,,,,
Now, instead of storing all of the indices in the array,,,,
,,,,,
Hence, we can calculate the index difference on the fly by keeping track of `previous_pair_last`. To identify if `S` corresponds to `current_pair_first` or `previous_pair_last`,,,,
,,,,,
Readers are encouraged to implement this approach. Make sure to handle corner cases, particularly cases when no divider can be installed such that each section contains **exactly** two `S`. Moreover,,,,
,,,,,
#### Algorithm,,,,,
,,,,,
1. Store `1000000007` in the variable `MOD` for convenience. It is a good practice to store constants.,,,,,
,,,,,
2. Initialize a variable `count` to `1`. This will store the final answer.,,,,,
   ,,,,,
    > If we want to take the product of integers, then we should initialize the variable to `1`. If we want to take the sum of integers,,,,
    >,,,,,
    > **Caution:** We will always restrict `count` to be less than `MOD`.   ,,,,,
    > Now," we may want to multiply `count` with """"differences between seat indices""""",,,,
    > ,,,,,
    > - The maximum value of `count ` can be `1000000006` (one less than `MOD`). which is roughly $10^9$.,,,,,
"    > - The maximum value of """"differences between seat indices"""" can be analyzed by looking at constraints. It can be as large as `(100000 - 1) - 0`", which is roughly $10^5$.,,,,
    > ,,,,,
    > Now, their product can be as large as $10^{14}$,,,,
    > Thus, we need to make sure that `count` has enough capacity to store this product.,,,,
    >,,,,,
    > Readers might be prompted to think that $(a \cdot b) \bmod c = \textbf{((a mod c) ⸱ (b mod c))} \bmod c$ might be useful to avoid overflow. Overall computation will clip the value of `count` to be less than `MOD`. However, the $\textbf{bold}$ part can still overflow. Thus,,,,
,,,,,
3. Initialize two variables,,,,,
    - `previous_pair_last` to `null`. It will store the index of the last `S` in the previous section.,,,,,
    - `seats` to `0`. It will store the number of `S` in the current section.,,,,,
,,,,,
4. Iterate over `corridor` from left to right, for `index` from `0` to `n - 1`,,,,
    - if `corridor[index]` is `S`, then,,,,
        - increment `seats` by `1`,,,,,
        - if `seats == 2`, then,,,,
            - update `previous_pair_last` as `index`,,,,,
            - reset `seats` to `0`,,,,,
        - else if `seats == 1` and there exists a previous section, then update `count` as `count = (count * (index - previous_pair_last)) % MOD` ,,,,
,,,,,
5. If `seats == 1`, it means there are an odd number of `S` in the `corridor`. Thus,,,,
,,,,,
6. If `seats` is not equal to `1`, then it must be equal to `0`, we reset it to `0`. Now `seats` can be `0` when,,,
    - there are non-zero even number of `S` in the `corridor`,,,,,
    - there is no `S` in the `corridor`,,,,,
,,,,,
    In the latter case, we should return `0`. Both cases are differentiated from the fact that in the former case `previous_pair_last` will be some integer representing index,,,,
,,,,,
    Thus, if `previous_pair_last` is `null`,,,,
,,,,,
7. Return `count`. Make sure to return `count` as `int` as required by the function signature.,,,,,
,,,,,
#### Implementation,,,,,
,,,,,
"<iframe src=""""https://leetcode.com/playground/QbfgRdJK/shared"""" frameBorder=""""0"""" width=""""100%"""" height=""""500"""" name=""""QbfgRdJK""""></iframe>",,,,,
,,,,,
**Implementation Note:** As mentioned in [algorithm](#algorithm-4), we need to declare `count` such that it can store value as large as $10^{14}$, we need a data type of size of at least $46$ bits.,,,
,,,,,
In C++, we have used `long` to avoid overflow. The [standard](https://en.cppreference.com/w/cpp/language/types) ensures `long` is $64$ bits in LP64 data model, and it is much larger than $10^{14}$. A similar constraint is fulfilled by `long` in [Java](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html),,,
,,,,,
#### Complexity Analysis,,,,,
,,,,,
Let $N$ be the length of the `corridor`.,,,,,
,,,,,
* Time complexity: $O(N)$,,,,,
,,,,,
    We are linearly traversing the `corridor`. In each iteration, we are doing constant time computations. Thus, which is $O(N)$.,,,
,,,,,
* Space complexity: $O(1)$,,,,,
,,,,,
    We are using a handful of variables, which will take constant extra space. Thus,,,,
    ,,,,,
"---""",,,,,
Easy,2148,Count Elements With Strictly Smaller and Greater Elements ,Algorithms,59.21622179,"['Array', 'Sorting', 'Counting']"
Medium,2149,Rearrange Array Elements by Sign,Algorithms,84.31958892,"['Array', 'Two Pointers', 'Simulation']"
Medium,2150,Find All Lonely Numbers in the Array,Algorithms,61.45562805,"['Array', 'Hash Table', 'Counting']"
Hard,2151,Maximum Good People Based on Statements,Algorithms,50.81728059,"['Array', 'Backtracking', 'Bit Manipulation', 'Enumeration']"
Medium,2152,Minimum Number of Lines to Cover Points,Algorithms,42.50531538,"['Array', 'Hash Table', 'Math', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Geometry', 'Bitmask']"
Hard,2153,The Number of Passengers in Each Bus II,Database,39.92503408,['Database']
Easy,2154,Keep Multiplying Found Values by Two,Algorithms,71.31909215,"['Array', 'Hash Table', 'Sorting', 'Simulation']"
Medium,2155,All Divisions With the Highest Score of a Binary Array,Algorithms,64.34225551,['Array']
Hard,2156,Find Substring With Given Hash Value,Algorithms,24.75216339,"['String', 'Sliding Window', 'Rolling Hash', 'Hash Function']"
Hard,2157,Groups of Strings,Algorithms,26.56124699,"['String', 'Bit Manipulation', 'Union Find']"
Hard,2158,Amount of New Area Painted Each Day,Algorithms,55.46376007,"['Array', 'Segment Tree', 'Ordered Set']"
Medium,2159,Order Two Columns Independently,Database,60.91968912,['Database']
Easy,2160,Minimum Sum of Four Digit Number After Splitting Digits,Algorithms,86.05199873,"['Math', 'Greedy', 'Sorting']"
Medium,2161,Partition Array According to Given Pivot,Algorithms,89.93719897,"['Array', 'Two Pointers', 'Simulation']"
Medium,2162,Minimum Cost to Set Cooking Time,Algorithms,40.91330814,"['Math', 'Enumeration']"
Hard,2163,Minimum Difference in Sums After Removal of Elements,Algorithms,49.22713221,"['Array', 'Dynamic Programming', 'Heap (Priority Queue)']"
Easy,2164,Sort Even and Odd Indices Independently,Algorithms,62.57465431,"['Array', 'Sorting']"
Medium,2165,Smallest Value of the Rearranged Number,Algorithms,52.61243877,"['Math', 'Sorting']"
Medium,2166,Design Bitset,Algorithms,31.73823008,"['Array', 'Hash Table', 'String', 'Design']"
Hard,2167,Minimum Time to Remove All Cars Containing Illegal Goods,Algorithms,41.14727134,"['String', 'Dynamic Programming']"
Medium,2168,Unique Substrings With Equal Digit Frequency,Algorithms,64.05365751,"['Hash Table', 'String', 'Rolling Hash', 'Counting', 'Hash Function']"
Easy,2169,Count Operations to Obtain Zero,Algorithms,74.75234227,"['Math', 'Simulation']"
Medium,2170,Minimum Operations to Make the Array Alternating,Algorithms,34.35742499,"['Array', 'Hash Table', 'Greedy', 'Counting']"
Medium,2171,Removing Minimum Number of Magic Beans,Algorithms,43.51441553,"['Array', 'Greedy', 'Sorting', 'Enumeration', 'Prefix Sum']"
Hard,2172,Maximum AND Sum of Array,Algorithms,49.68421053,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Hard,2173,Longest Winning Streak,Database,54.06833092,['Database']
Medium,2174,Remove All Ones With Row and Column Flips II,Algorithms,66.87689203,"['Array', 'Bit Manipulation', 'Breadth-First Search', 'Matrix']"
Medium,2175,The Change in Global Rankings,Database,60.64908722,['Database']
Easy,2176,Count Equal and Divisible Pairs in an Array,Algorithms,84.07432979,['Array']
Medium,2177,Find Three Consecutive Integers That Sum to a Given Number,Algorithms,64.57803733,"['Math', 'Simulation']"
Medium,2178,Maximum Split of Positive Even Integers,Algorithms,59.31811348,"['Math', 'Backtracking', 'Greedy']"
Hard,2179,Count Good Triplets in an Array,Algorithms,66.02180507,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Easy,2180,Count Integers With Even Digit Sum,Algorithms,68.58763137,"['Math', 'Simulation']"
Medium,2181,Merge Nodes in Between Zeros,Algorithms,89.54180408,"['Linked List', 'Simulation']"
Medium,2182,Construct String With Repeat Limit,Algorithms,70.8687345,"['Hash Table', 'String', 'Greedy', 'Heap (Priority Queue)', 'Counting']"
Hard,2183,Count Array Pairs Divisible by K,Algorithms,30.08060594,"['Array', 'Math', 'Number Theory']"
Medium,2184,Number of Ways to Build Sturdy Brick Wall,Algorithms,49.39110437,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Easy,2185,Counting Words With a Given Prefix,Algorithms,84.51714175,"['Array', 'String', 'String Matching']"
Medium,2186,Minimum Number of Steps to Make Two Strings Anagram II,Algorithms,72.72146064,"['Hash Table', 'String', 'Counting']"
Medium,2187,Minimum Time to Complete Trips,Algorithms,39.0020142,"['Array', 'Binary Search']"
Hard,2188,Minimum Time to Finish the Race,Algorithms,42.01060858,"['Array', 'Dynamic Programming']"
Medium,2189,Number of Ways to Build House of Cards,Algorithms,61.95630781,"['Math', 'Dynamic Programming']"
Easy,2190,Most Frequent Number Following Key In an Array,Algorithms,59.15617822,"['Array', 'Hash Table', 'Counting']"
Medium,2191,Sort the Jumbled Numbers,Algorithms,59.98635781,"['Array', 'Sorting']"
Medium,2192,All Ancestors of a Node in a Directed Acyclic Graph,Algorithms,61.86776867,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Hard,2193,Minimum Number of Moves to Make Palindrome,Algorithms,51.91079431,"['Two Pointers', 'String', 'Greedy', 'Binary Indexed Tree']"
Easy,2194,Cells in a Range on an Excel Sheet,Algorithms,83.87677157,['String']
Medium,2195,Append K Integers With Minimal Sum,Algorithms,26.03664954,"['Array', 'Math', 'Greedy', 'Sorting']"
Medium,2196,Create Binary Tree From Descriptions,Algorithms,81.63156098,"['Array', 'Hash Table', 'Tree', 'Binary Tree']"
Hard,2197,Replace Non-Coprime Numbers in Array,Algorithms,40.30452415,"['Array', 'Math', 'Stack', 'Number Theory']"
Medium,2198,Number of Single Divisor Triplets,Algorithms,54.00152439,['Math']
Hard,2199,Finding the Topic of Each Post,Database,50.07784698,['Database']
Easy,2200,Find All K-Distant Indices in an Array,Algorithms,67.22147501,"['Array', 'Two Pointers']"
Medium,2201,Count Artifacts That Can Be Extracted,Algorithms,56.2913734,"['Array', 'Hash Table', 'Simulation']"
Medium,2202,Maximize the Topmost Element After K Moves,Algorithms,23.40309334,"['Array', 'Greedy']"
Hard,2203,Minimum Weighted Subgraph With the Required Paths,Algorithms,38.33571619,"['Graph', 'Shortest Path']"
Hard,2204,Distance to a Cycle in Undirected Graph,Algorithms,72.86545541,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Easy,2205,The Number of Users That Are Eligible for Discount,Database,50.51518438,['Database']
Easy,2206,Divide Array Into Equal Pairs,Algorithms,79.26274176,"['Array', 'Hash Table', 'Bit Manipulation', 'Counting']"
Medium,2207,Maximize Number of Subsequences in a String,Algorithms,35.17029929,"['String', 'Greedy', 'Prefix Sum']"
Medium,2208,Minimum Operations to Halve Array Sum,Algorithms,48.77704455,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Hard,2209,Minimum White Tiles After Covering With Carpets,Algorithms,36.97881943,"['String', 'Dynamic Programming', 'Prefix Sum']"
Easy,2210,Count Hills and Valleys in an Array,Algorithms,61.5404436,['Array']
Medium,2211,Count Collisions on a Road,Algorithms,44.28705206,"['String', 'Stack', 'Simulation']"
Medium,2212,Maximum Points in an Archery Competition,Algorithms,50.20438499,"['Array', 'Backtracking', 'Bit Manipulation', 'Enumeration']"
Hard,2213,Longest Substring of One Repeating Character,Algorithms,32.86489008,"['Array', 'String', 'Segment Tree', 'Ordered Set']"
Medium,2214,Minimum Health to Beat Game,Algorithms,58.64666203,"['Array', 'Greedy']"
Easy,2215,Find the Difference of Two Arrays,Algorithms,80.73426289,"['Array', 'Hash Table']"
Medium,2216,Minimum Deletions to Make Array Beautiful,Algorithms,48.75095847,"['Array', 'Stack', 'Greedy']"
Medium,2217,Find Palindrome With Fixed Length,Algorithms,37.36800794,"['Array', 'Math']"
Hard,2218,Maximum Value of K Coins From Piles,Algorithms,60.36342711,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Medium,2219,Maximum Sum Score of Array,Algorithms,61.97250448,"['Array', 'Prefix Sum']"
Easy,2220,Minimum Bit Flips to Convert Number,Algorithms,87.51722668,['Bit Manipulation']
Medium,2221,Find Triangular Sum of an Array,Algorithms,78.82233535,"['Array', 'Math', 'Simulation', 'Combinatorics']"
Medium,2222,Number of Ways to Select Buildings,Algorithms,50.43515433,"['String', 'Dynamic Programming', 'Prefix Sum']"
Hard,2223,Sum of Scores of Built Strings,Algorithms,41.96792826,"['String', 'Binary Search', 'Rolling Hash', 'Suffix Array', 'String Matching', 'Hash Function']"
Easy,2224,Minimum Number of Operations to Convert Time,Algorithms,65.4872074,"['String', 'Greedy']"
Medium,2225,Find Players With Zero or One Losses,Algorithms,72.61309964,"['Array', 'Hash Table', 'Sorting', 'Counting']"
Medium,2226,Maximum Candies Allocated to K Children,Algorithms,50.11222737,"['Array', 'Binary Search']"
Hard,2227,Encrypt and Decrypt Strings,Algorithms,36.69465742,"['Array', 'Hash Table', 'String', 'Design', 'Trie']"
Medium,2228,Users With Two Purchases Within Seven Days,Database,46.02365868,['Database']
Easy,2229,Check if an Array Is Consecutive,Algorithms,61.85031185,"['Array', 'Hash Table', 'Sorting']"
Easy,2230,The Users That Are Eligible for Discount,Database,50.68132549,['Database']
Easy,2231,Largest Number After Digit Swaps by Parity,Algorithms,63.54178383,"['Sorting', 'Heap (Priority Queue)']"
Medium,2232,Minimize Result by Adding Parentheses to Expression,Algorithms,67.47107712,"['String', 'Enumeration']"
Medium,2233,Maximum Product After K Increments,Algorithms,42.22020912,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Hard,2234,Maximum Total Beauty of the Gardens,Algorithms,29.92282093,"['Array', 'Two Pointers', 'Binary Search', 'Greedy', 'Sorting', 'Enumeration', 'Prefix Sum']"
Easy,2235,Add Two Integers,Algorithms,88.1784804,['Math']
Easy,2236,Root Equals Sum of Children,Algorithms,84.93082705,"['Tree', 'Binary Tree']"
Medium,2237,Count Positions on Street With Required Brightness,Algorithms,62.12427746,"['Array', 'Prefix Sum']"
Medium,2238,Number of Times a Driver Was a Passenger,Database,72.07916421,['Database']
Easy,2239,Find Closest Number to Zero,Algorithms,47.06060993,['Array']
Medium,2240,Number of Ways to Buy Pens and Pencils,Algorithms,55.8206892,"['Math', 'Enumeration']"
Medium,2241,Design an ATM Machine,Algorithms,42.02698559,"['Array', 'Greedy', 'Design']"
Hard,2242,Maximum Score of a Node Sequence,Algorithms,38.97817222,"['Array', 'Graph', 'Sorting', 'Enumeration']"
Easy,2243,Calculate Digit Sum of a String,Algorithms,66.50698716,"['String', 'Simulation']"
Medium,2244,Minimum Rounds to Complete All Tasks,Algorithms,62.94397428,"['Array', 'Hash Table', 'Greedy', 'Counting']"
Medium,2245,Maximum Trailing Zeros in a Cornered Path,Algorithms,36.52306677,"['Array', 'Matrix', 'Prefix Sum']"
Hard,2246,Longest Path With Different Adjacent Characters,Algorithms,53.91308306,"['Array', 'String', 'Tree', 'Depth-First Search', 'Graph', 'Topological Sort']"
Hard,2247,Maximum Cost of Trip With K Highways,Algorithms,50.09606148,"['Dynamic Programming', 'Bit Manipulation', 'Graph', 'Bitmask']"
Easy,2248,Intersection of Multiple Arrays,Algorithms,68.40481627,"['Array', 'Hash Table', 'Sorting', 'Counting']"
Medium,2249,Count Lattice Points Inside a Circle,Algorithms,55.01130083,"['Array', 'Hash Table', 'Math', 'Geometry', 'Enumeration']"
Medium,2250,Count Number of Rectangles Containing Each Point,Algorithms,35.95080075,"['Array', 'Hash Table', 'Binary Search', 'Binary Indexed Tree', 'Sorting']"
Hard,2251,Number of Flowers in Full Bloom,Algorithms,57.13775766,"['Array', 'Hash Table', 'Binary Search', 'Sorting', 'Prefix Sum', 'Ordered Set']"
Hard,2252,Dynamic Pivoting of a Table,Database,57.24873999,['Database']
Hard,2253,Dynamic Unpivoting of a Table,Database,68.44127333,['Database']
Hard,2254,Design Video Sharing Platform,Algorithms,63.56578589,"['Hash Table', 'Stack', 'Design', 'Ordered Set']"
Easy,2255,Count Prefixes of a Given String,Algorithms,73.82465292,"['Array', 'String']"
Medium,2256,Minimum Average Difference,Algorithms,43.50562242,"['Array', 'Prefix Sum']"
Medium,2257,Count Unguarded Cells in the Grid,Algorithms,65.79212671,"['Array', 'Matrix', 'Simulation']"
Hard,2258,Escape the Spreading Fire,Algorithms,36.10873026,"['Array', 'Binary Search', 'Breadth-First Search', 'Matrix']"
Easy,2259,Remove Digit From Number to Maximize Result,Algorithms,47.18754934,"['String', 'Greedy', 'Enumeration']"
Medium,2260,Minimum Consecutive Cards to Pick Up,Algorithms,52.61368309,"['Array', 'Hash Table', 'Sliding Window']"
Medium,2261,K Divisible Elements Subarrays,Algorithms,53.55670688,"['Array', 'Hash Table', 'Trie', 'Rolling Hash', 'Hash Function', 'Enumeration']"
Hard,2262,Total Appeal of A String,Algorithms,55.76710478,"['Hash Table', 'String', 'Dynamic Programming']"
Hard,2263,Make Array Non-decreasing or Non-increasing,Algorithms,65.38685282,"['Dynamic Programming', 'Greedy']"
Easy,2264,Largest 3-Same-Digit Number in String,Algorithms,69.06654592,['String']
Medium,2265,Count Nodes Equal to Average of Subtree,Algorithms,86.3654174,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,2266,Count Number of Texts,Algorithms,48.73059824,"['Hash Table', 'Math', 'String', 'Dynamic Programming']"
Hard,2267, Check if There Is a Valid Parentheses String Path,Algorithms,39.32755211,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,2268,Minimum Number of Keypresses,Algorithms,71.27906048,"['Hash Table', 'String', 'Greedy', 'Sorting', 'Counting']"
Easy,2269,Find the K-Beauty of a Number,Algorithms,61.53081021,"['Math', 'String', 'Sliding Window']"
Medium,2270,Number of Ways to Split Array,Algorithms,56.09312572,"['Array', 'Prefix Sum']"
Medium,2271,Maximum White Tiles Covered by a Carpet,Algorithms,34.85563179,"['Array', 'Binary Search', 'Greedy', 'Sliding Window', 'Sorting', 'Prefix Sum']"
Hard,2272,Substring With Largest Variance,Algorithms,45.90438845,"['Array', 'Dynamic Programming']"
Easy,2273,Find Resultant Array After Removing Anagrams,Algorithms,59.33703643,"['Array', 'Hash Table', 'String', 'Sorting']"
Medium,2274,Maximum Consecutive Floors Without Special Floors,Algorithms,51.98314015,"['Array', 'Sorting']"
Medium,2275,Largest Combination With Bitwise AND Greater Than Zero,Algorithms,80.90937973,"['Array', 'Hash Table', 'Bit Manipulation', 'Counting']"
Hard,2276,Count Integers in Intervals,Algorithms,34.00234929,"['Design', 'Segment Tree', 'Ordered Set']"
Hard,2277,Closest Node to Path in Tree,Algorithms,62.40806892,"['Array', 'Tree', 'Depth-First Search', 'Breadth-First Search']"
Easy,2278,Percentage of Letter in String,Algorithms,74.442274,['String']
Medium,2279,Maximum Bags With Full Capacity of Rocks,Algorithms,67.5620945,"['Array', 'Greedy', 'Sorting']"
Medium,2280,Minimum Lines to Represent a Line Chart,Algorithms,25.99816858,"['Array', 'Math', 'Geometry', 'Sorting', 'Number Theory']"
Hard,2281,Sum of Total Strength of Wizards,Algorithms,28.24788483,"['Array', 'Stack', 'Monotonic Stack', 'Prefix Sum']"
Medium,2282,Number of People That Can Be Seen in a Grid,Algorithms,47.06971006,"['Array', 'Stack', 'Matrix', 'Monotonic Stack']"
Easy,2283,Check if Number Has Equal Digit Count and Digit Value,Algorithms,72.36291127,"['Hash Table', 'String', 'Counting']"
Medium,2284,Sender With Largest Word Count,Algorithms,58.17115514,"['Array', 'Hash Table', 'String', 'Counting']"
Medium,2285,Maximum Total Importance of Roads,Algorithms,69.15723912,"['Greedy', 'Graph', 'Sorting', 'Heap (Priority Queue)']"
Hard,2286,Booking Concert Tickets in Groups,Algorithms,17.49437619,"['Binary Search', 'Design', 'Binary Indexed Tree', 'Segment Tree']"
Easy,2287,Rearrange Characters to Make Target String,Algorithms,60.0393773,"['Hash Table', 'String', 'Counting']"
Medium,2288,Apply Discount to Prices,Algorithms,32.60169336,['String']
Medium,2289,Steps to Make Array Non-decreasing,Algorithms,23.03750087,"['Array', 'Linked List', 'Stack', 'Monotonic Stack']"
Hard,2290,Minimum Obstacle Removal to Reach Corner,Algorithms,69.99860571,"['Array', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']"
Medium,2291,Maximum Profit From Trading Stocks,Algorithms,46.4772118,"['Array', 'Dynamic Programming']"
Medium,2292,Products With Three or More Orders in Two Consecutive Years,Database,40.03900191,['Database']
Easy,2293,Min Max Game,Algorithms,63.65956018,"['Array', 'Simulation']"
Medium,2294,Partition Array Such That Maximum Difference Is K,Algorithms,74.42749763,"['Array', 'Greedy', 'Sorting']"
Medium,2295,Replace Elements in an Array,Algorithms,58.70381791,"['Array', 'Hash Table', 'Simulation']"
Hard,2296,Design a Text Editor,Algorithms,46.93338421,"['Linked List', 'String', 'Stack', 'Design', 'Simulation', 'Doubly-Linked List']"
Medium,2297,Jump Game VIII,Algorithms,44.81678672,"['Array', 'Dynamic Programming', 'Stack', 'Graph', 'Monotonic Stack', 'Shortest Path']"
Medium,2298,Tasks Count in the Weekend,Database,82.30512714,['Database']
Easy,2299,Strong Password Checker II,Algorithms,54.88061606,['String']
Medium,2300,Successful Pairs of Spells and Potions,Algorithms,45.30513446,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Hard,2301,Match Substring After Replacement,Algorithms,41.98937761,"['Array', 'Hash Table', 'String', 'String Matching']"
Hard,2302,Count Subarrays With Score Less Than K,Algorithms,62.43315769,"['Array', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Easy,2303,Calculate Amount Paid in Taxes,Algorithms,67.28610644,"['Array', 'Simulation']"
Medium,2304,Minimum Path Cost in a Grid,Algorithms,67.15130513,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,2305,Fair Distribution of Cookies,Algorithms,69.30983188,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Hard,2306,Naming a Company,Algorithms,46.33145727,"['Array', 'Hash Table', 'String', 'Bit Manipulation', 'Enumeration']"
Hard,2307,Check for Contradictions in Equations,Algorithms,43.1003744,"['Array', 'Depth-First Search', 'Union Find', 'Graph']"
Medium,2308,Arrange Table by Gender,Database,70.2166065,['Database']
Easy,2309,Greatest English Letter in Upper and Lower Case,Algorithms,70.95954553,"['Hash Table', 'String', 'Enumeration']"
Medium,2310,Sum of Numbers With Units Digit K,Algorithms,27.26640002,"['Math', 'Dynamic Programming', 'Greedy', 'Enumeration']"
Medium,2311,Longest Binary Subsequence Less Than or Equal to K,Algorithms,38.18253159,"['String', 'Dynamic Programming', 'Greedy', 'Memoization']"
Hard,2312,Selling Pieces of Wood,Algorithms,51.52122006,"['Array', 'Dynamic Programming', 'Memoization']"
Hard,2313,Minimum Flips in Binary Tree to Get Result,Algorithms,56.59382065,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Binary Tree']"
Medium,2314,The First Day of the Maximum Recorded Degree in Each City,Database,73.171228,['Database']
Easy,2315,Count Asterisks,Algorithms,82.70681783,['String']
Medium,2316,Count Unreachable Pairs of Nodes in an Undirected Graph,Algorithms,49.27908039,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Medium,2317,Maximum XOR After Operations ,Algorithms,79.2247676,"['Array', 'Math', 'Bit Manipulation']"
Hard,2318,Number of Distinct Roll Sequences,Algorithms,57.14936663,"['Dynamic Programming', 'Memoization']"
Easy,2319,Check if Matrix Is X-Matrix,Algorithms,65.41037385,"['Array', 'Matrix']"
Medium,2320,Count Number of Ways to Place Houses,Algorithms,42.68866964,['Dynamic Programming']
Hard,2321,Maximum Score Of Spliced Array,Algorithms,57.42316282,"['Array', 'Dynamic Programming']"
Hard,2322,Minimum Score After Removals on a Tree,Algorithms,51.98748044,"['Array', 'Bit Manipulation', 'Tree', 'Depth-First Search']"
Medium,2323,Find Minimum Time to Finish All Jobs II,Algorithms,65.638742,"['Array', 'Greedy', 'Sorting']"
Medium,2324,Product Sales Analysis IV,Database,75.46339931,['Database']
Easy,2325,Decode the Message,Algorithms,85.39425307,"['Hash Table', 'String']"
Medium,2326,Spiral Matrix IV,Algorithms,82.18018602,"['Array', 'Linked List', 'Matrix', 'Simulation']"
Medium,2327,Number of People Aware of a Secret,Algorithms,46.30879143,"['Dynamic Programming', 'Queue', 'Simulation']"
Hard,2328,Number of Increasing Paths in a Grid,Algorithms,57.70172275,"['Array', 'Dynamic Programming', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort', 'Memoization', 'Matrix']"
Easy,2329,Product Sales Analysis V,Database,70.48955315,['Database']
Medium,2330,Valid Palindrome IV,Algorithms,75.73143438,"['Two Pointers', 'String']"
Easy,2331,Evaluate Boolean Binary Tree,Algorithms,82.42396857,"['Tree', 'Depth-First Search', 'Binary Tree']"
Medium,2332,The Latest Time to Catch a Bus,Algorithms,28.32698343,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,2333,Minimum Sum of Squared Difference,Algorithms,25.81587003,"['Array', 'Binary Search', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,2334,Subarray With Elements Greater Than Varying Threshold,Algorithms,44.41921104,"['Array', 'Stack', 'Union Find', 'Monotonic Stack']"
Easy,2335,Minimum Amount of Time to Fill Cups,Algorithms,58.793343,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Medium,2336,Smallest Number in Infinite Set,Algorithms,70.43863217,"['Hash Table', 'Design', 'Heap (Priority Queue)', 'Ordered Set']"
Medium,2337,Move Pieces to Obtain a String,Algorithms,56.84993789,"['Two Pointers', 'String']"
Hard,2338,Count the Number of Ideal Arrays,Algorithms,57.30271262,"['Math', 'Dynamic Programming', 'Combinatorics', 'Number Theory']"
Easy,2339,All the Matches of the League,Database,88.48181574,['Database']
Medium,2340,Minimum Adjacent Swaps to Make a Valid Array,Algorithms,72.21937186,"['Array', 'Greedy']"
Easy,2341,Maximum Number of Pairs in Array,Algorithms,75.46073124,"['Array', 'Hash Table', 'Counting']"
Medium,2342,Max Sum of a Pair With Equal Sum of Digits,Algorithms,65.99135116,"['Array', 'Hash Table', 'Sorting', 'Heap (Priority Queue)']"
Medium,2343,Query Kth Smallest Trimmed Number,Algorithms,45.38300512,"['Array', 'String', 'Divide and Conquer', 'Sorting', 'Heap (Priority Queue)', 'Radix Sort', 'Quickselect']"
Hard,2344,Minimum Deletions to Make Array Divisible,Algorithms,57.52849048,"['Array', 'Math', 'Sorting', 'Heap (Priority Queue)', 'Number Theory']"
Medium,2345,Finding the Number of Visible Mountains,Algorithms,36.76485272,"['Array', 'Stack', 'Sorting', 'Monotonic Stack']"
Medium,2346,Compute the Rank as a Percentage,Database,33.81229635,['Database']
Easy,2347,Best Poker Hand,Algorithms,61.13448573,"['Array', 'Hash Table', 'Counting']"
Medium,2348,Number of Zero-Filled Subarrays,Algorithms,66.67442651,"['Array', 'Math']"
Medium,2349,Design a Number Container System,Algorithms,57.25486913,"['Hash Table', 'Design', 'Heap (Priority Queue)', 'Ordered Set']"
Hard,2350,Shortest Impossible Sequence of Rolls,Algorithms,68.63378506,"['Array', 'Hash Table', 'Greedy']"
Easy,2351,First Letter to Appear Twice,Algorithms,74.13138387,"['Hash Table', 'String', 'Bit Manipulation', 'Counting']"
Medium,2352,Equal Row and Column Pairs,Algorithms,70.45742285,"['Array', 'Hash Table', 'Matrix', 'Simulation']"
Medium,2353,Design a Food Rating System,Algorithms,44.86309431,"['Array', 'Hash Table', 'String', 'Design', 'Heap (Priority Queue)', 'Ordered Set']"
Hard,2354,Number of Excellent Pairs,Algorithms,47.98107885,"['Array', 'Hash Table', 'Binary Search', 'Bit Manipulation']"
Hard,2355,Maximum Number of Books You Can Take,Algorithms,39.26875304,"['Array', 'Dynamic Programming', 'Stack', 'Monotonic Stack']"
Easy,2356,Number of Unique Subjects Taught by Each Teacher,Database,89.35331998,['Database']
Easy,2357,Make Array Zero by Subtracting Equal Amounts,Algorithms,73.23756254,"['Array', 'Hash Table', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Simulation']"
Medium,2358,Maximum Number of Groups Entering a Competition,Algorithms,68.09050159,"['Array', 'Math', 'Binary Search', 'Greedy']"
Medium,2359,Find Closest Node to Given Two Nodes,Algorithms,45.75360321,"['Depth-First Search', 'Graph']"
Hard,2360,Longest Cycle in a Graph,Algorithms,49.77693584,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Hard,2361,Minimum Costs Using the Train Line,Algorithms,77.54546508,"['Array', 'Dynamic Programming']"
Hard,2362,Generate the Invoice,Database,76.0970905,['Database']
Easy,2363,Merge Similar Items,Algorithms,76.69178664,"['Array', 'Hash Table', 'Sorting', 'Ordered Set']"
Medium,2364,Count Number of Bad Pairs,Algorithms,54.39991808,"['Array', 'Hash Table', 'Math', 'Counting']"
Medium,2365,Task Scheduler II,Algorithms,53.91313221,"['Array', 'Hash Table', 'Simulation']"
Hard,2366,Minimum Replacements to Sort the Array,Algorithms,53.26813933,"['Array', 'Math', 'Greedy']"
Easy,2367,Number of Arithmetic Triplets,Algorithms,84.91389517,"['Array', 'Hash Table', 'Two Pointers', 'Enumeration']"
Medium,2368,Reachable Nodes With Restrictions,Algorithms,59.41365322,"['Array', 'Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Medium,2369,Check if There is a Valid Partition For The Array,Algorithms,51.90539124,"['Array', 'Dynamic Programming']"
Medium,2370,Longest Ideal Subsequence,Algorithms,46.85566748,"['Hash Table', 'String', 'Dynamic Programming']"
Hard,2371,Minimize Maximum Value in a Grid,Algorithms,70.60030785,"['Array', 'Union Find', 'Graph', 'Topological Sort', 'Sorting', 'Matrix']"
Medium,2372,Calculate the Influence of Each Salesperson,Database,83.7492392,['Database']
Easy,2373,Largest Local Values in a Matrix,Algorithms,87.76234097,"['Array', 'Matrix']"
Medium,2374,Node With Highest Edge Score,Algorithms,48.37683783,"['Hash Table', 'Graph']"
Medium,2375,Construct Smallest Number From DI String,Algorithms,85.83075579,"['String', 'Backtracking', 'Stack', 'Greedy']"
Hard,2376,Count Special Integers,Algorithms,39.67648533,"['Math', 'Dynamic Programming']"
Easy,2377,Sort the Olympic Table,Database,79.5257732,['Database']
Medium,2378,Choose Edges to Maximize Score in a Tree,Algorithms,55.6261343,"['Dynamic Programming', 'Tree', 'Depth-First Search']"
Easy,2379,Minimum Recolors to Get K Consecutive Black Blocks,Algorithms,68.43621017,"['String', 'Sliding Window']"
Medium,2380,Time Needed to Rearrange a Binary String,Algorithms,51.5098172,"['String', 'Dynamic Programming', 'Simulation']"
Medium,2381,Shifting Letters II,Algorithms,53.27197416,"['Array', 'String', 'Prefix Sum']"
Hard,2382,Maximum Segment Sum After Removals,Algorithms,48.29828259,"['Array', 'Union Find', 'Prefix Sum', 'Ordered Set']"
Easy,2383,Minimum Hours of Training to Win a Competition,Algorithms,41.82256608,"['Array', 'Greedy']"
Medium,2384,Largest Palindromic Number,Algorithms,36.38081684,"['Hash Table', 'String', 'Greedy', 'Counting']"
Medium,2385,Amount of Time for Binary Tree to Be Infected,Algorithms,63.47072637,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,2386,Find the K-Sum of an Array,Algorithms,39.49550185,"['Array', 'Sorting', 'Heap (Priority Queue)']"
Medium,2387,Median of a Row Wise Sorted Matrix,Algorithms,69.53373878,"['Array', 'Binary Search', 'Matrix']"
Medium,2388,Change Null Values in a Table to the Previous Value,Database,51.44587023,['Database']
Easy,2389,Longest Subsequence With Limited Sum,Algorithms,72.70688199,"['Array', 'Binary Search', 'Greedy', 'Sorting', 'Prefix Sum']"
Medium,2390,Removing Stars From a String,Algorithms,77.81041552,"['String', 'Stack', 'Simulation']"
Medium,2391,Minimum Amount of Time to Collect Garbage,Algorithms,85.10207575,"['Array', 'String', 'Prefix Sum']"
Hard,2392,Build a Matrix With Conditions,Algorithms,79.23495051,"['Array', 'Graph', 'Topological Sort', 'Matrix']"
Medium,2393,Count Strictly Increasing Subarrays,Algorithms,71.2304038,"['Array', 'Math', 'Dynamic Programming']"
Medium,2394,Employees With Deductions,Database,42.01236884,['Database']
Easy,2395,Find Subarrays With Equal Sum,Algorithms,66.13603936,"['Array', 'Hash Table']"
Medium,2396,Strictly Palindromic Number,Algorithms,88.07819469,"['Math', 'Two Pointers', 'Brainteaser']"
Medium,2397,Maximum Rows Covered by Columns,Algorithms,56.36953824,"['Array', 'Backtracking', 'Bit Manipulation', 'Matrix', 'Enumeration']"
Hard,2398,Maximum Number of Robots Within Budget,Algorithms,36.51186872,"['Array', 'Binary Search', 'Queue', 'Sliding Window', 'Heap (Priority Queue)', 'Prefix Sum', 'Monotonic Queue']"
Easy,2399,Check Distances Between Same Letters,Algorithms,70.75179843,"['Array', 'Hash Table', 'String']"
Medium,2400,Number of Ways to Reach a Position After Exactly k Steps,Algorithms,36.05374218,"['Math', 'Dynamic Programming', 'Combinatorics']"
Medium,2401,Longest Nice Subarray,Algorithms,64.80159567,"['Array', 'Bit Manipulation', 'Sliding Window']"
Hard,2402,Meeting Rooms III,Algorithms,43.91353561,"['Array', 'Hash Table', 'Sorting', 'Heap (Priority Queue)', 'Simulation']"
Hard,2403,Minimum Time to Kill All Monsters,Algorithms,55.94025798,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Easy,2404,Most Frequent Even Element,Algorithms,51.73939843,"['Array', 'Hash Table', 'Counting']"
Medium,2405,Optimal Partition of String,Algorithms,78.20466338,"['Hash Table', 'String', 'Greedy']"
Medium,2406,Divide Intervals Into Minimum Number of Groups,Algorithms,63.66382901,"['Array', 'Two Pointers', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Prefix Sum']"
Hard,2407,Longest Increasing Subsequence II,Algorithms,25.47769897,"['Array', 'Divide and Conquer', 'Dynamic Programming', 'Binary Indexed Tree', 'Segment Tree', 'Queue', 'Monotonic Queue']"
Medium,2408,Design SQL,Algorithms,70.61561797,"['Array', 'Hash Table', 'String', 'Design']"
Easy,2409,Count Days Spent Together,Algorithms,46.36281727,"['Math', 'String']"
Medium,2410,Maximum Matching of Players With Trainers,Algorithms,66.93217319,"['Array', 'Two Pointers', 'Greedy', 'Sorting']"
Medium,2411,Smallest Subarrays With Maximum Bitwise OR,Algorithms,45.05883394,"['Array', 'Binary Search', 'Bit Manipulation', 'Sliding Window']"
Hard,2412,Minimum Money Required Before Transactions,Algorithms,41.14465366,"['Array', 'Greedy', 'Sorting']"
Easy,2413,Smallest Even Multiple,Algorithms,88.08680484,"['Math', 'Number Theory']"
Medium,2414,Length of the Longest Alphabetical Continuous Substring,Algorithms,59.21410831,['String']
Medium,2415,Reverse Odd Levels of Binary Tree,Algorithms,86.62303299,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,2416,Sum of Prefix Scores of Strings,Algorithms,60.70592783,"['Array', 'String', 'Trie', 'Counting']"
Medium,2417,Closest Fair Integer,Algorithms,45.04160888,"['Math', 'Enumeration']"
Easy,2418,Sort the People,Algorithms,84.81497193,"['Array', 'Hash Table', 'String', 'Sorting']"
Medium,2419,Longest Subarray With Maximum Bitwise AND,Algorithms,61.79546197,"['Array', 'Bit Manipulation', 'Brainteaser']"
Medium,2420,Find All Good Indices,Algorithms,39.70559206,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Hard,2421,Number of Good Paths,Algorithms,55.95532923,"['Array', 'Hash Table', 'Tree', 'Union Find', 'Graph', 'Sorting']"
Medium,2422,Merge Operations to Turn Array Into a Palindrome,Algorithms,68.95996318,"['Array', 'Two Pointers', 'Greedy']"
Easy,2423,Remove Letter To Equalize Frequency,Algorithms,18.13465156,"['Hash Table', 'String', 'Counting']"
Medium,2424,Longest Uploaded Prefix,Algorithms,53.64585571,"['Binary Search', 'Union Find', 'Design', 'Binary Indexed Tree', 'Segment Tree', 'Heap (Priority Queue)', 'Ordered Set']"
Medium,2425,Bitwise XOR of All Pairings,Algorithms,67.02420104,"['Array', 'Bit Manipulation', 'Brainteaser']"
Hard,2426,Number of Pairs Satisfying Inequality,Algorithms,45.23003776,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Easy,2427,Number of Common Factors,Algorithms,79.47636759,"['Math', 'Enumeration', 'Number Theory']"
Medium,2428,Maximum Sum of an Hourglass,Algorithms,75.83763934,"['Array', 'Matrix', 'Prefix Sum']"
Medium,2429,Minimize XOR,Algorithms,62.4549756,"['Greedy', 'Bit Manipulation']"
Hard,2430,Maximum Deletions on a String,Algorithms,34.45081606,"['String', 'Dynamic Programming', 'Rolling Hash', 'String Matching', 'Hash Function']"
Medium,2431,Maximize Total Tastiness of Purchased Fruits,Algorithms,64.25673183,"['Array', 'Dynamic Programming']"
Easy,2432,The Employee That Worked on the Longest Task,Algorithms,50.49245413,['Array']
Medium,2433,Find The Original Array of Prefix Xor,Algorithms,88.08583998,"['Array', 'Bit Manipulation']"
Medium,2434,Using a Robot to Print the Lexicographically Smallest String,Algorithms,41.57572629,"['Hash Table', 'String', 'Stack', 'Greedy']"
Hard,2435,Paths in Matrix Whose Sum Is Divisible by K,Algorithms,43.98238591,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,2436,Minimum Split Into Subarrays With GCD Greater Than One,Algorithms,69.82437467,"['Array', 'Math', 'Dynamic Programming', 'Greedy', 'Number Theory']"
Easy,2437,Number of Valid Clock Times,Algorithms,47.4035083,"['String', 'Enumeration']"
Medium,2438,Range Product Queries of Powers,Algorithms,41.78701579,"['Array', 'Bit Manipulation', 'Prefix Sum']"
Medium,2439,Minimize Maximum of Array,Algorithms,46.42551512,"['Array', 'Binary Search', 'Dynamic Programming', 'Greedy', 'Prefix Sum']"
Hard,2440,Create Components With Same Value,Algorithms,52.0049316,"['Array', 'Math', 'Tree', 'Depth-First Search', 'Enumeration']"
Easy,2441,Largest Positive Integer That Exists With Its Negative,Algorithms,74.67989591,"['Array', 'Hash Table', 'Two Pointers', 'Sorting']"
Medium,2442,Count Number of Distinct Integers After Reverse Operations,Algorithms,80.16411582,"['Array', 'Hash Table', 'Math', 'Counting']"
Medium,2443,Sum of Number and Its Reverse,Algorithms,48.13165492,"['Math', 'Enumeration']"
Hard,2444,Count Subarrays With Fixed Bounds,Algorithms,69.40665296,"['Array', 'Queue', 'Sliding Window', 'Monotonic Queue']"
Medium,2445,Number of Nodes With Value One,Algorithms,65.54376658,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,2446,Determine if Two Events Have Conflict,Algorithms,52.24986914,"['Array', 'String']"
Medium,2447,Number of Subarrays With GCD Equal to K,Algorithms,50.93600274,"['Array', 'Math', 'Number Theory']"
Hard,2448,Minimum Cost to Make Array Equal,Algorithms,46.23833059,"['Array', 'Binary Search', 'Greedy', 'Sorting', 'Prefix Sum']"
Hard,2449,Minimum Number of Operations to Make Arrays Similar,Algorithms,60.29703371,"['Array', 'Greedy', 'Sorting']"
Medium,2450,Number of Distinct Binary Strings After Applying Operations,Algorithms,63.57581967,"['Math', 'String']"
Easy,2451,Odd String Difference,Algorithms,60.9492677,"['Array', 'Hash Table', 'String']"
Medium,2452,Words Within Two Edits of Dictionary,Algorithms,61.23936245,"['Array', 'String', 'Trie']"
Medium,2453,Destroy Sequential Targets,Algorithms,40.50174983,"['Array', 'Hash Table', 'Counting']"
Hard,2454,Next Greater Element IV,Algorithms,40.00563698,"['Array', 'Binary Search', 'Stack', 'Sorting', 'Heap (Priority Queue)', 'Monotonic Stack']"
Easy,2455,Average Value of Even Numbers That Are Divisible by Three,Algorithms,61.5134374,"['Array', 'Math']"
Medium,2456,Most Popular Video Creator,Algorithms,44.39446367,"['Array', 'Hash Table', 'String', 'Sorting', 'Heap (Priority Queue)']"
Medium,2457,Minimum Addition to Make Integer Beautiful,Algorithms,37.91649804,"['Math', 'Greedy']"
Hard,2458,Height of Binary Tree After Subtree Removal Queries,Algorithms,54.89631929,"['Array', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,2459,Sort Array by Moving Items to Empty Space,Algorithms,44.63367039,"['Array', 'Greedy', 'Sorting']"
Easy,2460,Apply Operations to an Array,Algorithms,74.86290792,"['Array', 'Two Pointers', 'Simulation']"
Medium,2461,Maximum Sum of Distinct Subarrays With Length K,Algorithms,42.63763982,"['Array', 'Hash Table', 'Sliding Window']"
Medium,2462,Total Cost to Hire K Workers,Algorithms,43.05319911,"['Array', 'Two Pointers', 'Heap (Priority Queue)', 'Simulation']"
Hard,2463,Minimum Total Distance Traveled,Algorithms,59.02735514,"['Array', 'Dynamic Programming', 'Sorting']"
Medium,2464,Minimum Subarrays in a Valid Split,Algorithms,54.6615087,"['Array', 'Math', 'Dynamic Programming', 'Number Theory']"
Easy,2465,Number of Distinct Averages,Algorithms,58.35977247,"['Array', 'Hash Table', 'Two Pointers', 'Sorting']"
Medium,2466,Count Ways To Build Good Strings,Algorithms,59.23674729,['Dynamic Programming']
Medium,2467,Most Profitable Path in a Tree,Algorithms,67.7042129,"['Array', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Hard,2468,Split Message Based on Limit,Algorithms,42.87951899,"['String', 'Binary Search', 'Enumeration']"
Easy,2469,Convert the Temperature,Algorithms,90.06547778,['Math']
Medium,2470,Number of Subarrays With LCM Equal to K,Algorithms,39.69050143,"['Array', 'Math', 'Number Theory']"
Medium,2471,Minimum Number of Operations to Sort a Binary Tree by Level,Algorithms,74.26767817,"['Tree', 'Breadth-First Search', 'Binary Tree']"
Hard,2472,Maximum Number of Non-overlapping Palindrome Substrings,Algorithms,41.43577903,"['Two Pointers', 'String', 'Dynamic Programming', 'Greedy']"
Medium,2473,Minimum Cost to Buy Apples,Algorithms,67.19628935,"['Array', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Hard,2474,Customers With Strictly Increasing Purchases,Database,48.3948301,['Database']
Easy,2475,Number of Unequal Triplets in Array,Algorithms,72.49896566,"['Array', 'Hash Table', 'Sorting']"
Medium,2476,Closest Nodes Queries in a Binary Search Tree,Algorithms,42.42967457,"['Array', 'Binary Search', 'Tree', 'Depth-First Search', 'Binary Search Tree', 'Binary Tree']"
Medium,2477,Minimum Fuel Cost to Report to the Capital,Algorithms,64.33382778,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Hard,2478,Number of Beautiful Partitions,Algorithms,32.07966974,"['String', 'Dynamic Programming']"
Hard,2479,Maximum XOR of Two Non-Overlapping Subtrees,Algorithms,49.42528736,"['Tree', 'Depth-First Search', 'Graph', 'Trie']"
Easy,2480,Form a Chemical Bond,Database,78.88717553,['Database']
Easy,2481,Minimum Cuts to Divide a Circle,Algorithms,54.98668665,"['Math', 'Geometry']"
Medium,2482,Difference Between Ones and Zeros in Row and Column,Algorithms,84.27710918,"['Array', 'Matrix', 'Simulation']"
Medium,2483,Minimum Penalty for a Shop,Algorithms,67.55268435,"['String', 'Prefix Sum']"
Hard,2484,Count Palindromic Subsequences,Algorithms,39.25881681,"['String', 'Dynamic Programming']"
Easy,2485,Find the Pivot Integer,Algorithms,83.73651767,"['Math', 'Prefix Sum']"
Medium,2486,Append Characters to String to Make Subsequence,Algorithms,72.98418638,"['Two Pointers', 'String', 'Greedy']"
Medium,2487,Remove Nodes From Linked List,Algorithms,74.31073428,"['Linked List', 'Stack', 'Recursion', 'Monotonic Stack']"
Hard,2488,Count Subarrays With Median K,Algorithms,45.19075283,"['Array', 'Hash Table', 'Prefix Sum']"
Medium,2489,Number of Substrings With Fixed Ratio,Algorithms,55.6,"['Hash Table', 'Math', 'String', 'Prefix Sum']"
Easy,2490,Circular Sentence,Algorithms,70.44481325,['String']
Medium,2491,Divide Players Into Teams of Equal Skill,Algorithms,68.94860966,"['Array', 'Hash Table', 'Two Pointers', 'Sorting']"
Medium,2492,Minimum Score of a Path Between Two Cities,Algorithms,57.71800072,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Hard,2493,Divide Nodes Into the Maximum Number of Groups,Algorithms,67.44155438,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Hard,2494,Merge Overlapping Events in the Same Hall,Database,34.8814774,['Database']
Medium,2495,Number of Subarrays Having Even Product,Algorithms,61.21308859,"['Array', 'Math', 'Dynamic Programming']"
Easy,2496,Maximum Value of a String in an Array,Algorithms,73.34406112,"['Array', 'String']"
Medium,2497,Maximum Star Sum of a Graph,Algorithms,40.75260711,"['Array', 'Greedy', 'Graph', 'Sorting', 'Heap (Priority Queue)']"
Medium,2498,Frog Jump II,Algorithms,62.08452199,"['Array', 'Binary Search', 'Greedy']"
Hard,2499,Minimum Total Cost to Make Arrays Unequal,Algorithms,40.38029645,"['Array', 'Hash Table', 'Greedy', 'Counting']"
Easy,2500,Delete Greatest Value in Each Row,Algorithms,78.90305968,"['Array', 'Sorting', 'Heap (Priority Queue)', 'Matrix', 'Simulation']"
Medium,2501,Longest Square Streak in an Array,Algorithms,53.07696877,"['Array', 'Hash Table', 'Binary Search', 'Dynamic Programming', 'Sorting']"
Medium,2502,Design Memory Allocator,Algorithms,48.29730813,"['Array', 'Hash Table', 'Design', 'Simulation']"
Hard,2503,Maximum Number of Points From Grid Queries,Algorithms,59.55605525,"['Array', 'Two Pointers', 'Breadth-First Search', 'Union Find', 'Sorting', 'Heap (Priority Queue)', 'Matrix']"
Easy,2504,Concatenate the Name and the Profession,Database,78.93318966,['Database']
Medium,2505,Bitwise OR of All Subsequence Sums,Algorithms,64.9273551,"['Array', 'Math', 'Bit Manipulation', 'Brainteaser']"
Easy,2506,Count Pairs Of Similar Strings,Algorithms,72.35903283,"['Array', 'Hash Table', 'String', 'Bit Manipulation', 'Counting']"
Medium,2507,Smallest Value After Replacing With Sum of Prime Factors,Algorithms,48.9527538,"['Math', 'Simulation', 'Number Theory']"
Hard,2508,Add Edges to Make Degrees of All Nodes Even,Algorithms,33.38560483,"['Hash Table', 'Graph']"
Hard,2509,Cycle Length Queries in a Tree,Algorithms,58.03691703,"['Array', 'Tree', 'Binary Tree']"
Medium,2510,Check if There is a Path With Equal Number of 0's And 1's,Algorithms,51.22263186,"['Array', 'Dynamic Programming', 'Matrix']"
Easy,2511,Maximum Enemy Forts That Can Be Captured,Algorithms,39.93204094,"['Array', 'Two Pointers']"
Medium,2512,Reward Top K Students,Algorithms,45.8457027,"['Array', 'Hash Table', 'String', 'Sorting', 'Heap (Priority Queue)']"
Medium,2513,Minimize the Maximum of Two Arrays,Algorithms,31.19644821,"['Math', 'Binary Search', 'Number Theory']"
Hard,2514,Count Anagrams,Algorithms,35.05565107,"['Hash Table', 'Math', 'String', 'Combinatorics', 'Counting']"
Easy,2515,Shortest Distance to Target String in a Circular Array,Algorithms,50.1443857,"['Array', 'String']"
Medium,2516,Take K of Each Character From Left and Right,Algorithms,51.61508138,"['Hash Table', 'String', 'Sliding Window']"
Medium,2517,Maximum Tastiness of Candy Basket,Algorithms,65.84953317,"['Array', 'Binary Search', 'Greedy', 'Sorting']"
Hard,2518,Number of Great Partitions,Algorithms,32.25621634,"['Array', 'Dynamic Programming']"
Hard,2519,Count the Number of K-Big Indices,Algorithms,53.05887764,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Easy,2520,Count the Digits That Divide a Number,Algorithms,85.71544685,['Math']
Medium,2521,Distinct Prime Factors of Product of Array,Algorithms,52.8109357,"['Array', 'Hash Table', 'Math', 'Number Theory']"
Medium,2522,Partition String Into Substrings With Values at Most K,Algorithms,46.53410183,"['String', 'Dynamic Programming', 'Greedy']"
Medium,2523,Closest Prime Numbers in Range,Algorithms,51.53425516,"['Math', 'Number Theory']"
Hard,2524,Maximum Frequency Score of a Subarray,Algorithms,35.05674653,"['Array', 'Hash Table', 'Math', 'Stack', 'Sliding Window']"
Easy,2525,Categorize Box According to Criteria,Algorithms,37.51719731,['Math']
Medium,2526,Find Consecutive Integers from a Data Stream,Algorithms,49.22298405,"['Hash Table', 'Design', 'Queue', 'Counting', 'Data Stream']"
Medium,2527,Find Xor-Beauty of Array,Algorithms,69.21978489,"['Array', 'Math', 'Bit Manipulation']"
Hard,2528,Maximize the Minimum Powered City,Algorithms,32.99822818,"['Array', 'Binary Search', 'Greedy', 'Queue', 'Sliding Window', 'Prefix Sum']"
Easy,2529,Maximum Count of Positive Integer and Negative Integer,Algorithms,74.48998632,"['Array', 'Binary Search', 'Counting']"
Medium,2530,Maximal Score After Applying K Operations,Algorithms,63.76717582,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Medium,2531,Make Number of Distinct Characters Equal,Algorithms,26.90983324,"['Hash Table', 'String', 'Counting']"
Hard,2532,Time to Cross a Bridge,Algorithms,43.50889252,"['Array', 'Heap (Priority Queue)', 'Simulation']"
Medium,2533,Number of Good Binary Strings,Algorithms,52.50618116,['Dynamic Programming']
Hard,2534,Time Taken to Cross the Door,Algorithms,49.2113314,"['Array', 'Queue', 'Simulation']"
Easy,2535,Difference Between Element Sum and Digit Sum of an Array,Algorithms,84.80220975,"['Array', 'Math']"
Medium,2536,Increment Submatrices by One,Algorithms,51.54124035,"['Array', 'Matrix', 'Prefix Sum']"
Medium,2537,Count the Number of Good Subarrays,Algorithms,66.04844322,"['Array', 'Hash Table', 'Sliding Window']"
Hard,2538,Difference Between Maximum and Minimum Price Sum,Algorithms,31.66672482,"['Array', 'Dynamic Programming', 'Tree', 'Depth-First Search']"
Medium,2539,Count the Number of Good Subsequences,Algorithms,50.77767612,"['Hash Table', 'Math', 'String', 'Combinatorics', 'Counting']"
Easy,2540,Minimum Common Value,Algorithms,58.20772906,"['Array', 'Hash Table', 'Two Pointers', 'Binary Search']"
Medium,2541,Minimum Operations to Make Array Equal II,Algorithms,32.34669886,"['Array', 'Math', 'Greedy']"
Medium,2542,Maximum Subsequence Score,Algorithms,54.24468528,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,2543,Check if Point Is Reachable,Algorithms,43.21841214,"['Math', 'Number Theory']"
Easy,2544,Alternating Digit Sum,Algorithms,68.39362991,['Math']
Medium,2545,Sort the Students by Their Kth Score,Algorithms,85.60795156,"['Array', 'Sorting', 'Matrix']"
Medium,2546,Apply Bitwise Operations to Make Strings Equal,Algorithms,41.59543021,"['String', 'Bit Manipulation']"
Hard,2547,Minimum Cost to Split an Array,Algorithms,42.02626642,"['Array', 'Hash Table', 'Dynamic Programming', 'Counting']"
Medium,2548,Maximum Price to Fill a Bag,Algorithms,63.49028401,"['Array', 'Greedy', 'Sorting']"
Easy,2549,Count Distinct Numbers on Board,,,
Medium,2550,Count Collisions of Monkeys on a Polygon,Algorithms,28.74661222,"['Math', 'Recursion']"
Hard,2551,Put Marbles in Bags,Algorithms,72.48843571,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,2552,Count Increasing Quadruplets,Algorithms,34.03314575,"['Array', 'Dynamic Programming', 'Binary Indexed Tree', 'Enumeration', 'Prefix Sum']"
Easy,2553,Separate the Digits in an Array,Algorithms,80.15414432,"['Array', 'Simulation']"
Medium,2554,Maximum Number of Integers to Choose From a Range I,Algorithms,67.89045728,"['Array', 'Hash Table', 'Binary Search', 'Greedy', 'Sorting']"
Medium,2555,Maximize Win From Two Segments,Algorithms,35.19702684,"['Array', 'Binary Search', 'Sliding Window']"
Medium,2556,Disconnect Path in a Binary Matrix by at Most One Flip,Algorithms,27.2300161,"['Array', 'Dynamic Programming', 'Depth-First Search', 'Breadth-First Search', 'Matrix']"
Medium,2557,Maximum Number of Integers to Choose From a Range II,Algorithms,35.11797985,"['Array', 'Binary Search', 'Greedy', 'Sorting']"
Easy,2558,Take Gifts From the Richest Pile,Algorithms,75.64594834,"['Array', 'Heap (Priority Queue)', 'Simulation']"
Medium,2559,Count Vowel Strings in Ranges,Algorithms,67.8962373,"['Array', 'String', 'Prefix Sum']"
Medium,2560,House Robber IV,Algorithms,65.19115205,"['Array', 'Binary Search']"
Hard,2561,Rearranging Fruits,Algorithms,35.09106373,"['Array', 'Hash Table', 'Greedy']"
Easy,2562,Find the Array Concatenation Value,Algorithms,70.8843586,"['Array', 'Two Pointers', 'Simulation']"
Medium,2563,Count the Number of Fair Pairs,Algorithms,52.91616268,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,2564,Substring XOR Queries,Algorithms,34.43949535,"['Array', 'Hash Table', 'String', 'Bit Manipulation']"
Hard,2565,Subsequence With the Minimum Score,Algorithms,32.54425097,"['Two Pointers', 'String', 'Binary Search']"
Easy,2566,Maximum Difference by Remapping a Digit,Algorithms,60.50286242,"['Math', 'Greedy']"
Medium,2567,Minimum Score by Changing Two Elements,Algorithms,48.83433153,"['Array', 'Greedy', 'Sorting']"
Medium,2568,Minimum Impossible OR,Algorithms,57.62596899,"['Array', 'Bit Manipulation', 'Brainteaser']"
Hard,2569,Handling Sum Queries After Update,Algorithms,29.24284274,"['Array', 'Segment Tree']"
Easy,2570,Merge Two 2D Arrays by Summing Values,Algorithms,82.05749958,"['Array', 'Hash Table', 'Two Pointers']"
Medium,2571,Minimum Operations to Reduce an Integer to 0,Algorithms,57.00214064,"['Dynamic Programming', 'Greedy', 'Bit Manipulation']"
Medium,2572,Count the Number of Square-Free Subsets,Algorithms,24.99478232,"['Array', 'Math', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Hard,2573,Find the String with LCP,Algorithms,31.49277042,"['Array', 'String', 'Dynamic Programming', 'Greedy', 'Union Find', 'Matrix']"
Easy,2574,Left and Right Sum Differences,Algorithms,87.41509146,"['Array', 'Prefix Sum']"
Medium,2575,Find the Divisibility Array of a String,Algorithms,34.56643527,"['Array', 'Math', 'String']"
Medium,2576,Find the Maximum Number of Marked Indices,Algorithms,39.91354222,"['Array', 'Two Pointers', 'Binary Search', 'Greedy', 'Sorting']"
Hard,2577,Minimum Time to Visit a Cell In a Grid,Algorithms,56.87351097,"['Array', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']"
Easy,2578,Split With Minimum Sum,Algorithms,72.04767945,"['Math', 'Greedy', 'Sorting']"
Medium,2579,Count Total Number of Colored Cells,Algorithms,66.21643085,['Math']
Medium,2580,Count Ways to Group Overlapping Ranges,Algorithms,37.97280547,"['Array', 'Sorting']"
Hard,2581,Count Number of Possible Root Nodes,Algorithms,46.25444465,"['Array', 'Hash Table', 'Dynamic Programming', 'Tree', 'Depth-First Search']"
Easy,2582,Pass the Pillow,Algorithms,56.54234437,"['Math', 'Simulation']"
Medium,2583,Kth Largest Sum in a Binary Tree,Algorithms,59.26926388,"['Tree', 'Breadth-First Search', 'Sorting', 'Binary Tree']"
Hard,2584,Split the Array to Make Coprime Products,Algorithms,27.98036802,"['Array', 'Hash Table', 'Math', 'Number Theory']"
Hard,2585,Number of Ways to Earn Points,Algorithms,58.4541755,"['Array', 'Dynamic Programming']"
Easy,2586,Count the Number of Vowel Strings in Range,Algorithms,73.44070559,"['Array', 'String', 'Counting']"
Medium,2587,Rearrange Array to Maximize Prefix Score,Algorithms,41.353529,"['Array', 'Greedy', 'Sorting', 'Prefix Sum']"
Medium,2588,Count the Number of Beautiful Subarrays,Algorithms,51.65359943,"['Array', 'Hash Table', 'Bit Manipulation', 'Prefix Sum']"
Hard,2589,Minimum Time to Complete All Tasks,Algorithms,37.41790262,"['Array', 'Binary Search', 'Stack', 'Greedy', 'Sorting']"
Medium,2590,Design a Todo List,Algorithms,58.81278539,"['Array', 'Hash Table', 'String', 'Design', 'Sorting']"
Easy,2591,Distribute Money to Maximum Children,Algorithms,19.40593665,"['Math', 'Greedy']"
Medium,2592,Maximize Greatness of an Array,Algorithms,58.23038519,"['Array', 'Two Pointers', 'Greedy', 'Sorting']"
Medium,2593,Find Score of an Array After Marking All Elements,Algorithms,64.50292891,"['Array', 'Hash Table', 'Sorting', 'Heap (Priority Queue)', 'Simulation']"
Medium,2594,Minimum Time to Repair Cars,Algorithms,59.95639993,"['Array', 'Binary Search']"
Easy,2595,Number of Even and Odd Bits,Algorithms,72.54693898,['Bit Manipulation']
Medium,2596,Check Knight Tour Configuration,Algorithms,57.46130867,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Matrix', 'Simulation']"
Medium,2597,The Number of Beautiful Subsets,Algorithms,50.74388164,"['Array', 'Hash Table', 'Math', 'Dynamic Programming', 'Backtracking', 'Sorting', 'Combinatorics']"
Medium,2598,Smallest Missing Non-negative Integer After Operations,Algorithms,39.75100788,"['Array', 'Hash Table', 'Math', 'Greedy']"
Medium,2599,Make the Prefix Sum Non-negative,Algorithms,51.65100496,"['Array', 'Greedy', 'Heap (Priority Queue)']"
Easy,2600,K Items With the Maximum Sum,Algorithms,60.28761571,"['Math', 'Greedy']"
Medium,2601,Prime Subtraction Operation,Algorithms,55.57862159,"['Array', 'Math', 'Binary Search', 'Greedy', 'Number Theory']"
Medium,2602,Minimum Operations to Make All Array Elements Equal,Algorithms,36.76167302,"['Array', 'Binary Search', 'Sorting', 'Prefix Sum']"
Hard,2603,Collect Coins in a Tree,Algorithms,35.7170423,"['Array', 'Tree', 'Graph', 'Topological Sort']"
Hard,2604,Minimum Time to Eat All Grains,Algorithms,39.29612195,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Easy,2605,Form Smallest Number From Two Digit Arrays,Algorithms,54.22958706,"['Array', 'Hash Table', 'Enumeration']"
Medium,2606,Find the Substring With Maximum Cost,Algorithms,56.69963581,"['Array', 'Hash Table', 'String', 'Dynamic Programming']"
Medium,2607,Make K-Subarray Sums Equal,Algorithms,36.3736624,"['Array', 'Math', 'Greedy', 'Sorting', 'Number Theory']"
Hard,2608,Shortest Cycle in a Graph,Algorithms,37.21496184,"['Breadth-First Search', 'Graph']"
Easy,2609,Find the Longest Balanced Substring of a Binary String,Algorithms,45.33050412,['String']
Medium,2610,Convert an Array Into a 2D Array With Conditions,Algorithms,86.29657789,"['Array', 'Hash Table']"
Medium,2611,Mice and Cheese,Algorithms,47.09354007,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,2612,Minimum Reverse Operations,Algorithms,15.13086573,"['Array', 'Breadth-First Search', 'Ordered Set']"
Hard,2613,Beautiful Pairs,Algorithms,42.72409779,"['Array', 'Math', 'Divide and Conquer', 'Geometry', 'Sorting', 'Ordered Set']"
Easy,2614,Prime In Diagonal,Algorithms,36.07726616,"['Array', 'Math', 'Matrix', 'Number Theory']"
Medium,2615,Sum of Distances,Algorithms,31.12683893,"['Array', 'Hash Table', 'Prefix Sum']"
Medium,2616,Minimize the Maximum Difference of Pairs,Algorithms,43.72767037,"['Array', 'Binary Search', 'Greedy']"
Hard,2617,Minimum Number of Visited Cells in a Grid,Algorithms,22.70788913,"['Array', 'Dynamic Programming', 'Stack', 'Breadth-First Search', 'Union Find', 'Heap (Priority Queue)', 'Matrix', 'Monotonic Stack']"
Medium,2618,Check if Object Instance of Class,JavaScript,28.11137488,[]
Easy,2619,Array Prototype Last,JavaScript,74.55320918,[]
Easy,2620,Counter,JavaScript,82.23191621,[]
Easy,2621,Sleep,JavaScript,87.77864607,[]
Medium,2622,Cache With Time Limit,JavaScript,75.72132057,[]
Medium,2623,Memoize,JavaScript,63.36806449,[]
Medium,2624,Snail Traversal,JavaScript,67.09989208,[]
Medium,2625,Flatten Deeply Nested Array,JavaScript,64.32216372,[]
Easy,2626,Array Reduce Transformation,JavaScript,85.4540816,[]
Medium,2627,Debounce,JavaScript,91.82120297,[]
Medium,2628,JSON Deep Equal,JavaScript,39.13116217,[]
Easy,2629,Function Composition,JavaScript,87.03077318,[]
Hard,2630,Memoize II,JavaScript,32.6072341,[]
Medium,2631,Group By,JavaScript,81.04604496,[]
Medium,2632,Curry,JavaScript,89.4130554,[]
Medium,2633,Convert Object to JSON String,JavaScript,77.88828013,[]
Easy,2634,Filter Elements from Array,JavaScript,85.48854049,[]
Easy,2635,Apply Transform Over Each Element in Array,JavaScript,86.15831309,[]
Medium,2636,Promise Pool,JavaScript,79.8242611,[]
Medium,2637,Promise Time Limit,JavaScript,82.79979145,[]
Medium,2638,Count the Number of K-Free Subsets,Algorithms,46.67171669,"['Array', 'Math', 'Dynamic Programming', 'Sorting', 'Combinatorics']"
Easy,2639,Find the Width of Columns of a Grid,Algorithms,69.21214341,"['Array', 'Matrix']"
Medium,2640,Find the Score of All Prefixes of an Array,Algorithms,71.91559352,"['Array', 'Prefix Sum']"
Medium,2641,Cousins in Binary Tree II,Algorithms,75.39451971,"['Hash Table', 'Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Hard,2642,Design Graph With Shortest Path Calculator,Algorithms,64.03910407,"['Graph', 'Design', 'Heap (Priority Queue)', 'Shortest Path']"
Easy,2643,Row With Maximum Ones,Algorithms,74.72438828,"['Array', 'Matrix']"
Easy,2644,Find the Maximum Divisibility Score,Algorithms,50.33008963,['Array']
Medium,2645,Minimum Additions to Make Valid String,Algorithms,50.14671837,"['String', 'Dynamic Programming', 'Stack', 'Greedy']"
Hard,2646,Minimize the Total Price of the Trips,Algorithms,45.81111506,"['Array', 'Dynamic Programming', 'Tree', 'Depth-First Search', 'Graph']"
Hard,2647,Color the Triangle Red,Algorithms,59.08419498,"['Array', 'Math']"
Easy,2648,Generate Fibonacci Sequence,JavaScript,83.68578072,[]
Medium,2649,Nested Array Generator,JavaScript,79.78783959,[]
Hard,2650,Design Cancellable Function,JavaScript,52.00796548,[]
Easy,2651,Calculate Delayed Arrival Time,Algorithms,76.53122976,['Math']
Easy,2652,Sum Multiples,Algorithms,85.12608457,['Math']
Medium,2653,Sliding Subarray Beauty,Algorithms,33.79651588,"['Array', 'Hash Table', 'Sliding Window']"
Medium,2654,Minimum Number of Operations to Make All Array Elements Equal to 1,,,
Medium,2655,Find Maximal Uncovered Ranges,Algorithms,48.74017881,"['Array', 'Sorting']"
Easy,2656,Maximum Sum With Exactly K Elements ,Algorithms,79.66014963,"['Array', 'Greedy']"
Medium,2657,Find the Prefix Common Array of Two Arrays,Algorithms,87.06147926,"['Array', 'Hash Table', 'Bit Manipulation']"
Medium,2658,Maximum Number of Fish in a Grid,Algorithms,70.30741582,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Hard,2659,Make Array Empty,Algorithms,25.40415704,"['Array', 'Binary Search', 'Greedy', 'Binary Indexed Tree', 'Segment Tree', 'Sorting', 'Ordered Set']"
Easy,2660,Determine the Winner of a Bowling Game,Algorithms,35.54953354,"['Array', 'Simulation']"
Medium,2661,First Completely Painted Row or Column,Algorithms,63.95987421,"['Array', 'Hash Table', 'Matrix']"
Medium,2662,Minimum Cost of a Path With Special Roads,Algorithms,40.09453704,"['Array', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Hard,2663,Lexicographically Smallest Beautiful String,Algorithms,36.74716981,"['String', 'Greedy']"
Medium,2664,The Knight’s Tour,Algorithms,72.79177013,"['Array', 'Backtracking', 'Matrix']"
Easy,2665,Counter II,JavaScript,81.11397163,[]
Easy,2666,Allow One Function Call,JavaScript,86.72507142,[]
Easy,2667,Create Hello World Function,JavaScript,82.14081659,[]
Easy,2668,Find Latest Salaries,Database,74.75110619,['Database']
Easy,2669,Count Artist Occurrences On Spotify Ranking List,Database,74.32185309,['Database']
Easy,2670,Find the Distinct Difference Array,Algorithms,75.95250783,"['Array', 'Hash Table']"
Medium,2671,Frequency Tracker,Algorithms,29.77759569,"['Hash Table', 'Design']"
Medium,2672,Number of Adjacent Elements With the Same Color,Algorithms,55.23415588,['Array']
Medium,2673,Make Costs of Paths Equal in a Binary Tree,Algorithms,56.52125897,"['Array', 'Dynamic Programming', 'Greedy', 'Tree', 'Binary Tree']"
Medium,2674,Split a Circular Linked List,Algorithms,76.75276753,"['Linked List', 'Two Pointers']"
Hard,2675,Array of Objects to Matrix,JavaScript,68.65029981,[]
Medium,2676,Throttle,JavaScript,83.08320893,[]
Easy,2677,Chunk Array,JavaScript,84.5591884,[]
Easy,2678,Number of Senior Citizens,Algorithms,81.31857203,"['Array', 'String']"
Medium,2679,Sum in a Matrix,Algorithms,58.96907216,"['Array', 'Sorting', 'Heap (Priority Queue)', 'Matrix', 'Simulation']"
Medium,2680,Maximum OR,Algorithms,41.10409214,"['Array', 'Greedy', 'Bit Manipulation', 'Prefix Sum']"
Hard,2681,Power of Heroes,Algorithms,29.57219541,"['Array', 'Math', 'Dynamic Programming', 'Sorting', 'Prefix Sum']"
Easy,2682,Find the Losers of the Circular Game,Algorithms,48.79760148,"['Array', 'Hash Table', 'Simulation']"
Medium,2683,Neighboring Bitwise XOR,Algorithms,79.76509626,"['Array', 'Bit Manipulation']"
Medium,2684,Maximum Number of Moves in a Grid,Algorithms,58.85527032,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,2685,Count the Number of Complete Components,Algorithms,77.67408552,"['Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Medium,2686,Immediate Food Delivery III,Database,69.23422748,['Database']
Easy,2687,Bikes Last Time Used ,Database,81.29530413,['Database']
Medium,2688,Find Active Users,Database,44.21464505,['Database']
Easy,2689,Extract Kth Character From The Rope Tree,Algorithms,74.08588037,"['Tree', 'Depth-First Search', 'Binary Tree']"
Easy,2690,Infinite Method Object,JavaScript,93.09791332,[]
Hard,2691,Immutability Helper,JavaScript,40.75,[]
Medium,2692,Make Object Immutable,JavaScript,63.56916579,[]
Medium,2693,Call Function with Custom Context,JavaScript,78.68988391,[]
Medium,2694,Event Emitter,JavaScript,74.50956842,[]
Easy,2695,Array Wrapper,JavaScript,89.19764926,[]
Easy,2696,Minimum String Length After Removing Substrings,Algorithms,77.06746509,"['String', 'Stack', 'Simulation']"
Easy,2697,Lexicographically Smallest Palindrome,Algorithms,79.08615514,"['Two Pointers', 'String', 'Greedy']"
Medium,2698,Find the Punishment Number of an Integer,Algorithms,81.8163177,"['Math', 'Backtracking']"
Hard,2699,Modify Graph Edge Weights,Algorithms,56.1029149,"['Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Medium,2700,Differences Between Two Objects,JavaScript,75.20888627,[]
Hard,2701,Consecutive Transactions with Increasing Amounts,Database,34.27333596,['Database']
Hard,2702,Minimum Operations to Make Numbers Non-positive,Algorithms,42.06314308,"['Array', 'Binary Search']"
Easy,2703,Return Length of Arguments Passed,JavaScript,94.49390724,[]
Easy,2704,To Be Or Not To Be,JavaScript,62.92927576,[]
Medium,2705,Compact Object,JavaScript,66.79628156,[]
Easy,2706,Buy Two Chocolates,Algorithms,68.26243865,"['Array', 'Greedy', 'Sorting']"
Medium,2707,Extra Characters in a String,Algorithms,57.02756353,"['Array', 'Hash Table', 'String', 'Dynamic Programming', 'Trie']"
Medium,2708,Maximum Strength of a Group,Algorithms,24.65070452,"['Array', 'Dynamic Programming', 'Backtracking', 'Greedy', 'Bit Manipulation', 'Sorting', 'Enumeration']"
Hard,2709,Greatest Common Divisor Traversal,Algorithms,41.76969794,"['Array', 'Math', 'Union Find', 'Number Theory']"
Easy,2710,Remove Trailing Zeros From a String,Algorithms,78.54116458,['String']
Medium,2711,Difference of Number of Distinct Values on Diagonals,Algorithms,67.6877125,"['Array', 'Hash Table', 'Matrix']"
Medium,2712,Minimum Cost to Make All Characters Equal,Algorithms,53.22729605,"['String', 'Dynamic Programming', 'Greedy']"
Hard,2713,Maximum Strictly Increasing Cells in a Matrix,Algorithms,30.57133648,"['Array', 'Hash Table', 'Binary Search', 'Dynamic Programming', 'Memoization', 'Sorting', 'Matrix', 'Ordered Set']"
Hard,2714,Find Shortest Path with K Hops,Algorithms,62.830033,"['Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Easy,2715,Timeout Cancellation,JavaScript,89.64580095,[]
Easy,2716,Minimize String Length,Algorithms,77.03081232,"['Hash Table', 'String']"
Easy,2717,Semi-Ordered Permutation,Algorithms,63.1924815,"['Array', 'Simulation']"
Medium,2718,Sum of Matrix After Queries,Algorithms,31.13631413,"['Array', 'Hash Table']"
Hard,2719,Count of Integers,Algorithms,36.93709913,"['Math', 'String', 'Dynamic Programming']"
Hard,2720,Popularity Percentage,Database,54.6961326,['Database']
Medium,2721,Execute Asynchronous Functions in Parallel,JavaScript,77.51826675,[]
Medium,2722,Join Two Arrays by ID,JavaScript,56.04908118,[]
Easy,2723,Add Two Promises,JavaScript,91.83420418,[]
Easy,2724,Sort By,JavaScript,83.15442437,[]
Easy,2725,Interval Cancellation,JavaScript,83.873922,[]
Easy,2726,Calculator with Method Chaining,JavaScript,77.40351252,[]
Easy,2727,Is Object Empty,JavaScript,81.39965503,[]
Easy,2728,Count Houses in a Circular Street,Algorithms,85.17027864,"['Array', 'Interactive']"
Easy,2729,Check if The Number is Fascinating,Algorithms,52.23699292,"['Hash Table', 'Math']"
Medium,2730,Find the Longest Semi-Repetitive Substring,Algorithms,36.9445093,"['String', 'Sliding Window']"
Medium,2731,Movement of Robots,Algorithms,27.05485896,"['Array', 'Brainteaser', 'Sorting', 'Prefix Sum']"
Hard,2732,Find a Good Subset of the Matrix,Algorithms,45.917693,"['Array', 'Hash Table', 'Bit Manipulation', 'Matrix']"
Easy,2733,Neither Minimum nor Maximum,Algorithms,75.89526198,"['Array', 'Sorting']"
Medium,2734,Lexicographically Smallest String After Substring Operation,Algorithms,32.14506491,"['String', 'Greedy']"
Medium,2735,Collecting Chocolates,Algorithms,33.54119611,"['Array', 'Enumeration']"
Hard,2736,Maximum Sum Queries,Algorithms,27.93838958,"['Array', 'Binary Search', 'Stack', 'Binary Indexed Tree', 'Segment Tree', 'Sorting', 'Monotonic Stack']"
Medium,2737,Find the Closest Marked Node,Algorithms,64.84149856,"['Array', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Medium,2738,Count Occurrences in Text,Database,55.31914894,['Database']
Easy,2739,Total Distance Traveled,Algorithms,40.08547594,"['Math', 'Simulation']"
Medium,2740,Find the Value of the Partition,Algorithms,64.24906677,"['Array', 'Sorting']"
Medium,2741,Special Permutations,Algorithms,28.4232512,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Hard,2742,Painting the Walls,Algorithms,48.37634961,"['Array', 'Dynamic Programming']"
Medium,2743,Count Substrings Without Repeating Character,Algorithms,76.126549,"['Hash Table', 'String', 'Sliding Window']"
Easy,2744,Find Maximum Number of String Pairs,Algorithms,81.45250137,"['Array', 'Hash Table', 'String', 'Simulation']"
Medium,2745,Construct the Longest New String,Algorithms,53.70134594,"['Math', 'Dynamic Programming', 'Greedy', 'Brainteaser']"
Medium,2746,Decremental String Concatenation,Algorithms,26.08965201,"['Array', 'String', 'Dynamic Programming']"
Medium,2747,Count Zero Request Servers,Algorithms,33.06052602,"['Array', 'Hash Table', 'Sliding Window', 'Sorting']"
Easy,2748,Number of Beautiful Pairs,Algorithms,50.73129294,"['Array', 'Hash Table', 'Math', 'Counting', 'Number Theory']"
Medium,2749,Minimum Operations to Make the Integer Zero,Algorithms,30.07857575,"['Bit Manipulation', 'Brainteaser', 'Enumeration']"
Medium,2750,Ways to Split Array Into Good Subarrays,Algorithms,33.73000096,"['Array', 'Math', 'Dynamic Programming']"
Hard,2751,Robot Collisions,Algorithms,56.0974885,"['Array', 'Stack', 'Sorting', 'Simulation']"
Hard,2752,Customers with Maximum Number of Transactions on Consecutive Days,Database,40.95978371,['Database']
Hard,2753,Count Houses in a Circular Street II,Algorithms,61.21842496,[]
Medium,2754,Bind Function to Context,JavaScript,86.86964795,[]
Medium,2755,Deep Merge of Two Objects,JavaScript,64.45783133,[]
Hard,2756,Query Batching,JavaScript,66.41791045,[]
Medium,2757,Generate Circular Array Values,JavaScript,73.39449541,[]
Easy,2758,Next Day,JavaScript,85.01945525,[]
Hard,2759,Convert JSON String to Object,JavaScript,62.25045372,[]
Easy,2760,Longest Even Odd Subarray With Threshold,Algorithms,30.13178872,"['Array', 'Sliding Window']"
Medium,2761,Prime Pairs With Target Sum,Algorithms,35.35751488,"['Array', 'Math', 'Enumeration', 'Number Theory']"
Medium,2762,Continuous Subarrays,Algorithms,58.02265727,"['Array', 'Queue', 'Sliding Window', 'Heap (Priority Queue)', 'Ordered Set', 'Monotonic Queue']"
Hard,2763,Sum of Imbalance Numbers of All Subarrays,Algorithms,42.04145669,"['Array', 'Hash Table', 'Ordered Set']"
Medium,2764,Is Array a Preorder of Some ‌Binary Tree,Algorithms,65.6626506,"['Stack', 'Tree', 'Depth-First Search', 'Binary Tree']"
Easy,2765,Longest Alternating Subarray,Algorithms,34.33428363,"['Array', 'Enumeration']"
Medium,2766,Relocate Marbles,Algorithms,50.09196812,"['Array', 'Hash Table', 'Sorting', 'Simulation']"
Medium,2767,Partition String Into Minimum Beautiful Substrings,Algorithms,52.46084403,"['Hash Table', 'String', 'Dynamic Programming', 'Backtracking']"
Medium,2768,Number of Black Blocks,Algorithms,38.04817592,"['Array', 'Hash Table', 'Enumeration']"
Easy,2769,Find the Maximum Achievable Number,Algorithms,90.80054496,['Math']
Medium,2770,Maximum Number of Jumps to Reach the Last Index,Algorithms,31.20237855,"['Array', 'Dynamic Programming']"
Medium,2771,Longest Non-decreasing Subarray From Two Arrays,Algorithms,29.75387475,"['Array', 'Dynamic Programming']"
Medium,2772,Apply Operations to Make All Array Elements Equal to Zero,Algorithms,32.61511765,"['Array', 'Prefix Sum']"
Medium,2773,Height of Special Binary Tree,Algorithms,73.36683417,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,2774,Array Upper Bound,JavaScript,82.88956787,[]
Medium,2775,Undefined to Null,JavaScript,70.90909091,[]
Medium,2776,Convert Callback Based Function to Promise Based Function,JavaScript,92.45283019,[]
Medium,2777,Date Range Generator,JavaScript,82.53731343,[]
Easy,2778,Sum of Squares of Special Elements ,Algorithms,81.02691299,"['Array', 'Enumeration']"
Medium,2779,Maximum Beauty of an Array After Applying Operation,Algorithms,58.05537842,"['Array', 'Binary Search', 'Sliding Window', 'Sorting']"
Medium,2780,Minimum Index of a Valid Split,Algorithms,75.57473418,"['Array', 'Hash Table', 'Sorting']"
Hard,2781,Length of the Longest Valid Substring,Algorithms,37.61189919,"['Array', 'Hash Table', 'String', 'Sliding Window']"
Medium,2782,Number of Unique Categories,Algorithms,82.51445087,"['Union Find', 'Interactive', 'Counting']"
Medium,2783,Flight Occupancy and Waitlist Analysis,Database,38.34913112,['Database']
Easy,2784,Check if Array is Good,Algorithms,48.37977884,"['Array', 'Hash Table', 'Sorting']"
Medium,2785,Sort Vowels in a String,Algorithms,79.37633184,"['String', 'Sorting']"
Medium,2786,Visit Array Positions to Maximize Score,Algorithms,36.44088812,"['Array', 'Dynamic Programming']"
Medium,2787,Ways to Express an Integer as Sum of Powers,Algorithms,33.59182287,['Dynamic Programming']
Easy,2788,Split Strings by Separator,Algorithms,74.73819403,"['Array', 'String']"
Medium,2789,Largest Element in an Array after Merge Operations,Algorithms,46.57802058,"['Array', 'Greedy']"
Hard,2790,Maximum Number of Groups With Increasing Length,Algorithms,21.9868072,"['Array', 'Math', 'Binary Search', 'Greedy', 'Sorting']"
Hard,2791,Count Paths That Can Form a Palindrome in a Tree,Algorithms,45.31951449,"['Dynamic Programming', 'Bit Manipulation', 'Tree', 'Depth-First Search', 'Bitmask']"
Hard,2792,Count Nodes That Are Great Enough,Algorithms,57.30846774,"['Divide and Conquer', 'Tree', 'Depth-First Search', 'Binary Tree']"
Hard,2793,Status of Flight Tickets,Database,79.15574964,[]
Easy,2794,Create Object from Two Arrays,JavaScript,64.18918919,[]
Medium,2795,Parallel Execution of Promises for Individual Results Retrieval,JavaScript,90.04192872,[]
Easy,2796,Repeat String,JavaScript,93.08954794,[]
Easy,2797,Partial Function with Placeholders,JavaScript,89.61640212,[]
Easy,2798,Number of Employees Who Met the Target,Algorithms,87.60267198,['Array']
Medium,2799,Count Complete Subarrays in an Array,Algorithms,75.7900034,"['Array', 'Hash Table', 'Sliding Window']"
Medium,2800,Shortest String That Contains Three Strings,Algorithms,30.61996011,"['String', 'Greedy', 'Enumeration']"
Hard,2801,Count Stepping Numbers in Range,Algorithms,25.84076774,"['String', 'Dynamic Programming']"
Medium,2802,Find The K-th Lucky Number,Algorithms,75.91305447,"['Math', 'String', 'Bit Manipulation']"
Easy,2803,Factorial Generator,JavaScript,87.05479452,[]
Easy,2804,Array Prototype ForEach,JavaScript,89.61864407,[]
Medium,2805,Custom Interval,JavaScript,82.45125348,[]
Easy,2806,Account Balance After Rounded Purchase,Algorithms,55.03569911,['Math']
Medium,2807,Insert Greatest Common Divisors in Linked List,Algorithms,91.54216832,"['Linked List', 'Math', 'Number Theory']"
Medium,2808,Minimum Seconds to Equalize a Circular Array,Algorithms,27.30759932,"['Array', 'Hash Table']"
Hard,2809,Minimum Time to Make Array Sum At Most x,Algorithms,25.22392372,"['Array', 'Dynamic Programming', 'Sorting']"
Easy,2810,Faulty Keyboard,Algorithms,78.45677119,"['String', 'Simulation']"
Medium,2811,Check if it is Possible to Split Array,Algorithms,33.87688369,"['Array', 'Dynamic Programming', 'Greedy']"
Medium,2812,Find the Safest Path in a Grid,Algorithms,48.34405784,"['Array', 'Binary Search', 'Breadth-First Search', 'Union Find', 'Heap (Priority Queue)', 'Matrix']"
Hard,2813,Maximum Elegance of a K-Length Subsequence,Algorithms,27.74383511,"['Array', 'Hash Table', 'Stack', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Hard,2814,Minimum Time Takes to Reach Destination Without Drowning,Algorithms,52.29023105,"['Array', 'Breadth-First Search', 'Matrix']"
Easy,2815,Max Pair Sum in an Array,Algorithms,58.95663595,"['Array', 'Hash Table']"
Medium,2816,Double a Number Represented as a Linked List,Algorithms,61.2266057,"['Linked List', 'Math', 'Stack']"
Medium,2817,Minimum Absolute Difference Between Elements With Constraint,Algorithms,33.900903,"['Array', 'Binary Search', 'Ordered Set']"
Hard,2818,Apply Operations to Maximize Score,Algorithms,54.21532003,"['Array', 'Math', 'Stack', 'Greedy', 'Sorting', 'Monotonic Stack', 'Number Theory']"
Hard,2819,Minimum Relative Loss After Buying Chocolates,Algorithms,41.76276771,"['Array', 'Binary Search', 'Sorting', 'Prefix Sum']"
Medium,2820,Election Results,Database,68.47671344,[]
Medium,2821,Delay the Resolution of Each Promise,JavaScript,72.06266319,[]
Easy,2822,Inversion of Object,JavaScript,59.59012086,[]
Medium,2823,Deep Object Filter,JavaScript,55.82573455,[]
Easy,2824,Count Pairs Whose Sum is Less than Target,Algorithms,87.49912314,"['Array', 'Two Pointers', 'Binary Search', 'Sorting']"
Medium,2825,Make String a Subsequence Using Cyclic Increments,Algorithms,65.6114351,"['Two Pointers', 'String']"
Medium,2826,Sorting Three Groups,Algorithms,41.74579256,"['Array', 'Binary Search', 'Dynamic Programming']"
Hard,2827,Number of Beautiful Integers in the Range,Algorithms,19.42118484,"['Math', 'Dynamic Programming']"
Easy,2828,Check if a String Is an Acronym of Words,Algorithms,82.54588052,"['Array', 'String']"
Medium,2829,Determine the Minimum Sum of a k-avoiding Array,Algorithms,59.78554408,"['Math', 'Greedy']"
Medium,2830,Maximize the Profit as the Salesman,Algorithms,37.07863466,"['Array', 'Hash Table', 'Binary Search', 'Dynamic Programming', 'Sorting']"
Medium,2831,Find the Longest Equal Subarray,Algorithms,36.03899348,"['Array', 'Hash Table', 'Binary Search', 'Sliding Window']"
Medium,2832,Maximal Range That Each Element Is Maximum in It,Algorithms,75.29664226,"['Array', 'Stack', 'Monotonic Stack']"
Easy,2833,Furthest Point From Origin,Algorithms,64.31897829,"['String', 'Counting']"
Medium,2834,Find the Minimum Possible Sum of a Beautiful Array,Algorithms,36.00870163,"['Math', 'Greedy']"
Hard,2835,Minimum Operations to Form Subsequence With Target Sum,Algorithms,31.2242786,"['Array', 'Greedy', 'Bit Manipulation']"
Hard,2836,Maximize Value of Function in a Ball Passing Game,Algorithms,28.37197452,"['Array', 'Dynamic Programming', 'Bit Manipulation']"
Easy,2837,Total Traveled Distance,Database,77.49476622,['Database']
Medium,2838,Maximum Coins Heroes Can Collect,Algorithms,68.55062058,"['Array', 'Two Pointers', 'Binary Search', 'Sorting', 'Prefix Sum']"
Easy,2839,Check if Strings Can be Made Equal With Operations I,Algorithms,46.98956412,['String']
Medium,2840,Check if Strings Can be Made Equal With Operations II,Algorithms,55.12425588,"['Hash Table', 'String', 'Sorting']"
Medium,2841,Maximum Sum of Almost Unique Subarray,Algorithms,39.15840152,"['Array', 'Hash Table', 'Sliding Window']"
Hard,2842,Count K-Subsequences of a String With Maximum Beauty,Algorithms,29.52169172,"['Hash Table', 'Math', 'String', 'Greedy', 'Combinatorics']"
Easy,2843,  Count Symmetric Integers,Algorithms,83.15279666,"['Math', 'Enumeration']"
Medium,2844,Minimum Operations to Make a Special Number,Algorithms,38.00010939,"['Math', 'String', 'Greedy', 'Enumeration']"
Medium,2845,Count of Interesting Subarrays,Algorithms,58.06304309,"['Array', 'Hash Table', 'Prefix Sum']"
Hard,2846,Minimum Edge Weight Equilibrium Queries in a Tree,Algorithms,42.33718668,"['Array', 'Tree', 'Graph', 'Strongly Connected Component']"
Medium,2847,Smallest Number With Given Digit Product,Algorithms,43.02659957,"['Math', 'Greedy']"
Easy,2848,Points That Intersect With Cars,Algorithms,72.78645684,"['Array', 'Hash Table', 'Prefix Sum']"
Medium,2849,Determine if a Cell Is Reachable at a Given Time,Algorithms,37.13703725,['Math']
Medium,2850,Minimum Moves to Spread Stones Over Grid,Algorithms,44.14686968,"['Array', 'Dynamic Programming', 'Breadth-First Search', 'Matrix']"
Hard,2851,String Transformation,Algorithms,24.95617111,"['Math', 'String', 'Dynamic Programming', 'String Matching']"
Medium,2852,Sum of Remoteness of All Cells,Algorithms,70.87962963,"['Array', 'Hash Table', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Matrix']"
Easy,2853,Highest Salaries Difference,Database,74.33514899,['Database']
Medium,2854,Rolling Average Steps,Database,69.36395116,['Database']
Easy,2855,Minimum Right Shifts to Sort the Array,Algorithms,56.62601626,['Array']
Medium,2856,Minimum Array Length After Pair Removals,Algorithms,24.95593027,"['Array', 'Hash Table', 'Two Pointers', 'Binary Search', 'Greedy', 'Counting']"
Medium,2857,Count Pairs of Points With Distance k,Algorithms,31.98588051,"['Array', 'Hash Table', 'Bit Manipulation']"
Hard,2858,Minimum Edge Reversals So Every Node Is Reachable,Algorithms,55.29562982,"['Dynamic Programming', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Easy,2859,Sum of Values at Indices With K Set Bits,Algorithms,85.69574037,"['Array', 'Bit Manipulation']"
Medium,2860,Happy Students,Algorithms,49.96947947,"['Array', 'Sorting', 'Enumeration']"
Medium,2861,Maximum Number of Alloys,Algorithms,38.7361085,"['Array', 'Binary Search']"
Hard,2862,Maximum Element-Sum of a Complete Subset of Indices,Algorithms,41.43617021,"['Array', 'Math', 'Number Theory']"
Medium,2863,Maximum Length of Semi-Decreasing Subarrays,Algorithms,70.08300435,"['Array', 'Stack', 'Sorting', 'Monotonic Stack']"
Easy,2864,Maximum Odd Binary Number,Algorithms,82.70246446,"['Math', 'String', 'Greedy']"
Medium,2865,Beautiful Towers I,Algorithms,43.24611816,"['Array', 'Stack', 'Monotonic Stack']"
Medium,2866,Beautiful Towers II,Algorithms,34.35775158,"['Array', 'Stack', 'Monotonic Stack']"
Hard,2867,Count Valid Paths in a Tree,Algorithms,34.34745763,"['Math', 'Dynamic Programming', 'Tree', 'Depth-First Search', 'Number Theory']"
Hard,2868,The Wording Game,Algorithms,53.7593985,"['Array', 'Math', 'Two Pointers', 'String', 'Greedy', 'Game Theory']"
Easy,2869,Minimum Operations to Collect Elements,Algorithms,60.96299979,"['Array', 'Hash Table', 'Bit Manipulation']"
Medium,2870,Minimum Number of Operations to Make Array Empty,Algorithms,61.82222712,"['Array', 'Hash Table', 'Greedy', 'Counting']"
Medium,2871,Split Array Into Maximum Number of Subarrays,Algorithms,41.48394813,"['Array', 'Greedy', 'Bit Manipulation']"
Hard,2872,Maximum Number of K-Divisible Components,Algorithms,69.79229291,"['Tree', 'Depth-First Search']"
Easy,2873,Maximum Value of an Ordered Triplet I,Algorithms,58.30760063,['Array']
Medium,2874,Maximum Value of an Ordered Triplet II,Algorithms,56.70838113,['Array']
Medium,2875,Minimum Size Subarray in Infinite Array,Algorithms,31.0719493,"['Array', 'Hash Table', 'Sliding Window', 'Prefix Sum']"
Hard,2876,Count Visited Nodes in a Directed Graph,Algorithms,28.76502113,"['Dynamic Programming', 'Graph', 'Memoization']"
Easy,2877,Create a DataFrame from List,pandas,81.47803822,[]
Easy,2878,Get the Size of a DataFrame,pandas,85.1845296,[]
Easy,2879,Display the First Three Rows,pandas,93.0992393,[]
Easy,2880,Select Data,pandas,79.30376258,[]
Easy,2881,Create a New Column,pandas,90.30301744,[]
Easy,2882,Drop Duplicate Rows,pandas,85.57618832,[]
Easy,2883,Drop Missing Data,pandas,64.38369305,[]
Easy,2884,Modify Columns,pandas,92.53957308,[]
Easy,2885,Rename Columns,pandas,85.62005055,[]
Easy,2886,Change Data Type,pandas,87.51785305,[]
Easy,2887,Fill Missing Data,pandas,72.2813333,[]
Easy,2888,Reshape Data: Concatenate,pandas,90.77759831,[]
Easy,2889,Reshape Data: Pivot,pandas,83.61413286,[]
Easy,2890,Reshape Data: Melt,pandas,86.23105116,[]
Easy,2891,Method Chaining,pandas,76.67929375,[]
Medium,2892,Minimizing Array After Replacing Pairs With Their Product,Algorithms,39.62952568,"['Array', 'Dynamic Programming', 'Greedy']"
Medium,2893,Calculate Orders Within Each Interval,Database,67.62423988,['Database']
Easy,2894,Divisible and Non-divisible Sums Difference,Algorithms,88.3838347,['Math']
Medium,2895,Minimum Processing Time,Algorithms,69.05284808,"['Array', 'Greedy', 'Sorting']"
Medium,2896,Apply Operations to Make Two Strings Equal,Algorithms,27.12437888,"['String', 'Dynamic Programming']"
Hard,2897,Apply Operations on Array to Maximize Sum of Squares,Algorithms,43.03347988,"['Array', 'Hash Table', 'Greedy', 'Bit Manipulation']"
Medium,2898,Maximum Linear Stock Score,Algorithms,58.57534247,"['Array', 'Hash Table']"
Easy,2899,Last Visited Integers,Algorithms,60.87923643,"['Array', 'Simulation']"
Easy,2900,Longest Unequal Adjacent Groups Subsequence I,Algorithms,67.82599187,"['Array', 'String', 'Dynamic Programming', 'Greedy']"
Medium,2901,Longest Unequal Adjacent Groups Subsequence II,Algorithms,51.18291784,"['Array', 'String', 'Dynamic Programming']"
Hard,2902,Count of Sub-Multisets With Bounded Sum,Algorithms,20.40300212,"['Array', 'Hash Table', 'Dynamic Programming', 'Sliding Window']"
Easy,2903,Find Indices With Index and Value Difference I,Algorithms,60.25675383,"['Array', 'Two Pointers']"
Medium,2904,Shortest and Lexicographically Smallest Beautiful String,Algorithms,39.46777423,"['String', 'Sliding Window']"
Medium,2905,Find Indices With Index and Value Difference II,Algorithms,31.66497541,"['Array', 'Two Pointers']"
Medium,2906,Construct Product Matrix,Algorithms,30.78207984,"['Array', 'Matrix', 'Prefix Sum']"
Medium,2907,Maximum Profitable Triplets With Increasing Prices I,Algorithms,54.46058091,"['Array', 'Binary Indexed Tree', 'Segment Tree']"
Easy,2908,Minimum Sum of Mountain Triplets I,Algorithms,65.84487188,['Array']
Medium,2909,Minimum Sum of Mountain Triplets II,Algorithms,53.54200679,['Array']
Medium,2910,Minimum Number of Groups to Create a Valid Assignment,Algorithms,23.94293748,"['Array', 'Hash Table', 'Greedy']"
Hard,2911,Minimum Changes to Make K Semi-palindromes,Algorithms,34.76735317,"['Two Pointers', 'String', 'Dynamic Programming']"
Hard,2912,Number of Ways to Reach Destination in the Grid,Algorithms,58.7150838,"['Math', 'Dynamic Programming', 'Combinatorics']"
Easy,2913,Subarrays Distinct Element Sum of Squares I,Algorithms,79.48620703,"['Array', 'Hash Table']"
Medium,2914,Minimum Number of Changes to Make Binary String Beautiful,Algorithms,76.50961162,['String']
Medium,2915,Length of the Longest Subsequence That Sums to Target,Algorithms,37.00117601,"['Array', 'Dynamic Programming']"
Hard,2916,Subarrays Distinct Element Sum of Squares II,Algorithms,20.62632064,"['Array', 'Dynamic Programming', 'Binary Indexed Tree', 'Segment Tree']"
Easy,2917,Find the K-or of an Array,Algorithms,72.01189895,"['Array', 'Bit Manipulation']"
Medium,2918,Minimum Equal Sum of Two Arrays After Replacing Zeros,Algorithms,50.10360449,"['Array', 'Greedy']"
Medium,2919,Minimum Increment Operations to Make Array Beautiful,Algorithms,33.8203322,"['Array', 'Dynamic Programming']"
Hard,2920,Maximum Points After Collecting Coins From All Nodes,Algorithms,35.62595092,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Tree', 'Depth-First Search', 'Memoization']"
Hard,2921,Maximum Profitable Triplets With Increasing Prices II,Algorithms,45.53505535,"['Array', 'Binary Indexed Tree', 'Segment Tree']"
Medium,2922,Market Analysis III,Database,41.53697838,['Database']
Easy,2923,Find Champion I,Algorithms,72.26857248,"['Array', 'Matrix']"
Medium,2924,Find Champion II,Algorithms,69.99050543,['Graph']
Medium,2925,Maximum Score After Applying Operations on a Tree,Algorithms,45.83114678,"['Dynamic Programming', 'Tree', 'Depth-First Search']"
Hard,2926,Maximum Balanced Subsequence Sum,Algorithms,24.9229089,"['Array', 'Binary Search', 'Dynamic Programming', 'Binary Indexed Tree', 'Segment Tree']"
Hard,2927,Distribute Candies Among Children III,Algorithms,43.75366569,"['Math', 'Combinatorics']"
Easy,2928,Distribute Candies Among Children I,Algorithms,73.21953138,"['Math', 'Combinatorics', 'Enumeration']"
Medium,2929,Distribute Candies Among Children II,Algorithms,34.97672605,"['Math', 'Combinatorics', 'Enumeration']"
Medium,2930,Number of Strings Which Can Be Rearranged to Contain Substring,Algorithms,55.06375495,"['Math', 'Dynamic Programming', 'Combinatorics']"
Hard,2931,Maximum Spending After Buying Items,Algorithms,59.84375,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Matrix']"
Easy,2932,Maximum Strong Pair XOR I,Algorithms,74.64256266,"['Array', 'Hash Table', 'Bit Manipulation', 'Trie', 'Sliding Window']"
Medium,2933,High-Access Employees,Algorithms,45.92077263,"['Array', 'Hash Table', 'String', 'Sorting']"
Medium,2934,Minimum Operations to Maximize Last Elements in Arrays,Algorithms,43.12314587,"['Array', 'Enumeration']"
Hard,2935,Maximum Strong Pair XOR II,Algorithms,30.54122115,"['Array', 'Hash Table', 'Bit Manipulation', 'Trie', 'Sliding Window']"
Medium,2936,Number of Equal Numbers Blocks,Algorithms,62.14160328,"['Array', 'Binary Search', 'Interactive']"
Easy,2937,Make Three Strings Equal,Algorithms,43.05823491,['String']
Medium,2938,Separate Black and White Balls,Algorithms,64.07975103,"['Two Pointers', 'String', 'Greedy']"
Medium,2939,Maximum Xor Product,Algorithms,26.76549801,"['Math', 'Greedy', 'Bit Manipulation']"
Hard,2940,Find Building Where Alice and Bob Can Meet,Algorithms,52.32740074,"['Array', 'Binary Search', 'Stack', 'Binary Indexed Tree', 'Segment Tree', 'Heap (Priority Queue)', 'Monotonic Stack']"
Hard,2941,Maximum GCD-Sum of a Subarray,Algorithms,36.4010989,"['Array', 'Math', 'Binary Search', 'Number Theory']"
Easy,2942,Find Words Containing Character,Algorithms,88.43453044,"['Array', 'String']"
Medium,2943,Maximize Area of Square Hole in Grid,Algorithms,36.76858563,"['Array', 'Sorting']"
Medium,2944,Minimum Number of Coins for Fruits,Algorithms,46.48118228,"['Array', 'Dynamic Programming', 'Queue', 'Heap (Priority Queue)', 'Monotonic Queue']"
Hard,2945,Find Maximum Non-decreasing Array Length,Algorithms,16.93755904,"['Array', 'Binary Search', 'Dynamic Programming', 'Stack', 'Queue', 'Monotonic Stack', 'Monotonic Queue']"
Easy,2946,Matrix Similarity After Cyclic Shifts,Algorithms,58.06045877,"['Array', 'Math', 'Matrix', 'Simulation']"
Medium,2947,Count Beautiful Substrings I,Algorithms,59.44966182,"['Hash Table', 'Math', 'String', 'Enumeration', 'Number Theory', 'Prefix Sum']"
Medium,2948,Make Lexicographically Smallest Array by Swapping Elements,Algorithms,60.2684787,"['Array', 'Union Find', 'Sorting']"
Hard,2949,Count Beautiful Substrings II,Algorithms,24.69942398,"['Hash Table', 'Math', 'String', 'Number Theory', 'Prefix Sum']"
Medium,2950,Number of Divisible Substrings,Algorithms,73.35359676,"['Hash Table', 'String', 'Counting', 'Prefix Sum']"
Easy,2951,Find the Peaks,Algorithms,74.01352224,"['Array', 'Enumeration']"
Medium,2952,Minimum Number of Coins to be Added,Algorithms,56.53438454,"['Array', 'Greedy', 'Sorting']"
Hard,2953,Count Complete Substrings,Algorithms,28.33036755,"['Hash Table', 'String', 'Sliding Window']"
Hard,2954,Count the Number of Infection Sequences,Algorithms,33.17311676,"['Array', 'Math', 'Combinatorics']"
Medium,2955,Number of Same-End Substrings,Algorithms,61.30742049,"['Array', 'Hash Table', 'String', 'Counting', 'Prefix Sum']"
Easy,2956,Find Common Elements Between Two Arrays,Algorithms,83.56969206,"['Array', 'Hash Table']"
Medium,2957,Remove Adjacent Almost-Equal Characters,Algorithms,51.58038369,"['String', 'Dynamic Programming', 'Greedy']"
Medium,2958,Length of Longest Subarray With at Most K Frequency,Algorithms,55.68294194,"['Array', 'Hash Table', 'Sliding Window']"
Hard,2959,Number of Possible Sets of Closing Branches,Algorithms,48.07991986,"['Bit Manipulation', 'Graph', 'Heap (Priority Queue)', 'Enumeration', 'Shortest Path']"
Easy,2960,Count Tested Devices After Test Operations,Algorithms,78.35136711,"['Array', 'Simulation', 'Counting']"
Medium,2961,Double Modular Exponentiation,Algorithms,46.97387212,"['Array', 'Math', 'Simulation']"
Medium,2962,Count Subarrays Where Max Element Appears at Least K Times,Algorithms,62.50450063,"['Array', 'Sliding Window']"
Hard,2963,Count the Number of Good Partitions,Algorithms,46.70244835,"['Array', 'Hash Table', 'Math', 'Combinatorics']"
Medium,2964,Number of Divisible Triplet Sums,Algorithms,67.60873923,"['Array', 'Hash Table']"
Easy,2965,Find Missing and Repeated Values,Algorithms,83.65416208,"['Array', 'Hash Table', 'Math', 'Matrix']"
Medium,2966,Divide Array Into Arrays With Max Difference,Algorithms,71.69639146,"['Array', 'Greedy', 'Sorting']"
Medium,2967,Minimum Cost to Make Array Equalindromic,Algorithms,22.42497848,"['Array', 'Math', 'Binary Search', 'Greedy', 'Sorting']"
Hard,2968,Apply Operations to Maximize Frequency Score,Algorithms,36.21695533,"['Array', 'Binary Search', 'Sliding Window', 'Sorting', 'Prefix Sum']"
Hard,2969,Minimum Number of Coins for Fruits II,Algorithms,45.04555809,"['Array', 'Dynamic Programming', 'Queue', 'Heap (Priority Queue)', 'Monotonic Queue']"
Easy,2970,Count the Number of Incremovable Subarrays I,Algorithms,54.57755988,"['Array', 'Two Pointers', 'Binary Search', 'Enumeration']"
Medium,2971,Find Polygon With the Largest Perimeter,Algorithms,65.34007061,"['Array', 'Greedy', 'Sorting', 'Prefix Sum']"
Hard,2972,Count the Number of Incremovable Subarrays II,Algorithms,38.7954293,"['Array', 'Two Pointers', 'Binary Search']"
Hard,2973,Find Number of Coins to Place in Tree Nodes,Algorithms,36.03499628,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Sorting', 'Heap (Priority Queue)']"
Easy,2974,Minimum Number Game,Algorithms,84.82590813,"['Array', 'Sorting', 'Heap (Priority Queue)', 'Simulation']"
Medium,2975,Maximum Square Area by Removing Fences From a Field,Algorithms,23.9512302,"['Array', 'Hash Table', 'Enumeration']"
Medium,2976,Minimum Cost to Convert String I,Algorithms,57.64443869,"['Array', 'String', 'Graph', 'Shortest Path']"
Hard,2977,Minimum Cost to Convert String II,Algorithms,25.41249838,"['Array', 'String', 'Dynamic Programming', 'Graph', 'Trie', 'Shortest Path']"
Medium,2978,Symmetric Coordinates,Database,40.51236749,['Database']
Medium,2979,Most Expensive Item That Can Not Be Bought,Algorithms,80.24708305,"['Math', 'Dynamic Programming', 'Number Theory']"
Easy,2980,Check if Bitwise OR Has Trailing Zeros,Algorithms,69.7034478,"['Array', 'Bit Manipulation']"
Medium,2981,Find Longest Special Substring That Occurs Thrice I,Algorithms,61.90571539,"['Hash Table', 'String', 'Binary Search', 'Sliding Window', 'Counting']"
Medium,2982,Find Longest Special Substring That Occurs Thrice II,Algorithms,38.32989243,"['Hash Table', 'String', 'Binary Search', 'Sliding Window', 'Counting']"
Hard,2983,Palindrome Rearrangement Queries,Algorithms,22.97668038,"['Hash Table', 'String', 'Prefix Sum']"
Medium,2984,Find Peak Calling Hours for Each City,Database,61.62046908,['Database']
Easy,2985,Calculate Compressed Mean,Database,87.98176544,['Database']
Medium,2986,Find Third Transaction,Database,53.56248957,['Database']
Easy,2987,Find Expensive Cities,Database,79.74382434,['Database']
Medium,2988,Manager of the Largest Department,Database,81.02878716,['Database']
Medium,2989,Class Performance,Database,89.39787958,['Database']
Easy,2990,Loan Types,Database,63.72384937,['Database']
Hard,2991,Top Three Wineries ,Database,56.90219934,['Database']
Medium,2992,Number of Self-Divisible Permutations,Algorithms,71.66796571,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Bitmask']"
Medium,2993,Friday Purchases I,Database,81.47853736,['Database']
Hard,2994,Friday Purchases II ,Database,77.27095517,['Database']
Hard,2995,Viewers Turned Streamers,Database,42.93652754,['Database']
Easy,2996,Smallest Missing Integer Greater Than Sequential Prefix Sum,Algorithms,33.50732419,"['Array', 'Hash Table', 'Sorting']"
Medium,2997,Minimum Number of Operations to Make Array XOR Equal to K,Algorithms,85.31939147,"['Array', 'Bit Manipulation']"
Medium,2998,Minimum Number of Operations to Make X and Y Equal,Algorithms,47.20702256,"['Dynamic Programming', 'Breadth-First Search', 'Memoization']"
Hard,2999,Count the Number of Powerful Integers,Algorithms,46.54657643,"['Math', 'String', 'Dynamic Programming']"
Easy,3000,Maximum Area of Longest Diagonal Rectangle,Algorithms,36.43776973,['Array']
Medium,3001,Minimum Moves to Capture The Queen,Algorithms,21.35955283,"['Math', 'Enumeration']"
Medium,3002,Maximum Size of a Set After Removals,Algorithms,44.69553518,"['Array', 'Hash Table', 'Greedy']"
Hard,3003,Maximize the Number of Partitions After Operations,,,
Medium,3004,Maximum Subtree of the Same Color,Algorithms,56.7419158,"['Array', 'Dynamic Programming', 'Tree', 'Depth-First Search']"
Easy,3005,Count Elements With Maximum Frequency,Algorithms,77.90624446,"['Array', 'Hash Table', 'Counting']"
Medium,3006,Find Beautiful Indices in the Given Array I,Algorithms,38.15175685,"['Two Pointers', 'String', 'Binary Search', 'Rolling Hash', 'String Matching', 'Hash Function']"
Medium,3007,Maximum Number That Sum of the Prices Is Less Than or Equal to K,Algorithms,36.72597625,"['Binary Search', 'Dynamic Programming', 'Bit Manipulation']"
Hard,3008,Find Beautiful Indices in the Given Array II,Algorithms,26.2301398,"['Two Pointers', 'String', 'Binary Search', 'Rolling Hash', 'String Matching', 'Hash Function']"
Hard,3009,Maximum Number of Intersections on the Chart,Algorithms,45.2173913,"['Array', 'Math', 'Binary Indexed Tree', 'Geometry']"
Easy,3010,Divide an Array Into Subarrays With Minimum Cost I,Algorithms,65.65085189,"['Array', 'Sorting', 'Enumeration']"
Medium,3011,Find if Array Can Be Sorted,Algorithms,66.54634017,"['Array', 'Bit Manipulation', 'Sorting']"
Medium,3012,Minimize Length of Array Using Operations,Algorithms,34.74806931,"['Array', 'Math', 'Greedy', 'Number Theory']"
Hard,3013,Divide an Array Into Subarrays With Minimum Cost II,Algorithms,29.90085732,"['Array', 'Hash Table', 'Sliding Window', 'Heap (Priority Queue)']"
Easy,3014,Minimum Number of Pushes to Type Word I,Algorithms,66.09610734,"['Math', 'String', 'Greedy']"
Medium,3015,Count the Number of Houses at a Certain Distance I,Algorithms,54.78831246,"['Breadth-First Search', 'Graph', 'Prefix Sum']"
Medium,3016,Minimum Number of Pushes to Type Word II,Algorithms,79.90038504,"['Hash Table', 'String', 'Greedy', 'Sorting', 'Counting']"
Hard,3017,Count the Number of Houses at a Certain Distance II,Algorithms,21.54280904,"['Graph', 'Prefix Sum']"
Hard,3018,Maximum Number of Removal Queries That Can Be Processed I,Algorithms,43.20610687,"['Array', 'Dynamic Programming']"
Easy,3019,Number of Changing Keys,Algorithms,79.61161421,['String']
Medium,3020,Find the Maximum Number of Elements in Subset,Algorithms,26.30495337,"['Array', 'Hash Table', 'Enumeration']"
Medium,3021,Alice and Bob Playing Flower Game,Algorithms,45.55242461,['Math']
Hard,3022,Minimize OR of Remaining Elements Using Operations,Algorithms,28.69027811,"['Array', 'Greedy', 'Bit Manipulation']"
Medium,3023,Find Pattern in Infinite Stream I,Algorithms,56.88107704,"['Array', 'Sliding Window', 'Rolling Hash', 'String Matching', 'Hash Function']"
Easy,3024,Type of Triangle,Algorithms,38.07313398,"['Array', 'Math', 'Sorting']"
Medium,3025,Find the Number of Ways to Place People I,Algorithms,40.68340817,"['Array', 'Math', 'Geometry', 'Sorting', 'Enumeration']"
Medium,3026,Maximum Good Subarray Sum,Algorithms,20.14141648,"['Array', 'Hash Table', 'Prefix Sum']"
Hard,3027,Find the Number of Ways to Place People II,Algorithms,45.73693317,"['Array', 'Math', 'Geometry', 'Sorting', 'Enumeration']"
Easy,3028,Ant on the Boundary,Algorithms,73.63743441,"['Array', 'Simulation', 'Prefix Sum']"
Medium,3029,Minimum Time to Revert Word to Initial State I,Algorithms,41.16500122,"['String', 'Rolling Hash', 'String Matching', 'Hash Function']"
Medium,3030,Find the Grid of Region Average,Algorithms,42.10404802,"['Array', 'Matrix']"
Hard,3031,Minimum Time to Revert Word to Initial State II,Algorithms,34.28595421,"['String', 'Rolling Hash', 'String Matching', 'Hash Function']"
Easy,3032,Count Numbers With Unique Digits II,Algorithms,87.70252324,"['Hash Table', 'Math', 'Dynamic Programming']"
Easy,3033,Modify the Matrix,Algorithms,68.20855652,"['Array', 'Matrix']"
Medium,3034,Number of Subarrays That Match a Pattern I,Algorithms,66.51006116,"['Array', 'Rolling Hash', 'String Matching', 'Hash Function']"
Medium,3035,Maximum Palindromes After Operations,Algorithms,42.96277474,"['Array', 'Hash Table', 'String', 'Greedy', 'Sorting', 'Counting']"
Hard,3036,Number of Subarrays That Match a Pattern II,Algorithms,31.94223567,"['Array', 'Rolling Hash', 'String Matching', 'Hash Function']"
Hard,3037,Find Pattern in Infinite Stream II,Algorithms,68.43657817,"['Array', 'Sliding Window', 'Rolling Hash', 'String Matching', 'Hash Function']"
Easy,3038,Maximum Number of Operations With the Same Score I,Algorithms,51.80993001,"['Array', 'Simulation']"
Medium,3039,Apply Operations to Make String Empty,Algorithms,56.05990872,"['Array', 'Hash Table', 'Sorting', 'Counting']"
Medium,3040,Maximum Number of Operations With the Same Score II,Algorithms,32.97996103,"['Array', 'Dynamic Programming', 'Memoization']"
Hard,3041,Maximize Consecutive Elements in an Array After Modification,Algorithms,32.25689644,"['Array', 'Dynamic Programming', 'Sorting']"
Easy,3042,Count Prefix and Suffix Pairs I,Algorithms,77.66853768,"['Array', 'String', 'Trie', 'Rolling Hash', 'String Matching', 'Hash Function']"
Medium,3043,Find the Length of the Longest Common Prefix,Algorithms,56.35794268,"['Array', 'Hash Table', 'String', 'Trie']"
Medium,3044,Most Frequent Prime,Algorithms,44.87551271,"['Array', 'Hash Table', 'Math', 'Matrix', 'Counting', 'Enumeration', 'Number Theory']"
Hard,3045,Count Prefix and Suffix Pairs II,Algorithms,27.06795419,"['Array', 'String', 'Trie', 'Rolling Hash', 'String Matching', 'Hash Function']"
Easy,3046,Split the Array,Algorithms,59.05237218,"['Array', 'Hash Table', 'Counting']"
Medium,3047,Find the Largest Area of Square Inside Two Rectangles,Algorithms,44.96053878,"['Array', 'Math', 'Geometry']"
Medium,3048,Earliest Second to Mark Indices I,Algorithms,34.39667129,"['Array', 'Binary Search']"
Hard,3049,Earliest Second to Mark Indices II,Algorithms,20.1071309,"['Array', 'Binary Search', 'Greedy', 'Heap (Priority Queue)']"
Medium,3050,Pizza Toppings Cost Analysis,Database,67.86983867,['Database']
Easy,3051,Find Candidates for Data Scientist Position,Database,76.10086564,['Database']
Hard,3052,Maximize Items,Database,75.10373444,['Database']
Easy,3053,Classifying Triangles by Lengths,Database,50.73462724,['Database']
Medium,3054,Binary Tree Nodes,Database,78.98452349,['Database']
Medium,3055,Top Percentile Fraud,Database,58.66633367,['Database']
Medium,3056,Snaps Analysis,Database,58.33914864,['Database']
Hard,3057,Employees Project Allocation,Database,68.63636364,['Database']
Medium,3058,Friends With No Mutual Friends,Database,48.38780434,['Database']
Easy,3059,Find All Unique Email Domains,Database,70.31501495,['Database']
Hard,3060,User Activities within Time Bounds,Database,39.22245227,['Database']
Hard,3061,Calculate Trapping Rain Water,Database,81.87211602,['Database']
Easy,3062,Winner of the Linked List Game,Algorithms,78.62089508,['Linked List']
Easy,3063,Linked List Frequency,Algorithms,85.75639823,"['Hash Table', 'Linked List', 'Counting']"
Medium,3064,Guess the Number Using Bitwise Questions I,Algorithms,89.97093023,"['Bit Manipulation', 'Interactive']"
Easy,3065,Minimum Operations to Exceed Threshold Value I,Algorithms,85.92292587,['Array']
Medium,3066,Minimum Operations to Exceed Threshold Value II,Algorithms,45.72353718,"['Array', 'Heap (Priority Queue)', 'Simulation']"
Medium,3067,Count Pairs of Connectable Servers in a Weighted Tree Network,Algorithms,53.93406263,"['Array', 'Tree', 'Depth-First Search']"
Hard,3068,Find the Maximum Sum of Node Values,Algorithms,65.19290466,"['Array', 'Dynamic Programming', 'Greedy', 'Bit Manipulation', 'Tree', 'Sorting']"
Easy,3069,Distribute Elements Into Two Arrays I,Algorithms,72.84987137,"['Array', 'Simulation']"
Medium,3070,Count Submatrices with Top-Left Element and Sum Less Than k,Algorithms,57.07550009,"['Array', 'Matrix', 'Prefix Sum']"
Medium,3071,Minimum Operations to Write the Letter Y on a Grid,Algorithms,61.60823481,"['Array', 'Hash Table', 'Matrix', 'Counting']"
Hard,3072,Distribute Elements Into Two Arrays II,Algorithms,29.16734561,"['Array', 'Binary Indexed Tree', 'Segment Tree', 'Simulation']"
Medium,3073,Maximum Increasing Triplet Value,Algorithms,35.45454545,"['Array', 'Ordered Set']"
Easy,3074,Apple Redistribution into Boxes,Algorithms,68.03165823,"['Array', 'Greedy', 'Sorting']"
Medium,3075,Maximize Happiness of Selected Children,Algorithms,54.82569267,"['Array', 'Greedy', 'Sorting']"
Medium,3076,Shortest Uncommon Substring in an Array,Algorithms,47.90681467,"['Array', 'Hash Table', 'String', 'Trie']"
Hard,3077,Maximum Strength of K Disjoint Subarrays,Algorithms,26.71197837,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Medium,3078,Match Alphanumerical Pattern in Matrix I,Algorithms,63.79635449,"['Array', 'Hash Table', 'String', 'Matrix']"
Easy,3079,Find the Sum of Encrypted Integers,Algorithms,73.48982317,"['Array', 'Math']"
Medium,3080,Mark Elements on Array by Performing Queries,Algorithms,47.55079911,"['Array', 'Hash Table', 'Sorting', 'Heap (Priority Queue)', 'Simulation']"
Medium,3081,Replace Question Marks in String to Minimize Its Value,Algorithms,27.75477423,"['Hash Table', 'String', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Counting']"
Hard,3082,Find the Sum of the Power of All Subsequences,Algorithms,36.3998097,"['Array', 'Dynamic Programming']"
Easy,3083,Existence of a Substring in a String and Its Reverse,Algorithms,65.56821562,"['Hash Table', 'String']"
Medium,3084,Count Substrings Starting and Ending with Given Character,Algorithms,48.84807895,"['Math', 'String', 'Counting']"
Medium,3085,Minimum Deletions to Make String K-Special,Algorithms,44.41497258,"['Hash Table', 'String', 'Greedy', 'Sorting', 'Counting']"
Hard,3086,Minimum Moves to Pick K Ones,Algorithms,20.65032346,"['Array', 'Greedy', 'Sliding Window', 'Prefix Sum']"
Medium,3087,Find Trending Hashtags,Database,61.54814349,['Database']
Hard,3088,Make String Anti-palindrome,Algorithms,42.3255814,"['String', 'Greedy', 'Sorting', 'Counting Sort']"
Medium,3089,Find Bursty Behavior,Database,38.79270005,['Database']
Easy,3090,Maximum Length Substring With Two Occurrences,Algorithms,63.30600515,"['Hash Table', 'String', 'Sliding Window']"
Medium,3091,Apply Operations to Make Sum of Array Greater Than or Equal to k,Algorithms,43.29771699,"['Math', 'Greedy', 'Enumeration']"
Medium,3092,Most Frequent IDs,Algorithms,41.49521173,"['Array', 'Hash Table', 'Heap (Priority Queue)', 'Ordered Set']"
Hard,3093,Longest Common Suffix Queries,Algorithms,36.79599499,"['Array', 'String', 'Trie']"
Medium,3094,Guess the Number Using Bitwise Questions II,Algorithms,82.87179487,"['Bit Manipulation', 'Interactive']"
Easy,3095,Shortest Subarray With OR at Least K I,Algorithms,42.58787826,"['Array', 'Bit Manipulation', 'Sliding Window']"
Medium,3096,Minimum Levels to Gain More Points,Algorithms,38.97150821,"['Array', 'Prefix Sum']"
Medium,3097,Shortest Subarray With OR at Least K II,Algorithms,50.24491117,"['Array', 'Bit Manipulation', 'Sliding Window']"
Hard,3098,Find the Sum of Subsequence Powers,Algorithms,23.30418813,"['Array', 'Dynamic Programming', 'Sorting']"
Easy,3099,Harshad Number,Algorithms,83.08926616,['Math']
Medium,3100,Water Bottles II,Algorithms,62.12126191,"['Math', 'Simulation']"
Medium,3101,Count Alternating Subarrays,Algorithms,56.20163205,"['Array', 'Math']"
Hard,3102,Minimize Manhattan Distances,Algorithms,31.30882498,"['Array', 'Math', 'Geometry', 'Sorting', 'Ordered Set']"
Hard,3103,Find Trending Hashtags II ,Database,66.33778294,['Database']
Hard,3104,Find Longest Self-Contained Substring,Algorithms,58.60278499,"['Hash Table', 'String', 'Binary Search', 'Prefix Sum']"
Easy,3105,Longest Strictly Increasing or Strictly Decreasing Subarray,Algorithms,65.0806043,['Array']
Medium,3106,Lexicographically Smallest String After Operations With Constraint,Algorithms,62.17915258,"['String', 'Greedy']"
Medium,3107,Minimum Operations to Make Median of Array Equal to K,Algorithms,46.57174594,"['Array', 'Greedy', 'Sorting']"
Hard,3108,Minimum Cost Walk in Weighted Graph,Algorithms,68.54157479,"['Array', 'Bit Manipulation', 'Union Find', 'Graph']"
Medium,3109,Find the Index of Permutation,Algorithms,36.79354095,"['Array', 'Binary Search', 'Divide and Conquer', 'Binary Indexed Tree', 'Segment Tree', 'Merge Sort', 'Ordered Set']"
Easy,3110,Score of a String,Algorithms,91.93116346,['String']
Medium,3111,Minimum Rectangles to Cover Points,Algorithms,62.25133532,"['Array', 'Greedy', 'Sorting']"
Medium,3112,Minimum Time to Visit Disappearing Nodes,Algorithms,35.46596146,"['Array', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Hard,3113,Find the Number of Subarrays Where Boundary Elements Are Maximum,Algorithms,30.73655782,"['Array', 'Binary Search', 'Stack', 'Monotonic Stack']"
Easy,3114,Latest Time You Can Obtain After Replacing Characters,Algorithms,34.31718261,"['String', 'Enumeration']"
Medium,3115,Maximum Prime Difference,Algorithms,57.29819994,"['Array', 'Math', 'Number Theory']"
Hard,3116,Kth Smallest Amount With Single Denomination Combination,Algorithms,18.33333333,"['Array', 'Math', 'Binary Search', 'Bit Manipulation', 'Combinatorics', 'Number Theory']"
Hard,3117,Minimum Sum of Values by Dividing Array,Algorithms,26.96690674,"['Array', 'Binary Search', 'Dynamic Programming', 'Bit Manipulation', 'Segment Tree', 'Queue']"
Medium,3118,Friday Purchase III ,Database,56.89832249,['Database']
Medium,3119,Maximum Number of Potholes That Can Be Fixed,Algorithms,53.6101384,"['String', 'Greedy', 'Sorting']"
Easy,3120,Count the Number of Special Characters I,Algorithms,65.21339307,"['Hash Table', 'String']"
Medium,3121,Count the Number of Special Characters II,Algorithms,41.9300562,"['Hash Table', 'String']"
Medium,3122,Minimum Number of Operations to Satisfy Conditions,Algorithms,40.22567409,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,3123,Find Edges in Shortest Paths,Algorithms,45.4095558,"['Depth-First Search', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']"
Medium,3124,Find Longest Calls,Database,62.03673864,['Database']
Medium,3125,Maximum Number That Makes Result of Bitwise AND Zero,Algorithms,68.12804454,"['String', 'Greedy', 'Sorting']"
Medium,3126,Server Utilization Time,Database,61.4973262,['Database']
Easy,3127,Make a Square with the Same Color,Algorithms,51.74325657,"['Array', 'Matrix', 'Enumeration']"
Medium,3128,Right Triangles,Algorithms,46.83996715,"['Array', 'Hash Table', 'Math', 'Combinatorics', 'Counting']"
Medium,3129,Find All Possible Stable Binary Arrays I,Algorithms,26.1102178,"['Dynamic Programming', 'Prefix Sum']"
Hard,3130,Find All Possible Stable Binary Arrays II,Algorithms,25.76019949,"['Dynamic Programming', 'Prefix Sum']"
Easy,3131,Find the Integer Added to Array I,Algorithms,81.948414,['Array']
Medium,3132,Find the Integer Added to Array II,Algorithms,31.73687942,"['Array', 'Two Pointers', 'Sorting', 'Enumeration']"
Medium,3133,Minimum Array End,Algorithms,55.51286633,['Bit Manipulation']
Hard,3134,Find the Median of the Uniqueness Array,Algorithms,27.83024323,"['Array', 'Hash Table', 'Binary Search', 'Sliding Window']"
Medium,3135,Equalize Strings by Adding or Removing Characters at Ends,Algorithms,55,"['String', 'Binary Search', 'Dynamic Programming', 'Sliding Window', 'Hash Function']"
Easy,3136,Valid Word,Algorithms,38.59160607,['String']
Medium,3137,Minimum Number of Operations to Make Word K-Periodic,Algorithms,59.62246987,"['Hash Table', 'String', 'Counting']"
Medium,3138,Minimum Length of Anagram Concatenation,Algorithms,39.68342379,"['Hash Table', 'String', 'Counting']"
Hard,3139,Minimum Cost to Equalize Array,Algorithms,17.66021589,"['Array', 'Greedy', 'Enumeration']"
Medium,3140,Consecutive Available Seats II,Database,56.90640987,['Database']
Hard,3141,Maximum Hamming Distances,Algorithms,46.80284192,"['Array', 'Bit Manipulation', 'Breadth-First Search']"
Easy,3142,Check if Grid Satisfies Conditions,Algorithms,43.42245383,"['Array', 'Matrix']"
Medium,3143,Maximum Points Inside the Square,Algorithms,38.08018961,"['Array', 'Hash Table', 'String', 'Binary Search', 'Sorting']"
Medium,3144,Minimum Substring Partition of Equal Character Frequency,Algorithms,38.88256263,"['Hash Table', 'String', 'Dynamic Programming', 'Counting']"
Hard,3145,Find Products of Elements of Big Array,Algorithms,21.58019907,"['Array', 'Binary Search', 'Bit Manipulation']"
Easy,3146,Permutation Difference between Two Strings,Algorithms,87.16074053,"['Hash Table', 'String']"
Medium,3147,Taking Maximum Energy From the Mystic Dungeon,Algorithms,40.99093331,"['Array', 'Prefix Sum']"
Medium,3148,Maximum Difference Score in a Grid,Algorithms,46.62126648,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,3149,Find the Minimum Cost Array Permutation,Algorithms,23.55610561,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Easy,3150,Invalid Tweets II,Database,86.45343368,['Database']
Easy,3151,Special Array I,Algorithms,81.84174564,['Array']
Medium,3152,Special Array II,Algorithms,45.6648839,"['Array', 'Binary Search', 'Prefix Sum']"
Medium,3153,Sum of Digit Differences of All Pairs,Algorithms,42.3862813,"['Array', 'Hash Table', 'Math', 'Counting']"
Hard,3154,Find Number of Ways to Reach the K-th Stair,Algorithms,35.99216044,"['Math', 'Dynamic Programming', 'Bit Manipulation', 'Memoization', 'Combinatorics']"
Medium,3155,Maximum Number of Upgradable Servers,Algorithms,40.80498484,"['Array', 'Math', 'Binary Search']"
Hard,3156,Employee Task Duration and Concurrent Tasks,Database,43.79562044,['Database']
Medium,3157,Find the Level of Tree with Minimum Sum,Algorithms,68.50621208,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Binary Tree']"
Easy,3158,Find the XOR of Numbers Which Appear Twice,Algorithms,77.54599338,"['Array', 'Hash Table', 'Bit Manipulation']"
Medium,3159,Find Occurrences of an Element in an Array,Algorithms,72.41962505,"['Array', 'Hash Table']"
Medium,3160,Find the Number of Distinct Colors Among the Balls,Algorithms,54.2068565,"['Array', 'Hash Table', 'Simulation']"
Hard,3161,Block Placement Queries,Algorithms,16.59028081,"['Array', 'Binary Search', 'Binary Indexed Tree', 'Segment Tree']"
Easy,3162,Find the Number of Good Pairs I,Algorithms,85.55517733,"['Array', 'Hash Table']"
Medium,3163,String Compression III,Algorithms,66.79188816,['String']
Medium,3164,Find the Number of Good Pairs II,Algorithms,26.01518403,"['Array', 'Hash Table']"
Hard,3165,Maximum Sum of Subsequence With Non-adjacent Elements,Algorithms,15.81537612,"['Array', 'Divide and Conquer', 'Dynamic Programming', 'Segment Tree']"
Medium,3166,Calculate Parking Fees and Duration,Database,52.40213523,['Database']
Medium,3167,Better Compression of String,,,
Easy,3168,Minimum Number of Chairs in a Waiting Room,Algorithms,78.26163367,"['String', 'Simulation']"
Medium,3169,Count Days Without Meetings,Algorithms,47.89163366,"['Array', 'Sorting']"
Medium,3170,Lexicographically Minimum String After Removing Stars,Algorithms,35.17260485,"['Hash Table', 'String', 'Stack', 'Greedy', 'Heap (Priority Queue)']"
Hard,3171,Find Subarray With Bitwise OR Closest to K,Algorithms,29.52362409,"['Array', 'Binary Search', 'Bit Manipulation', 'Segment Tree']"
Easy,3172,Second Day Verification,Database,68.36788942,['Database']
Easy,3173,Bitwise OR of Adjacent Elements,Algorithms,95.26066351,"['Array', 'Bit Manipulation']"
Easy,3174,Clear Digits,Algorithms,82.5645985,"['String', 'Stack', 'Simulation']"
Medium,3175,Find The First Player to win K Games in a Row,Algorithms,39.34902542,"['Array', 'Simulation']"
Medium,3176,Find the Maximum Length of a Good Subsequence I,Algorithms,31.42246022,"['Array', 'Hash Table', 'Dynamic Programming']"
Hard,3177,Find the Maximum Length of a Good Subsequence II,Algorithms,23.85928761,"['Array', 'Hash Table', 'Dynamic Programming']"
Easy,3178,Find the Child Who Has the Ball After K Seconds,Algorithms,61.46997147,"['Math', 'Simulation']"
Medium,3179,Find the N-th Value After K Seconds,Algorithms,53.62904267,"['Array', 'Math', 'Simulation', 'Combinatorics', 'Prefix Sum']"
Medium,3180,Maximum Total Reward Using Operations I,Algorithms,29.83777892,"['Array', 'Dynamic Programming']"
Hard,3181,Maximum Total Reward Using Operations II,Algorithms,20.5487228,"['Array', 'Dynamic Programming', 'Bit Manipulation']"
Medium,3182,Find Top Scoring Students,Database,49.28956394,['Database']
Medium,3183,The Number of Ways to Make the Sum,Algorithms,52.15550423,"['Array', 'Dynamic Programming']"
Easy,3184,Count Pairs That Form a Complete Day I,Algorithms,77.4497091,"['Array', 'Hash Table', 'Counting']"
Medium,3185,Count Pairs That Form a Complete Day II,Algorithms,42.93479838,"['Array', 'Hash Table', 'Counting']"
Medium,3186,Maximum Total Damage With Spell Casting,Algorithms,27.57087059,"['Array', 'Hash Table', 'Two Pointers', 'Binary Search', 'Dynamic Programming', 'Sorting', 'Counting']"
Hard,3187,Peaks in Array,Algorithms,25.67014194,"['Array', 'Binary Indexed Tree', 'Segment Tree']"
Hard,3188,Find Top Scoring Students II,Database,39.08787011,['Database']
Medium,3189,Minimum Moves to Get a Peaceful Board,Algorithms,75.99797023,"['Array', 'Greedy', 'Sorting', 'Counting Sort']"
Easy,3190,Find Minimum Operations to Make All Elements Divisible by Three,Algorithms,88.73913673,"['Array', 'Math']"
Medium,3191,Minimum Operations to Make Binary Array Elements Equal to One I,Algorithms,80.54266736,"['Array', 'Bit Manipulation', 'Queue', 'Sliding Window', 'Prefix Sum']"
Medium,3192,Minimum Operations to Make Binary Array Elements Equal to One II,Algorithms,63.86778299,"['Array', 'Dynamic Programming', 'Greedy']"
Hard,3193,Count the Number of Inversions,Algorithms,27.65309735,"['Array', 'Dynamic Programming']"
Easy,3194,Minimum Average of Smallest and Largest Elements,Algorithms,84.70803271,"['Array', 'Two Pointers', 'Sorting']"
Medium,3195,Find the Minimum Area to Cover All Ones I,Algorithms,68.87178673,"['Array', 'Matrix']"
Medium,3196,Maximize Total Cost of Alternating Subarrays,Algorithms,28.56287645,"['Array', 'Dynamic Programming']"
Hard,3197,Find the Minimum Area to Cover All Ones II,Algorithms,28.54418655,"['Array', 'Matrix', 'Enumeration']"
Easy,3198,Find Cities in Each State,Database,82.58336031,['Database']
Easy,3199,Count Triplets with Even XOR Set Bits I,Algorithms,83.10940499,"['Array', 'Bit Manipulation']"
Easy,3200,Maximum Height of a Triangle,Algorithms,43.15080818,"['Array', 'Enumeration']"
Medium,3201,Find the Maximum Length of Valid Subsequence I,Algorithms,37.59965212,"['Array', 'Dynamic Programming']"
Medium,3202,Find the Maximum Length of Valid Subsequence II,Algorithms,39.42157002,"['Array', 'Dynamic Programming']"
Hard,3203,Find Minimum Diameter After Merging Two Trees,Algorithms,57.55585473,"['Tree', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Medium,3204,Bitwise User Permissions Analysis,Database,93.40659341,['Database']
Medium,3205,Maximum Array Hopping Score I,Algorithms,77.53945771,"['Array', 'Dynamic Programming', 'Stack', 'Greedy', 'Monotonic Stack']"
Easy,3206,Alternating Groups I,Algorithms,67.52316765,"['Array', 'Sliding Window']"
Medium,3207,Maximum Points After Enemy Battles,,,
Medium,3208,Alternating Groups II,Algorithms,59.87436996,"['Array', 'Sliding Window']"
Hard,3209,Number of Subarrays With AND Value of K,Algorithms,33.69097544,"['Array', 'Binary Search', 'Bit Manipulation', 'Segment Tree']"
Easy,3210,Find the Encrypted String,Algorithms,67.84800917,['String']
Medium,3211,Generate Binary Strings Without Adjacent Zeros,Algorithms,87.04117799,"['String', 'Backtracking', 'Bit Manipulation']"
Medium,3212,Count Submatrices With Equal Frequency of X and Y,Algorithms,50.38463905,"['Array', 'Matrix', 'Prefix Sum']"
Hard,3213,Construct String with Minimum Cost,Algorithms,19.19731303,"['Array', 'String', 'Dynamic Programming', 'Suffix Array']"
Hard,3214,Year on Year Growth Rate,Database,53.13295976,['Database']
Medium,3215,Count Triplets with Even XOR Set Bits II,Algorithms,59.94475138,"['Array', 'Bit Manipulation']"
Easy,3216,Lexicographically Smallest String After a Swap,Algorithms,53.52771356,"['String', 'Greedy']"
Medium,3217,Delete Nodes From Linked List Present in Array,Algorithms,67.78968356,"['Array', 'Hash Table', 'Linked List']"
Medium,3218,Minimum Cost for Cutting Cake I,Algorithms,57.52474444,"['Array', 'Dynamic Programming', 'Greedy', 'Sorting']"
Hard,3219,Minimum Cost for Cutting Cake II,Algorithms,54.58181015,"['Array', 'Greedy', 'Sorting']"
Medium,3220,Odd and Even Transactions,Database,69.50882771,['Database']
Medium,3221,Maximum Array Hopping Score II,Algorithms,56.88010899,"['Array', 'Stack', 'Greedy', 'Monotonic Stack']"
Easy,3222,Find the Winning Player in Coin Game,Algorithms,51.68800931,"['Math', 'Simulation', 'Game Theory']"
Medium,3223,Minimum Length of String After Operations,Algorithms,74.92968984,"['Hash Table', 'String', 'Counting']"
Medium,3224,Minimum Array Changes to Make Differences Equal,Algorithms,23.22171554,"['Array', 'Hash Table', 'Prefix Sum']"
Hard,3225,Maximum Score From Grid Operations,Algorithms,24.01621515,"['Array', 'Dynamic Programming', 'Matrix', 'Prefix Sum']"
Easy,3226,Number of Bit Changes to Make Two Integers Equal,Algorithms,62.55105204,['Bit Manipulation']
Medium,3227,Vowels Game in a String,Algorithms,61.99643284,"['Math', 'String', 'Brainteaser', 'Game Theory']"
Medium,3228,Maximum Number of Operations to Move Ones to the End,Algorithms,53.04389028,"['String', 'Greedy', 'Counting']"
Hard,3229,Minimum Operations to Make Array Equal to Target,Algorithms,38.77471214,"['Array', 'Dynamic Programming', 'Stack', 'Greedy', 'Monotonic Stack']"
Medium,3230,Customer Purchasing Behavior Analysis,Database,37.18970622,['Database']
Hard,3231,Minimum Number of Increasing Subsequence to Be Removed,Algorithms,42.59259259,"['Array', 'Binary Search']"
Easy,3232,Find if Digit Game Can Be Won,Algorithms,81.29671205,"['Array', 'Math']"
Medium,3233,Find the Count of Numbers Which Are Not Special,Algorithms,26.88587859,"['Array', 'Math', 'Number Theory']"
Medium,3234,Count the Number of Substrings With Dominant Ones,Algorithms,16.69027064,"['String', 'Sliding Window', 'Enumeration']"
Hard,3235,Check if the Rectangle Corner Is Reachable,Algorithms,25.94530662,"['Array', 'Math', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Geometry']"
Hard,3236,CEO Subordinate Hierarchy,Database,72.57142857,['Database']
Medium,3237,Alt and Tab Simulation,Algorithms,48.58174317,"['Array', 'Hash Table', 'Simulation']"
Easy,3238,Find the Number of Winning Players,Algorithms,59.64709286,"['Array', 'Hash Table', 'Counting']"
Medium,3239,Minimum Number of Flips to Make Binary Grid Palindromic I,Algorithms,74.22753247,"['Array', 'Two Pointers', 'Matrix']"
Medium,3240,Minimum Number of Flips to Make Binary Grid Palindromic II,Algorithms,24.31332874,"['Array', 'Two Pointers', 'Matrix']"
Hard,3241,Time Taken to Mark All Nodes,Algorithms,24.08995617,"['Dynamic Programming', 'Tree', 'Depth-First Search', 'Graph']"
Easy,3242,Design Neighbor Sum Service,Algorithms,75.55068126,"['Array', 'Hash Table', 'Design', 'Matrix', 'Simulation']"
Medium,3243,Shortest Distance After Road Addition Queries I,Algorithms,61.85057618,"['Array', 'Breadth-First Search', 'Graph']"
Hard,3244,Shortest Distance After Road Addition Queries II,Algorithms,25.62097263,"['Array', 'Greedy', 'Graph', 'Ordered Set']"
Hard,3245,Alternating Groups III,Algorithms,14.91300746,"['Array', 'Binary Indexed Tree']"
Easy,3246,Premier League Table Ranking,Database,81.24784557,['Database']
Medium,3247,Number of Subsequences with Odd Sum,Algorithms,47.33412322,"['Array', 'Math', 'Dynamic Programming', 'Combinatorics']"
Easy,3248,Snake in Matrix,Algorithms,81.45370417,"['Array', 'String', 'Simulation']"
Medium,3249,Count the Number of Good Nodes,Algorithms,54.55486542,"['Tree', 'Depth-First Search']"
Hard,3250,Find the Count of Monotonic Pairs I,Algorithms,46.10381361,"['Array', 'Math', 'Dynamic Programming', 'Combinatorics', 'Prefix Sum']"
Hard,3251,Find the Count of Monotonic Pairs II,Algorithms,22.79993381,"['Array', 'Math', 'Dynamic Programming', 'Combinatorics', 'Prefix Sum']"
Medium,3252,Premier League Table Ranking II,Database,58.78070974,['Database']
Medium,3253,Construct String with Minimum Cost (Easy),Algorithms,58.18686401,[]
Medium,3254,Find the Power of K-Size Subarrays I,Algorithms,62.49945933,"['Array', 'Sliding Window']"
Medium,3255,Find the Power of K-Size Subarrays II,Algorithms,30.33415568,"['Array', 'Sliding Window']"
Hard,3256,Maximum Value Sum by Placing Three Rooks I,Algorithms,15.06944568,"['Array', 'Dynamic Programming', 'Matrix', 'Enumeration']"
Hard,3257,Maximum Value Sum by Placing Three Rooks II,Algorithms,26.29437276,"['Array', 'Dynamic Programming', 'Matrix', 'Enumeration']"
Easy,3258,Count Substrings That Satisfy K-Constraint I,Algorithms,77.79009849,"['String', 'Sliding Window']"
Medium,3259,Maximum Energy Boost From Two Drinks,Algorithms,49.26843205,"['Array', 'Dynamic Programming']"
Hard,3260,Find the Largest Palindrome Divisible by K,Algorithms,15.25752006,"['Math', 'String', 'Dynamic Programming', 'Greedy', 'Number Theory']"
Hard,3261,Count Substrings That Satisfy K-Constraint II,Algorithms,21.28179399,"['Array', 'String', 'Binary Search', 'Sliding Window', 'Prefix Sum']"
Medium,3262,Find Overlapping Shifts,Database,61.08108108,['Database']
Easy,3263,Convert Doubly Linked List to Array I,Algorithms,94.95168277,"['Array', 'Linked List', 'Doubly-Linked List']"
Easy,3264,Final Array State After K Multiplication Operations I,Algorithms,87.06186491,"['Array', 'Math', 'Heap (Priority Queue)', 'Simulation']"
Medium,3265,Count Almost Equal Pairs I,Algorithms,37.45112078,"['Array', 'Hash Table', 'Sorting', 'Counting', 'Enumeration']"
Hard,3266,Final Array State After K Multiplication Operations II,Algorithms,11.71757946,"['Array', 'Heap (Priority Queue)', 'Simulation']"
Hard,3267,Count Almost Equal Pairs II,Algorithms,26.78095238,"['Array', 'Hash Table', 'Sorting', 'Counting', 'Enumeration']"
Hard,3268,Find Overlapping Shifts II,Database,59.11401598,['Database']
Hard,3269,Constructing Two Increasing Arrays,Algorithms,62.45954693,"['Array', 'Dynamic Programming']"
Easy,3270,Find the Key of the Numbers,Algorithms,75.95487112,['Math']
Medium,3271,Hash Divided String,Algorithms,82.95255168,"['String', 'Simulation']"
Hard,3272,Find the Count of Good Integers,Algorithms,69.7269345,"['Hash Table', 'Math', 'Combinatorics', 'Enumeration']"
Hard,3273,Minimum Amount of Damage Dealt to Bob,Algorithms,37.78358186,"['Array', 'Greedy', 'Sorting']"
Easy,3274,Check if Two Chessboard Squares Have the Same Color,Algorithms,71.80048462,"['Math', 'String']"
Medium,3275,K-th Nearest Obstacle Queries,Algorithms,47.99561315,"['Array', 'Heap (Priority Queue)']"
Hard,3276,Select Cells in Grid With Maximum Score,Algorithms,14.31844521,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Matrix', 'Bitmask']"
Hard,3277,Maximum XOR Score Subarray Queries,Algorithms,41.92212826,"['Array', 'Dynamic Programming']"
Medium,3278,Find Candidates for Data Scientist Position II,Database,43.21148825,['Database']
Hard,3279,Maximum Total Area Occupied by Pistons,Algorithms,55.19379845,"['Array', 'Hash Table', 'String', 'Simulation', 'Counting', 'Prefix Sum']"
Easy,3280,Convert Date to Binary,Algorithms,88.21458575,"['Math', 'String']"
Medium,3281,Maximize Score of Numbers in Ranges,Algorithms,34.50205389,"['Array', 'Binary Search', 'Greedy', 'Sorting']"
Medium,3282,Reach End of Array With Max Score,Algorithms,32.35063182,"['Array', 'Greedy']"
Hard,3283,Maximum Number of Moves to Kill All Pawns,Algorithms,31.98644555,"['Array', 'Math', 'Bit Manipulation', 'Breadth-First Search', 'Game Theory', 'Bitmask']"
Medium,3284,Sum of Consecutive Subarrays,Algorithms,41.38851802,"['Array', 'Two Pointers', 'Dynamic Programming']"
Easy,3285,Find Indices of Stable Mountains,Algorithms,85.99285692,['Array']
Medium,3286,Find a Safe Walk Through a Grid,Algorithms,30.27610645,"['Array', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']"
Hard,3287,Find the Maximum Sequence Value of Array,Algorithms,18.44683298,"['Array', 'Dynamic Programming', 'Bit Manipulation']"
Hard,3288,Length of the Longest Increasing Path,Algorithms,16.92269309,"['Array', 'Binary Search', 'Sorting']"
Easy,3289,The Two Sneaky Numbers of Digitville,Algorithms,88.31038125,"['Array', 'Hash Table', 'Math']"
Medium,3290,Maximum Multiplication Score,Algorithms,40.93640067,"['Array', 'Dynamic Programming']"
Medium,3291,Minimum Number of Valid Strings to Form Target I,Algorithms,19.91249738,"['Array', 'String', 'Binary Search', 'Dynamic Programming', 'Trie', 'Segment Tree', 'Rolling Hash', 'String Matching', 'Hash Function']"
Hard,3292,Minimum Number of Valid Strings to Form Target II,Algorithms,18.11240456,"['Array', 'String', 'Binary Search', 'Dynamic Programming', 'Segment Tree', 'Rolling Hash', 'String Matching', 'Hash Function']"
Medium,3293,Calculate Product Final Price,Database,80.19709057,['Database']
Medium,3294,Convert Doubly Linked List to Array II,Algorithms,81.43347312,"['Array', 'Linked List', 'Doubly-Linked List']"
Medium,3295,Report Spam Message,Algorithms,47.4257857,"['Array', 'Hash Table', 'String']"
Medium,3296,Minimum Number of Seconds to Make Mountain Height Zero,Algorithms,35.82749895,"['Array', 'Math', 'Binary Search', 'Greedy', 'Heap (Priority Queue)']"
Medium,3297,Count Substrings That Can Be Rearranged to Contain a String I,Algorithms,41.28651054,"['Hash Table', 'String', 'Sliding Window']"
Hard,3298,Count Substrings That Can Be Rearranged to Contain a String II,Algorithms,55.27954862,"['Hash Table', 'String', 'Sliding Window']"
Hard,3299,Sum of Consecutive Subsequences,Algorithms,40.30837004,"['Array', 'Hash Table', 'Dynamic Programming']"
Easy,3300,Minimum Element After Replacement With Digit Sum,Algorithms,83.40039188,"['Array', 'Math']"
Medium,3301,Maximize the Total Height of Unique Towers,Algorithms,36.24795824,"['Array', 'Greedy', 'Sorting']"
Medium,3302,Find the Lexicographically Smallest Valid Sequence,Algorithms,20.32391235,"['Two Pointers', 'String', 'Dynamic Programming', 'Greedy']"
Hard,3303,Find the Occurrence of First Almost Equal Substring,Algorithms,13.64364488,"['String', 'String Matching']"
Easy,3304,Find the K-th Character in String Game I,Algorithms,73.06478395,"['Math', 'Bit Manipulation', 'Recursion', 'Simulation']"
Medium,3305,Count of Substrings Containing Every Vowel and K Consonants I,Algorithms,41.0622858,"['Hash Table', 'String', 'Sliding Window']"
Medium,3306,Count of Substrings Containing Every Vowel and K Consonants II,Algorithms,40.72780204,"['Hash Table', 'String', 'Sliding Window']"
Hard,3307,Find the K-th Character in String Game II,Algorithms,26.97329726,"['Math', 'Bit Manipulation', 'Recursion']"
Medium,3308,Find Top Performing Driver,,,
Medium,3309,Maximum Possible Number by Binary Concatenation,Algorithms,64.97183742,"['Array', 'Bit Manipulation', 'Enumeration']"
Medium,3310,Remove Methods From Project,Algorithms,49.22408958,"['Depth-First Search', 'Breadth-First Search', 'Graph']"
Hard,3311,Construct 2D Grid Matching Graph Layout,Algorithms,27.47656813,"['Array', 'Hash Table', 'Graph', 'Matrix']"
Hard,3312,Sorted GCD Pair Queries,Algorithms,19.62788369,"['Array', 'Hash Table', 'Math', 'Binary Search', 'Combinatorics', 'Counting', 'Number Theory', 'Prefix Sum']"
Hard,3313,Find the Last Marked Nodes in Tree,Algorithms,51.82724252,"['Tree', 'Depth-First Search']"
Easy,3314,Construct the Minimum Bitwise Array I,Algorithms,73.84736017,"['Array', 'Bit Manipulation']"
Medium,3315,Construct the Minimum Bitwise Array II,Algorithms,34.68217194,"['Array', 'Bit Manipulation']"
Medium,3316,Find Maximum Removals From Source String,Algorithms,37.79108205,"['Array', 'Hash Table', 'Two Pointers', 'String', 'Dynamic Programming']"
Hard,3317,Find the Number of Possible Ways for an Event,Algorithms,32.91486291,"['Math', 'Dynamic Programming', 'Combinatorics']"
Easy,3318,Find X-Sum of All K-Long Subarrays I,Algorithms,63.52966283,"['Array', 'Hash Table', 'Sliding Window', 'Heap (Priority Queue)']"
Medium,3319,K-th Largest Perfect Subtree Size in Binary Tree,Algorithms,60.83859149,"['Tree', 'Depth-First Search', 'Sorting', 'Binary Tree']"
Hard,3320,Count The Number of Winning Sequences,Algorithms,30.9739709,"['String', 'Dynamic Programming']"
Hard,3321,Find X-Sum of All K-Long Subarrays II,Algorithms,15.77981651,"['Array', 'Hash Table', 'Sliding Window', 'Heap (Priority Queue)']"
Medium,3322,Premier League Table Ranking III,Database,71.58208955,['Database']
Medium,3323,Minimize Connected Groups by Inserting Interval,Algorithms,50.32017076,"['Array', 'Binary Search', 'Sliding Window', 'Sorting']"
Medium,3324,Find the Sequence of Strings Appeared on the Screen,Algorithms,79.09422351,"['String', 'Simulation']"
Medium,3325,Count Substrings With K-Frequency Characters I,Algorithms,54.39093484,"['Hash Table', 'String', 'Sliding Window']"
Medium,3326,Minimum Division Operations to Make Array Non Decreasing,Algorithms,28.47120955,"['Array', 'Math', 'Greedy', 'Number Theory']"
Hard,3327,Check if DFS Strings Are Palindromes,Algorithms,17.81246906,"['Array', 'Hash Table', 'String', 'Tree', 'Depth-First Search', 'Hash Function']"
Medium,3328,Find Cities in Each State II,Database,69.8630137,['Database']
Hard,3329,Count Substrings With K-Frequency Characters II,Algorithms,70.47511312,"['Hash Table', 'String', 'Sliding Window']"
Easy,3330,Find the Original Typed String I,Algorithms,56.62954477,['String']
Medium,3331,Find Subtree Sizes After Changes,Algorithms,54.41951079,"['Array', 'Hash Table', 'String', 'Tree', 'Depth-First Search']"
Medium,3332,Maximum Points Tourist Can Earn,Algorithms,45.87521539,"['Array', 'Dynamic Programming', 'Matrix']"
Hard,3333,Find the Original Typed String II,Algorithms,14.61822462,"['String', 'Dynamic Programming', 'Prefix Sum']"
Medium,3334,Find the Maximum Factor Score of Array,Algorithms,40.27449904,"['Array', 'Math', 'Number Theory']"
Medium,3335,Total Characters in String After Transformations I,Algorithms,45.86968605,"['Hash Table', 'Math', 'String', 'Dynamic Programming', 'Counting']"
Hard,3336,Find the Number of Subsequences With Equal GCD,Algorithms,28.55649961,"['Array', 'Math', 'Dynamic Programming', 'Number Theory']"
Hard,3337,Total Characters in String After Transformations II,Algorithms,58.62210095,"['Hash Table', 'Math', 'String', 'Dynamic Programming', 'Counting']"
Medium,3338,Second Highest Salary II,Database,89.45720251,['Database']
Medium,3339,Find the Number of K-Even Arrays,Algorithms,56,['Dynamic Programming']
Easy,3340,Check Balanced String,Algorithms,80.588269,['String']
Medium,3341,Find Minimum Time to Reach Last Room I,Algorithms,55.88554214,"['Array', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']"
Medium,3342,Find Minimum Time to Reach Last Room II,Algorithms,68.74556278,"['Array', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']"
Hard,3343,Count Number of Balanced Permutations,Algorithms,49.71725994,"['Math', 'String', 'Dynamic Programming', 'Combinatorics']"
Medium,3344,Maximum Sized Array,Algorithms,51.17096019,"['Binary Search', 'Bit Manipulation']"
Easy,3345,Smallest Divisible Digit Product I,Algorithms,63.76521367,"['Math', 'Enumeration']"
Medium,3346,Maximum Frequency of an Element After Performing Operations I,Algorithms,20.88151994,"['Array', 'Binary Search', 'Sliding Window', 'Sorting', 'Prefix Sum']"
Hard,3347,Maximum Frequency of an Element After Performing Operations II,Algorithms,37.23737916,"['Array', 'Binary Search', 'Sliding Window', 'Sorting', 'Prefix Sum']"
Hard,3348,Smallest Divisible Digit Product II,Algorithms,10.20753267,"['Math', 'String', 'Backtracking', 'Greedy', 'Number Theory']"
Easy,3349,Adjacent Increasing Subarrays Detection I,Algorithms,42.84795309,['Array']
Medium,3350,Adjacent Increasing Subarrays Detection II,Algorithms,40.83877862,"['Array', 'Binary Search']"
Hard,3351,Sum of Good Subsequences,Algorithms,29.58161461,"['Array', 'Hash Table', 'Dynamic Programming']"
Hard,3352,Count K-Reducible Numbers Less Than N,Algorithms,24.77828541,"['Math', 'String', 'Dynamic Programming', 'Combinatorics']"
Easy,3353,Minimum Total Operations,Algorithms,63.87575962,['Array']
Easy,3354,Make Array Elements Equal to Zero,Algorithms,55.45212221,"['Array', 'Simulation', 'Prefix Sum']"
Medium,3355,Zero Array Transformation I,Algorithms,46.37884034,"['Array', 'Prefix Sum']"
Medium,3356,Zero Array Transformation II,Algorithms,43.69791836,"['Array', 'Binary Search', 'Prefix Sum']"
Hard,3357,Minimize the Maximum Adjacent Element Difference,Algorithms,15.19556211,"['Array', 'Binary Search', 'Greedy']"
Easy,3358,Books with NULL Ratings,Database,90.01670844,['Database']
Hard,3359,Find Sorted Submatrices With Maximum Element at Most K,Algorithms,49.53959484,"['Array', 'Stack', 'Matrix', 'Monotonic Stack']"
Easy,3360,Stone Removal Game,Algorithms,41.48998956,"['Math', 'Simulation']"
Medium,3361,Shift Distance Between Two Strings,Algorithms,52.54820937,"['Array', 'String', 'Prefix Sum']"
Medium,3362,Zero Array Transformation III,Algorithms,26.77806001,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Prefix Sum']"
Hard,3363,Find the Maximum Number of Fruits Collected,Algorithms,39.52885482,"['Array', 'Dynamic Programming', 'Matrix']"
Easy,3364,Minimum Positive Sum Subarray ,Algorithms,44.74037955,"['Array', 'Sliding Window', 'Prefix Sum']"
Medium,3365,Rearrange K Substrings to Form Target String,Algorithms,55.94608997,"['Hash Table', 'String', 'Sorting']"
Medium,3366,Minimum Array Sum,Algorithms,29.33132049,"['Array', 'Dynamic Programming']"
Hard,3367,Maximize Sum of Weights after Edge Removals,Algorithms,28.70568133,"['Dynamic Programming', 'Tree', 'Depth-First Search']"
Hard,3368,First Letter Capitalization,Database,88.30845771,['Database']
Hard,3369,Design an Array Statistics Tracker ,Algorithms,34.20873124,"['Hash Table', 'Binary Search', 'Design', 'Queue', 'Heap (Priority Queue)', 'Data Stream', 'Ordered Set']"
Easy,3370,Smallest Number With All Set Bits,Algorithms,75.78528909,"['Math', 'Bit Manipulation']"
Medium,3371,Identify the Largest Outlier in an Array,Algorithms,35.33199009,"['Array', 'Hash Table', 'Counting', 'Enumeration']"
Medium,3372,Maximize the Number of Target Nodes After Connecting Trees I,Algorithms,48.04180144,"['Tree', 'Depth-First Search', 'Breadth-First Search']"
Hard,3373,Maximize the Number of Target Nodes After Connecting Trees II,Algorithms,53.81742378,"['Tree', 'Depth-First Search', 'Breadth-First Search']"
Hard,3374,First Letter Capitalization II,Database,75.59849521,['Database']
Easy,3375,Minimum Operations to Make Array Values Equal to K,Algorithms,73.46832148,"['Array', 'Hash Table']"
Medium,3376,Minimum Time to Break Locks I,Algorithms,30.07912829,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Depth-First Search', 'Bitmask']"
Medium,3377,Digit Operations to Make Two Integers Equal,Algorithms,26.58001387,"['Math', 'Graph', 'Heap (Priority Queue)', 'Number Theory', 'Shortest Path']"
Hard,3378,Count Connected Components in LCM Graph,Algorithms,27.98768121,"['Array', 'Hash Table', 'Math', 'Union Find', 'Number Theory']"
Easy,3379,Transformed Array,Algorithms,56.41847246,"['Array', 'Simulation']"
Medium,3380,Maximum Area Rectangle With Point Constraints I,Algorithms,49.39831528,"['Array', 'Math', 'Binary Indexed Tree', 'Segment Tree', 'Geometry', 'Sorting', 'Enumeration']"
Medium,3381,Maximum Subarray Sum With Length Divisible by K,Algorithms,26.80259033,"['Array', 'Hash Table', 'Prefix Sum']"
Hard,3382,Maximum Area Rectangle With Point Constraints II,Algorithms,20.33513206,"['Array', 'Math', 'Binary Indexed Tree', 'Segment Tree', 'Geometry', 'Sorting']"
Hard,3383,Minimum Runes to Add to Cast Spell,Algorithms,43.54545455,"['Array', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph', 'Topological Sort']"
Hard,3384,Team Dominance by Pass Success,Database,76.89320388,['Database']
Hard,3385,Minimum Time to Break Locks II,Algorithms,45.24793388,"['Array', 'Depth-First Search', 'Graph']"
Easy,3386,Button with Longest Push Time,Algorithms,40.4849479,['Array']
Medium,3387,Maximize Amount After Two Days of Conversions,Algorithms,58.34470214,"['Array', 'String', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Medium,3388,Count Beautiful Splits in an Array,Algorithms,15.22468321,"['Array', 'Dynamic Programming']"
Hard,3389,Minimum Operations to Make Character Frequencies Equal,Algorithms,24.7558991,"['Hash Table', 'String', 'Dynamic Programming', 'Counting', 'Enumeration']"
Hard,3390,Longest Team Pass Streak,Database,42.32851986,['Database']
Medium,3391,Design a 3D Binary Matrix with Efficient Layer Tracking,Algorithms,66.13102596,"['Array', 'Hash Table', 'Design', 'Heap (Priority Queue)', 'Matrix', 'Ordered Set']"
Easy,3392,Count Subarrays of Length Three With a Condition,Algorithms,62.02188992,['Array']
Medium,3393,Count Paths With the Given XOR Value,Algorithms,39.50007452,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Matrix']"
Medium,3394,Check if Grid can be Cut into Sections,Algorithms,68.40916974,"['Array', 'Sorting']"
Hard,3395,Subsequences with a Unique Middle Mode I,Algorithms,16.81307098,"['Array', 'Hash Table', 'Math', 'Combinatorics']"
Easy,3396,Minimum Number of Operations to Make Elements in Array Distinct,Algorithms,71.55940315,"['Array', 'Hash Table']"
Medium,3397,Maximum Number of Distinct Elements After Operations,Algorithms,30.89078888,"['Array', 'Greedy', 'Sorting']"
Hard,3398,Smallest Substring With Identical Characters I,Algorithms,19.00636003,"['Array', 'Binary Search', 'Enumeration']"
Hard,3399,Smallest Substring With Identical Characters II,Algorithms,40.30903831,"['String', 'Binary Search']"
Medium,3400,Maximum Number of Matching Indices After Right Shifts,Algorithms,84.25998434,"['Array', 'Two Pointers', 'Simulation']"
Hard,3401,Find Circular Gift Exchange Chains,Database,54.53460621,['Database']
Easy,3402,Minimum Operations to Make Columns Strictly Increasing,Algorithms,71.98330041,"['Array', 'Greedy', 'Matrix']"
Medium,3403,Find the Lexicographically Largest String From the Box I,Algorithms,23.54370966,"['Two Pointers', 'String', 'Enumeration']"
Medium,3404,Count Special Subsequences,Algorithms,28.58462249,"['Array', 'Hash Table', 'Math', 'Enumeration']"
Hard,3405,Count the Number of Arrays with K Matching Adjacent Elements,Algorithms,31.26687945,"['Math', 'Combinatorics']"
Hard,3406,Find the Lexicographically Largest String From the Box II,Algorithms,49.86263736,"['Two Pointers', 'String']"
Easy,3407,Substring Matching Pattern,Algorithms,26.32177322,"['String', 'String Matching']"
Medium,3408,Design Task Manager,Algorithms,33.96945626,"['Hash Table', 'Design', 'Heap (Priority Queue)', 'Ordered Set']"
Medium,3409,Longest Subsequence With Decreasing Adjacent Difference,Algorithms,14.34798301,"['Array', 'Dynamic Programming']"
Hard,3410,Maximize Subarray Sum After Removing All Occurrences of One Element,Algorithms,19.38619636,"['Array', 'Dynamic Programming', 'Segment Tree']"
Easy,3411,Maximum Subarray With Equal Products,Algorithms,44.92099745,"['Array', 'Math', 'Sliding Window', 'Enumeration', 'Number Theory']"
Medium,3412,Find Mirror Score of a String,Algorithms,33.69981333,"['Hash Table', 'String', 'Stack', 'Simulation']"
Medium,3413,Maximum Coins From K Consecutive Bags,Algorithms,23.30620583,"['Array', 'Binary Search', 'Greedy', 'Sliding Window', 'Sorting', 'Prefix Sum']"
Hard,3414,Maximum Score of Non-overlapping Intervals,Algorithms,30.58533346,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting']"
Easy,3415,Find Products with Three Consecutive Digits ,Database,80.99510604,['Database']
Hard,3416,Subsequences with a Unique Middle Mode II,Algorithms,43.47826087,"['Array', 'Hash Table', 'Math', 'Combinatorics']"
Easy,3417,Zigzag Grid Traversal With Skip,Algorithms,63.25641376,"['Array', 'Matrix', 'Simulation']"
Medium,3418,Maximum Amount of Money Robot Can Earn,Algorithms,28.54367585,"['Array', 'Dynamic Programming', 'Matrix']"
Medium,3419,Minimize the Maximum Edge Weight of Graph,Algorithms,42.46443391,"['Binary Search', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Shortest Path']"
Hard,3420,Count Non-Decreasing Subarrays After K Operations,Algorithms,20.47378482,"['Array', 'Stack', 'Segment Tree', 'Queue', 'Sliding Window', 'Monotonic Stack', 'Monotonic Queue']"
Medium,3421,Find Students Who Improved,Database,47.27195827,['Database']
Medium,3422,Minimum Operations to Make Subarray Elements Equal,Algorithms,48.9571899,"['Array', 'Hash Table', 'Math', 'Sliding Window', 'Heap (Priority Queue)']"
Easy,3423,Maximum Difference Between Adjacent Elements in a Circular Array,Algorithms,66.56095842,['Array']
Medium,3424,Minimum Cost to Make Arrays Identical,Algorithms,36.44480519,"['Array', 'Greedy', 'Sorting']"
Hard,3425,Longest Special Path,Algorithms,19.73235485,"['Array', 'Hash Table', 'Tree', 'Depth-First Search', 'Prefix Sum']"
Hard,3426,Manhattan Distances of All Arrangements of Pieces,Algorithms,32.72579167,"['Math', 'Combinatorics']"
Easy,3427,Sum of Variable Length Subarrays,Algorithms,84.9939976,"['Array', 'Prefix Sum']"
Medium,3428,Maximum and Minimum Sums of at Most Size K Subsequences,Algorithms,20.08205893,"['Array', 'Math', 'Dynamic Programming', 'Sorting', 'Combinatorics']"
Medium,3429,Paint House IV,Algorithms,43.39017051,"['Array', 'Dynamic Programming']"
Hard,3430,Maximum and Minimum Sums of at Most Size K Subarrays,Algorithms,22.41594022,"['Array', 'Math', 'Stack', 'Monotonic Stack']"
Medium,3431,Minimum Unlocked Indices to Sort Nums,Algorithms,60.40955631,"['Array', 'Hash Table']"
Easy,3432,Count Partitions with Even Sum Difference,Algorithms,72.34451461,"['Array', 'Math', 'Prefix Sum']"
Medium,3433,Count Mentions Per User,Algorithms,29.90014829,"['Array', 'Math', 'Sorting', 'Simulation']"
Medium,3434,Maximum Frequency After Subarray Operation,Algorithms,24.04871458,"['Array', 'Hash Table', 'Dynamic Programming', 'Greedy', 'Enumeration', 'Prefix Sum']"
Hard,3435,Frequencies of Shortest Supersequences,Algorithms,15.34463895,"['Array', 'String', 'Bit Manipulation', 'Graph', 'Topological Sort', 'Enumeration']"
Easy,3436,Find Valid Emails,Database,55.46716907,['Database']
Medium,3437,Permutations III,Algorithms,85.45369504,"['Array', 'Backtracking']"
Easy,3438,Find Valid Pair of Adjacent Digits in String,Algorithms,59.33668705,"['Hash Table', 'String', 'Counting']"
Medium,3439,Reschedule Meetings for Maximum Free Time I,Algorithms,31.49770547,"['Array', 'Greedy', 'Sliding Window']"
Medium,3440,Reschedule Meetings for Maximum Free Time II,Algorithms,39.53902081,"['Array', 'Greedy', 'Enumeration']"
Hard,3441,Minimum Cost Good Caption,Algorithms,18.74627755,"['String', 'Dynamic Programming']"
Easy,3442,Maximum Difference Between Even and Odd Frequency I,Algorithms,48.77833242,"['Hash Table', 'String', 'Counting']"
Medium,3443,Maximum Manhattan Distance After K Changes,Algorithms,30.77937441,"['Hash Table', 'Math', 'String', 'Counting']"
Hard,3444,Minimum Increments for Target Multiples in an Array,Algorithms,25.13765749,"['Array', 'Math', 'Dynamic Programming', 'Bit Manipulation', 'Number Theory', 'Bitmask']"
Hard,3445,Maximum Difference Between Even and Odd Frequency II,Algorithms,18.42710018,"['String', 'Sliding Window', 'Enumeration', 'Prefix Sum']"
Medium,3446,Sort Matrix by Diagonals,Algorithms,70.31388807,"['Array', 'Sorting', 'Matrix']"
Medium,3447,Assign Elements to Groups with Constraints,Algorithms,25.61992676,"['Array', 'Hash Table']"
Hard,3448,Count Substrings Divisible By Last Digit,Algorithms,20.58651026,"['String', 'Dynamic Programming']"
Hard,3449,Maximize the Minimum Game Score,Algorithms,24.49938195,"['Array', 'Binary Search', 'Greedy']"
Easy,3450,Maximum Students on a Single Bench,Algorithms,85.80553584,"['Array', 'Hash Table']"
Hard,3451,Find Invalid IP Addresses,Database,56.55247417,['Database']
Easy,3452,Sum of Good Numbers,Algorithms,69.03432152,['Array']
Medium,3453,Separate Squares I,Algorithms,37.16972682,"['Array', 'Binary Search']"
Hard,3454,Separate Squares II,Algorithms,18.77934272,"['Array', 'Binary Search', 'Segment Tree', 'Line Sweep']"
Hard,3455,Shortest Matching Substring,Algorithms,21.63637127,"['Two Pointers', 'String', 'Binary Search', 'String Matching']"
Easy,3456,Find Special Substring of Length K,Algorithms,35.02551069,['String']
Medium,3457,Eat Pizzas!,Algorithms,32.2481889,"['Array', 'Greedy', 'Sorting']"
Medium,3458,Select K Disjoint Special Substrings,Algorithms,17.77044314,"['Hash Table', 'String', 'Dynamic Programming', 'Greedy', 'Sorting']"
Hard,3459,Length of Longest V-Shaped Diagonal Segment,Algorithms,33.5570118,"['Array', 'Dynamic Programming', 'Memoization', 'Matrix']"
Medium,3460,Longest Common Prefix After at Most One Removal,Algorithms,68.3557394,"['Two Pointers', 'String']"
Easy,3461,Check If Digits Are Equal in String After Operations I,Algorithms,77.32252235,"['Math', 'String', 'Simulation', 'Combinatorics', 'Number Theory']"
Medium,3462,Maximum Sum With at Most K Elements,Algorithms,59.83009709,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)', 'Matrix']"
Hard,3463,Check If Digits Are Equal in String After Operations II,Algorithms,9.562632135,"['Math', 'String', 'Combinatorics', 'Number Theory']"
Hard,3464,Maximize the Distance Between Points on a Square,Algorithms,18.94622093,"['Array', 'Binary Search', 'Greedy']"
Easy,3465,Find Products with Valid Serial Numbers,Database,64.93294079,['Database']
Medium,3466,Maximum Coin Collection ,Algorithms,52.69570515,"['Array', 'Dynamic Programming']"
Easy,3467,Transform Array by Parity,Algorithms,89.36076008,"['Array', 'Sorting', 'Counting']"
Medium,3468,Find the Number of Copy Arrays,Algorithms,45.75063003,"['Array', 'Math']"
Medium,3469,Find Minimum Cost to Remove Array Elements,Algorithms,17.9642938,"['Array', 'Dynamic Programming']"
Hard,3470,Permutations IV,Algorithms,26.88768156,"['Array', 'Math', 'Combinatorics', 'Enumeration']"
Easy,3471,Find the Largest Almost Missing Integer,Algorithms,36.55913978,"['Array', 'Hash Table']"
Medium,3472,Longest Palindromic Subsequence After at Most K Operations,Algorithms,36.13572987,"['String', 'Dynamic Programming']"
Medium,3473,Sum of K Subarrays With Length at Least M,Algorithms,24.71702472,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Hard,3474,Lexicographically Smallest Generated String,Algorithms,29.37290743,"['String', 'Greedy', 'String Matching']"
Medium,3475,DNA Pattern Recognition ,Database,86.21812263,['Database']
Medium,3476,Maximize Profit from Task Assignment,Algorithms,63.42412451,"['Array', 'Greedy', 'Sorting', 'Heap (Priority Queue)']"
Easy,3477,Fruits Into Baskets II,Algorithms,52.09955144,"['Array', 'Binary Search', 'Segment Tree', 'Simulation']"
Medium,3478,Choose K Elements With Maximum Sum,Algorithms,30.95114495,"['Array', 'Sorting', 'Heap (Priority Queue)']"
Medium,3479,Fruits Into Baskets III,Algorithms,21.43943382,"['Array', 'Binary Search', 'Segment Tree', 'Ordered Set']"
Hard,3480,Maximize Subarrays After Removing One Conflicting Pair,Algorithms,32.65706806,"['Array', 'Segment Tree', 'Enumeration', 'Prefix Sum']"
Medium,3481,Apply Substitutions,Algorithms,78.56265356,"['Array', 'Hash Table', 'String', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Topological Sort']"
Hard,3482,Analyze Organization Hierarchy,Database,57.46533376,['Database']
Easy,3483,Unique 3-Digit Even Numbers,Algorithms,66.78227617,"['Array', 'Hash Table', 'Recursion', 'Enumeration']"
Medium,3484,Design Spreadsheet,Algorithms,67.80013879,"['Array', 'Hash Table', 'String', 'Design', 'Matrix']"
Hard,3485,Longest Common Prefix of K Strings After Removal,Algorithms,20.05938927,"['Array', 'String', 'Trie']"
Hard,3486,Longest Special Path II,Algorithms,16.6250446,"['Array', 'Hash Table', 'Tree', 'Depth-First Search', 'Prefix Sum']"
Easy,3487,Maximum Unique Subarray Sum After Deletion,Algorithms,27.20904633,"['Array', 'Hash Table', 'Greedy']"
Medium,3488,Closest Equal Element Queries,Algorithms,30.83436015,"['Array', 'Hash Table', 'Binary Search']"
Medium,3489,Zero Array Transformation IV,Algorithms,29.30507297,"['Array', 'Dynamic Programming']"
Hard,3490,Count Beautiful Numbers,Algorithms,20.84829443,['Dynamic Programming']
Easy,3491,Phone Number Prefix,Algorithms,74.07725322,"['Array', 'String', 'Trie', 'Sorting']"
Easy,3492,Maximum Containers on a Ship,Algorithms,74.38276659,['Math']
Medium,3493,Properties Graph,Algorithms,46.56368005,"['Array', 'Hash Table', 'Depth-First Search', 'Breadth-First Search', 'Union Find', 'Graph']"
Medium,3494,Find the Minimum Amount of Time to Brew Potions,Algorithms,34.47153391,"['Array', 'Simulation', 'Prefix Sum']"
Hard,3495,Minimum Operations to Make Array Elements Zero,Algorithms,30.89961633,"['Array', 'Math', 'Bit Manipulation']"
Medium,3496,Maximize Score After Pair Deletions,Algorithms,60.70878274,"['Array', 'Greedy']"
Medium,3497,Analyze Subscription Conversion ,Database,76.64944356,['Database']
Easy,3498,Reverse Degree of a String,Algorithms,86.80979491,"['String', 'Simulation']"
Medium,3499,Maximize Active Section with Trade I,Algorithms,29.59424857,"['String', 'Enumeration']"
Hard,3500,Minimum Cost to Divide Array Into Subarrays,Algorithms,22.58220894,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Hard,3501,Maximize Active Section with Trade II,Algorithms,19.14634146,"['Array', 'String', 'Binary Search', 'Segment Tree']"
Easy,3502,Minimum Cost to Reach Every Position,Algorithms,81.78643085,['Array']
Medium,3503,Longest Palindrome After Substring Concatenation I,Algorithms,43.07567556,"['Two Pointers', 'String', 'Dynamic Programming', 'Enumeration']"
Hard,3504,Longest Palindrome After Substring Concatenation II,Algorithms,15.55705865,"['Two Pointers', 'String', 'Dynamic Programming']"
Hard,3505,Minimum Operations to Make Elements Within K Subarrays Equal,Algorithms,27.31632284,"['Array', 'Hash Table', 'Math', 'Dynamic Programming', 'Sliding Window', 'Heap (Priority Queue)']"
Hard,3506,Find Time Required to Eliminate Bacterial Strains,Algorithms,55.06849315,"['Array', 'Math', 'Greedy', 'Heap (Priority Queue)']"
Easy,3507,Minimum Pair Removal to Sort Array I,Algorithms,55.98811238,"['Array', 'Hash Table', 'Linked List', 'Heap (Priority Queue)', 'Simulation', 'Doubly-Linked List', 'Ordered Set']"
Medium,3508,Implement Router,Algorithms,21.49206403,"['Array', 'Hash Table', 'Binary Search', 'Design', 'Queue', 'Ordered Set']"
Hard,3509,Maximum Product of Subsequences With an Alternating Sum Equal to K,Algorithms,10.68959456,"['Array', 'Hash Table', 'Dynamic Programming']"
Hard,3510,Minimum Pair Removal to Sort Array II,Algorithms,13.06179775,"['Array', 'Hash Table', 'Linked List', 'Heap (Priority Queue)', 'Simulation', 'Doubly-Linked List', 'Ordered Set']"
Medium,3511,Make a Positive Array,Algorithms,37.62827822,"['Array', 'Greedy', 'Prefix Sum']"
Easy,3512,Minimum Operations to Make Array Sum Divisible by K,Algorithms,86.23870282,"['Array', 'Math']"
Medium,3513,Number of Unique XOR Triplets I,Algorithms,24.5268871,"['Array', 'Math', 'Bit Manipulation']"
Medium,3514,Number of Unique XOR Triplets II,Algorithms,29.02571969,"['Array', 'Math', 'Bit Manipulation', 'Enumeration']"
Hard,3515,Shortest Path in a Weighted Tree,Algorithms,30.83826961,"['Array', 'Tree', 'Depth-First Search', 'Binary Indexed Tree', 'Segment Tree']"
Easy,3516,Find Closest Person,Algorithms,82.40583135,['Math']
Medium,3517,Smallest Palindromic Rearrangement I,Algorithms,62.73805169,"['String', 'Sorting', 'Counting Sort']"
Hard,3518,Smallest Palindromic Rearrangement II,Algorithms,11.87695574,"['Hash Table', 'Math', 'String', 'Combinatorics', 'Counting']"
Hard,3519,Count Numbers with Non-Decreasing Digits ,Algorithms,33.25622639,"['Math', 'String', 'Dynamic Programming']"
Medium,3520,Minimum Threshold for Inversion Pairs Count,Algorithms,54.7107438,"['Array', 'Binary Search', 'Binary Indexed Tree', 'Segment Tree']"
Medium,3521,Find Product Recommendation Pairs,Database,66.06958319,['Database']
Medium,3522,Calculate Score After Performing Instructions,Algorithms,55.20598123,"['Array', 'Hash Table', 'String', 'Simulation']"
Medium,3523,Make Array Non-decreasing,Algorithms,53.97332533,"['Array', 'Stack', 'Greedy', 'Monotonic Stack']"
Medium,3524,Find X Value of Array I,Algorithms,32.00764507,"['Array', 'Math', 'Dynamic Programming']"
Hard,3525,Find X Value of Array II,Algorithms,26.48390017,"['Array', 'Math', 'Segment Tree']"
Hard,3526,Range XOR Queries with Subarray Reversals,Algorithms,65.80796253,"['Array', 'Tree', 'Binary Tree']"
Medium,3527,Find the Most Common Response,Algorithms,74.44860469,"['Array', 'Hash Table', 'String', 'Counting']"
Medium,3528,Unit Conversion I,Algorithms,57.29664622,"['Depth-First Search', 'Breadth-First Search', 'Graph']"
Medium,3529,Count Cells in Overlapping Horizontal and Vertical Substrings,Algorithms,21.30604007,"['Array', 'String', 'Rolling Hash', 'String Matching', 'Matrix', 'Hash Function']"
Hard,3530,Maximum Profit from Valid Topological Order in DAG,Algorithms,26.01848132,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Graph', 'Topological Sort', 'Bitmask']"
Medium,3531,Count Covered Buildings,Algorithms,36.76548654,"['Array', 'Hash Table', 'Sorting']"
Medium,3532,Path Existence Queries in a Graph I,Algorithms,54.48762731,"['Array', 'Hash Table', 'Binary Search', 'Union Find', 'Graph']"
Hard,3533,Concatenated Divisibility,Algorithms,24.84034061,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Bitmask']"
Hard,3534,Path Existence Queries in a Graph II,Algorithms,20.97290999,"['Array', 'Binary Search', 'Greedy', 'Graph', 'Sorting']"
Medium,3535,Unit Conversion II,Algorithms,70.41198502,"['Array', 'Math', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
Easy,3536,Maximum Product of Two Digits,Algorithms,69.51359185,"['Math', 'Sorting']"
Medium,3537,Fill a Special Grid,Algorithms,68.35376069,"['Array', 'Divide and Conquer', 'Matrix']"
Hard,3538,Merge Operations for Minimum Travel Time,Algorithms,26.20925592,"['Array', 'Dynamic Programming', 'Prefix Sum']"
Hard,3539,Find Sum of Array Product of Magical Sequences,Algorithms,21.0399449,"['Array', 'Math', 'Dynamic Programming', 'Bit Manipulation', 'Combinatorics', 'Bitmask']"
Medium,3540,Minimum Time to Visit All Houses,Algorithms,76.82926829,"['Array', 'Prefix Sum']"
Easy,3541,Find Most Frequent Vowel and Consonant,Algorithms,87.22666887,"['Hash Table', 'String', 'Counting']"
Medium,3542,Minimum Operations to Convert All Elements to Zero,Algorithms,21.30648819,"['Array', 'Hash Table', 'Stack', 'Greedy', 'Monotonic Stack']"
Medium,3543,Maximum Weighted K-Edge Path,Algorithms,17.76417569,"['Hash Table', 'Dynamic Programming', 'Graph']"
Hard,3544,Subtree Inversion Sum,Algorithms,41.88920768,"['Array', 'Dynamic Programming', 'Tree', 'Depth-First Search']"
Easy,3545,Minimum Deletions for At Most K Distinct Characters,Algorithms,71.58582143,"['Hash Table', 'String', 'Greedy', 'Sorting', 'Counting']"
Medium,3546,Equal Sum Grid Partition I,Algorithms,42.53574248,"['Array', 'Matrix', 'Enumeration', 'Prefix Sum']"
Hard,3547,Maximum Sum of Edge Values in a Graph,Algorithms,27.94027229,"['Greedy', 'Depth-First Search', 'Graph', 'Sorting']"
Hard,3548,Equal Sum Grid Partition II,Algorithms,19.00744907,"['Array', 'Hash Table', 'Matrix', 'Enumeration', 'Prefix Sum']"
Hard,3549,Multiply Two Polynomials,Algorithms,69.00826446,[]
